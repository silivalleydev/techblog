{"componentChunkName":"component---src-templates-docs-js","path":"/tdd/3.chai","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Gitbook Boilerplate | Hasura","docsLocation":"https://github.com/hasura/gatsby-gitbook-boilerplate/tree/master/content"}},"mdx":{"fields":{"id":"3ecf82c3-19a5-5fee-b43d-b3f8b7de2fc5","title":"Chai Library","slug":"/tdd/3.chai"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"Chai Library\",\n  \"metaTitle\": \"Chai Library\",\n  \"metaDescription\": \"This is the meta description\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"\\uCC28\\uC774(Chai)\\uB780?\"), mdx(\"p\", null, \"chai\\uB780 BDD/TDD stype \\uBAA8\\uB450\\uB97C \\uC9C0\\uC6D0\\uD558\\uB294 assertion \\uB77C\\uC774\\uBE0C\\uB7EC\\uB9AC\\uC785\\uB2C8\\uB2E4.  \"), mdx(\"h3\", null, \"\\uADF8\\uB807\\uB2E4\\uBA74 Assertion\\uC740 \\uBB34\\uC5C7\\uC778\\uAC00?\"), mdx(\"p\", null, \"Assertion\\uC774\\uB780 \\uD504\\uB85C\\uADF8\\uB798\\uBA38 \\uC790\\uC2E0\\uC774 \\uC804\\uAC1C\\uD558\\uACE0 \\uC788\\uB294 \\uCF54\\uB4DC \\uB0B4\\uC6A9\\uC5D0\\uC11C \\uD504\\uB85C\\uADF8\\uB798\\uBA38\\uAC00\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uC0DD\\uAC01\\uD558\\uACE0 \\uC788\\uB294 \\uC6C0\\uC9C1\\uC784\\uC774\\uB098 \\uD2B9\\uC815 \\uC9C0\\uC810\\uC5D0\\uC11C \\uD504\\uB85C\\uADF8\\uB7A8 \\uC0C1\\uC758 \\uC124\\uC815 \\uAC12\\uB4E4\\uC774 \\uC77C\\uCE58\\uD558\\uACE0 \\uC788\\uB294\\uC9C0\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uAC80\\uC0AC\\uD560 \\uC218 \\uC788\\uB3C4\\uB85D \\uD558\\uB294 \\uAC83\\uC744 Assertion\\uC774\\uB77C\\uACE0 \\uD569\\uB2C8\\uB2E4.  \"), mdx(\"h3\", null, \"API\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"assert(expression, message)\"), \": \\uC790\\uC2E0\\uC758 \\uD14C\\uC2A4\\uD2B8 \\uD45C\\uD604\\uC2DD\\uC744 \\uC791\\uC131\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { assert } from 'chai';\\n\\n  describe('Calculator', () => {\\n    it('assert(expression, message) \\uC790\\uC2E0\\uC758 \\uD14C\\uC2A4\\uD2B8 \\uD45C\\uD604\\uC2DD\\uC744 \\uC791\\uC131', () => {\\n      assert( 1 === 1, 'assert')\\n    })\\n  })\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"assert.isOk(object, message)\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"object\"), \"\\uAC00 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"truthy\"), \"\\uC778 \\uACBD\\uC6B0\\uC778\\uC9C0 \\uD14C\\uC2A4\\uD2B8\\uD558\\uB294 \\uAC83\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { assert } from 'chai';\\n\\n  describe('Calculator', () => {\\n    it('.isOk(object, message) Asserts that object is `truthy`',() => {\\n      assert.isOk([],'isObject');\\n      assert.isOk(\\\"ddd\\\",'isObject');\\n      assert.isOk(1,'isObject');\\n      assert.isOk(true,'isObject');\\n      // assert.isOk(0,'isObject'); <-- 0\\uC740 falsy\\uC774\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uD14C\\uC2A4\\uD2B8\\uAC00 \\uC2E4\\uD328\\uD55C\\uB2E4\\n      // assert.isOk(\\\"\\\",'isObject');\\n      // assert.isOk(false,'isObject');\\n    })\\n  })\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"assert.isNotOk(object, [message])\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"object\"), \"\\uAC00 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"falsy\"), \"\\uC778 \\uACBD\\uC6B0\\uC778\\uC9C0 \\uD14C\\uC2A4\\uD2B8\\uD558\\uB294 \\uAC83  \")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { assert } from 'chai';\\n\\n  describe('Calculator', () => {\\n    it('.isNotOk(object, [message]) Asserts that object is `falsy`',() => {\\n      assert.isNotOk(0, 'isObject');\\n      assert.isNotOk(false, 'isObject');\\n    })\\n  })\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"assert.equal(actual, expected, [message])\"), \": \\uD14C\\uC2A4\\uD305\\uD560 \\uCF54\\uB4DC \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"actual\"), \" \\uAC12\\uACFC \\uAE30\\uB300\\uAC12 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"expected\"), \"\\uAC00 \\uB3D9\\uC77C\\uD55C\\uC9C0 \\uD14C\\uC2A4\\uD2B8 \\uD558\\uB294 \\uAC83\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { assert } from 'chai';\\n\\n  describe('Calculator', () => {\\n    it('.equal(actual, expected, [message]) Asserts non-strict equality (==) of actual and expected',() => {\\n      assert.equal(5, 5, 'isEqual');\\n      // assert.equal(5, 7, 'isEqual');\\n    })\\n  })\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"assert.notEqual(actual, expected, [message])\"), \": \\uD14C\\uC2A4\\uD305\\uD560 \\uCF54\\uB4DC \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"actual\"), \" \\uAC12\\uACFC \\uAE30\\uB300\\uAC12 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"expected\"), \"\\uAC00 \\uB2E4\\uB978\\uC9C0 \\uD14C\\uC2A4\\uD2B8 \\uD558\\uB294 \\uAC83\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { assert } from 'chai';\\n\\n  describe('Calculator', () => {\\n    it('.notEqual(actual, expected, [message]) Asserts non-strict inequality (!=) of actual and expected.',() => {\\n      // assert.notEqual(5, 5, 'isEqual');\\n      assert.notEqual(5, 7, 'isEqual');\\n    })\\n  })\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"assert.isTrue(value, [message])\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"value\"), \"\\uAC00 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"true\"), \"\\uC778\\uC9C0 \\uD14C\\uC2A4\\uD2B8\\uD558\\uB294 \\uAC83\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { assert } from 'chai';\\n\\n  describe('Calculator', () => {\\n    it('.isTrue(value, [message]) Asserts that value is true.',() => {\\n      const value = true;\\n      assert.isTrue(value, 'isTrue')\\n    })\\n  })\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"assert.isFalse(value, [message])\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"value\"), \"\\uAC00 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"false\"), \"\\uC778\\uC9C0 \\uD14C\\uC2A4\\uD2B8\\uD558\\uB294 \\uAC83\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"  it('.isFalse(value, [message]) Asserts that value is false.',() => {\\n    const value = false;\\n    assert.isFalse(value, 'isFalse')\\n  })\\n});\\n\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \".exists(value, message)\"), \": \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"value\"), \"\\uAC00 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"null\"), \" \\uB610\\uB294 \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"undefined\"), \"\\uAC00 \\uC544\\uB2C8\\uBA74 \\uD14C\\uC2A4\\uD2B8\\uB97C \\uD1B5\\uACFC\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"  it('.exists Asserts that the target is neither null nor undefined.',() => {\\n    const jack = undefined\\n    var foo = {};\\n    assert.exists(jack, 'foo is neither `null` nor `undefined`');\\n  })\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#차이chai란","title":"차이(Chai)란?","items":[{"url":"#그렇다면-assertion은-무엇인가","title":"그렇다면 Assertion은 무엇인가?"},{"url":"#api","title":"API"}]}]},"parent":{"__typename":"File","relativePath":"tdd/3.chai.md"},"frontmatter":{"metaTitle":"Chai Library","metaDescription":"This is the meta description"}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/framework/prisma","title":"Prisma"}}},{"node":{"fields":{"slug":"/datastructure&algorithm","title":"자료구조 & 알고리즘(Datastructure & Algorithm)"}}},{"node":{"fields":{"slug":"/framework","title":"프레임워크(Framework)"}}},{"node":{"fields":{"slug":"/git","title":"깃(Git)"}}},{"node":{"fields":{"slug":"/","title":"SuHyeon's TechBlog"}}},{"node":{"fields":{"slug":"/infra","title":"인프라(Infra)"}}},{"node":{"fields":{"slug":"/library","title":"라이브러리(Library)"}}},{"node":{"fields":{"slug":"/language","title":"언어(Language)"}}},{"node":{"fields":{"slug":"/tdd","title":"테스트 주도 개발(TDD)"}}},{"node":{"fields":{"slug":"/terminology","title":"용어정리(terminology)"}}},{"node":{"fields":{"slug":"/terminology/web","title":"Web"}}},{"node":{"fields":{"slug":"/tdd/2.mocha","title":"Mocha Framework"}}},{"node":{"fields":{"slug":"/tdd/3.chai","title":"Chai Library"}}},{"node":{"fields":{"slug":"/tdd/1.unit-test","title":"유닛 테스트(Unit Test)"}}},{"node":{"fields":{"slug":"/library/graphql","title":"GraphQL"}}},{"node":{"fields":{"slug":"/library/graphql/ApolloGraphQLserver","title":"ApolloGraphQLserver"}}},{"node":{"fields":{"slug":"/library/graphql/graphql","title":"GraphQL"}}},{"node":{"fields":{"slug":"/language/javascript","title":"Javascript"}}},{"node":{"fields":{"slug":"/language/python","title":"Python"}}},{"node":{"fields":{"slug":"/language/python/basic","title":"Basic"}}},{"node":{"fields":{"slug":"/language/typescript","title":"Typescript"}}},{"node":{"fields":{"slug":"/library/nexusjs","title":"Nexus.JS"}}},{"node":{"fields":{"slug":"/language/javascript/class","title":"Class"}}},{"node":{"fields":{"slug":"/language/javascript/executionContext","title":"Execution Context(실행 컨텍스트)"}}},{"node":{"fields":{"slug":"/language/javascript/scope_this","title":"스코프 & 함수 호출 방식에 의해 결정되는 this"}}},{"node":{"fields":{"slug":"/infra/1.BasicTheory","title":"Basic Theory"}}},{"node":{"fields":{"slug":"/infra/2.aws","title":"aws"}}},{"node":{"fields":{"slug":"/infra/3.docker","title":"Docker"}}},{"node":{"fields":{"slug":"/infra/3.docker/docker","title":"Docker"}}},{"node":{"fields":{"slug":"/infra/3.docker/dockerawsdeploy","title":"Docker AWS EC2 Deploy"}}},{"node":{"fields":{"slug":"/infra/3.docker/dockerbasic","title":"Docker Basic"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-Basic","title":"AWS-Basic"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-EC2","title":"AWS-EC2"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-RDS","title":"AWS-RDS"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-S3","title":"AWS-S3"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-Route53","title":"AWS-Route 53"}}},{"node":{"fields":{"slug":"/git/changing-default-branch","title":"Changing the Default Branch"}}},{"node":{"fields":{"slug":"/git/configuring-protected-branches","title":"Configure Branch Protection Rule"}}},{"node":{"fields":{"slug":"/git/basic-git-command","title":"Basic git command"}}},{"node":{"fields":{"slug":"/git/gitforksync","title":"git fork & sync"}}},{"node":{"fields":{"slug":"/git/rebase","title":"Rebase"}}},{"node":{"fields":{"slug":"/framework/prisma/NoticePrisma","title":"Notice Prisma"}}},{"node":{"fields":{"slug":"/framework/electron","title":"일렉트론 학습"}}},{"node":{"fields":{"slug":"/framework/prisma/prisma2","title":"Prisma 2"}}},{"node":{"fields":{"slug":"/framework/electron/electronbasic","title":"Electron Basic"}}},{"node":{"fields":{"slug":"/framework/NextJs","title":"Next Js"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/10.SpaceComplexity","title":"공간 복잡도(Space Complexity)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/11.BubbleSort","title":"버블 정렬(Bubble Sort)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/12.InsertionSort","title":"삽입 정렬(Insertion Sort)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/13.SelectionSort","title":"선택 정렬(Selection Sort)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/14.RecursiveCall","title":"재귀 용법(Recursive Call)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/15.DynamicProgramming","title":"동적 계획법과 분할 정복(Dynamic Programming & Divide and conquer"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/16.QuickSort","title":"퀵 정렬(Quick Sort)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/17.MergeSort","title":"병렬 정렬(Merge Sort)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/18.SequentialSearch","title":"순차 탐색(Sequential Search)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/2.array","title":"배열(Array)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/19.BinarySearch","title":"탐색 알고리즘(Binary Search)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/20.Graph","title":"그래프(Graph)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/21.Depth-FirstSearch","title":"깊이 우선 탐색(Depth-FirstSearch)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/22.Breadth-FirstSearch","title":"너비 우선 탐색(Breadth-FirstSearch)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/23.GreedyAlgorithm","title":"탐욕 알고리즘(Greedy Algorithm)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/25.MinimumSpanningTree","title":"최소 신장 트리(Minimum Spanning Tree)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/24.DijkstraAlgorithm","title":"다익스트라 알고리즘(Dijkstra Algorithm)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/26.BackTracking","title":"백트래킹(BackTracking)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/3.queue","title":"큐(Queue)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/4.stack","title":"스택(Stack)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/5.linkedlist","title":"링크드리스트(LinkedList)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/6.TimeComplexity","title":"시간 복잡도(Time Complexity)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/8.Tree","title":"트리(Tree)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/9.Heap","title":"힙(Heap)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/7.HashTable","title":"해쉬 테이블(HashTable)"}}}]}},"pageContext":{"id":"3ecf82c3-19a5-5fee-b43d-b3f8b7de2fc5"}},"staticQueryHashes":["2619113677","2619113677","3706406642","3706406642","417421954","417421954"]}