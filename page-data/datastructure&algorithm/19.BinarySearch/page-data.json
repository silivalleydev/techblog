{"componentChunkName":"component---src-templates-docs-js","path":"/datastructure&algorithm/19.BinarySearch","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Gitbook Boilerplate | Hasura","docsLocation":"https://github.com/hasura/gatsby-gitbook-boilerplate/tree/master/content"}},"mdx":{"fields":{"id":"880a5c60-5c55-52a9-a7d2-2ab336341d4d","title":"탐색 알고리즘","slug":"/datastructure&algorithm/19.BinarySearch"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"탐색 알고리즘\",\n  \"metaTitle\": \"탐색 알고리즘\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"1. \\uC774\\uC9C4 \\uD0D0\\uC0C9 (Binary Search) \\uC774\\uB780?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD0D0\\uC0C9\\uD560 \\uC790\\uB8CC\\uB97C \\uB458\\uB85C \\uB098\\uB204\\uC5B4 \\uD574\\uB2F9 \\uB370\\uC774\\uD130\\uAC00 \\uC788\\uC744\\uB9CC\\uD55C \\uACF3\\uC744 \\uD0D0\\uC0C9\\uD558\\uB294 \\uBC29\\uBC95\")), mdx(\"h3\", null, \"\\uB2E4\\uC74C \\uBB38\\uC81C\\uB97C \\uBA3C\\uC800 \\uC0DD\\uAC01\\uD574\\uBCF4\\uC790\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://www.fun-coding.org/00_Images/binarysearch.png\",\n    \"alt\": \"ㅇㄴㅊ\"\n  }))), mdx(\"h3\", null, \"\\uC774\\uC9C4 \\uD0D0\\uC0C9\\uC758 \\uC774\\uD574 (\\uC21C\\uCC28 \\uD0D0\\uC0C9\\uACFC \\uBE44\\uAD50\\uD558\\uBA70 \\uC774\\uD574\\uD558\\uAE30)\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://www.mathwarehouse.com/programming/images/binary-vs-linear-search/binary-and-linear-search-animations.gif\",\n    \"alt\": \"dsc\"\n  }))), mdx(\"h3\", null, \"2. \\uBD84\\uD560 \\uC815\\uBCF5 \\uC54C\\uACE0\\uB9AC\\uC998\\uACFC \\uC774\\uC9C4 \\uD0D0\\uC0C9\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBD84\\uD560 \\uC815\\uBCF5 \\uC54C\\uACE0\\uB9AC\\uC998 (Divide and Conquer)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Divide: \\uBB38\\uC81C\\uB97C \\uD558\\uB098 \\uB610\\uB294 \\uB458 \\uC774\\uC0C1\\uC73C\\uB85C \\uB098\\uB208\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Conquer: \\uB098\\uB220\\uC9C4 \\uBB38\\uC81C\\uAC00 \\uCDA9\\uBD84\\uD788 \\uC791\\uACE0, \\uD574\\uACB0\\uC774 \\uAC00\\uB2A5\\uD558\\uB2E4\\uBA74 \\uD574\\uACB0\\uD558\\uACE0, \\uADF8\\uB807\\uC9C0 \\uC54A\\uB2E4\\uBA74 \\uB2E4\\uC2DC \\uB098\\uB208\\uB2E4.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774\\uC9C4 \\uD0D0\\uC0C9\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Divide: \\uB9AC\\uC2A4\\uD2B8\\uB97C \\uB450 \\uAC1C\\uC758 \\uC11C\\uBE0C \\uB9AC\\uC2A4\\uD2B8\\uB85C \\uB098\\uB208\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Comquer\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAC80\\uC0C9\\uD560 \\uC22B\\uC790 (search) > \\uC911\\uAC04\\uAC12 \\uC774\\uBA74, \\uB4B7 \\uBD80\\uBD84\\uC758 \\uC11C\\uBE0C \\uB9AC\\uC2A4\\uD2B8\\uC5D0\\uC11C \\uAC80\\uC0C9\\uD560 \\uC22B\\uC790\\uB97C \\uCC3E\\uB294\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAC80\\uC0C9\\uD560 \\uC22B\\uC790 (search) < \\uC911\\uAC04\\uAC12 \\uC774\\uBA74, \\uC55E \\uBD80\\uBD84\\uC758 \\uC11C\\uBE0C \\uB9AC\\uC2A4\\uD2B8\\uC5D0\\uC11C \\uAC80\\uC0C9\\uD560 \\uC22B\\uC790\\uB97C \\uCC3E\\uB294\\uB2E4.  \")))))), mdx(\"h3\", null, \"3. \\uC5B4\\uB5BB\\uAC8C \\uCF54\\uB4DC\\uB85C \\uB9CC\\uB4E4\\uAE4C?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774\\uC9C4 \\uD0D0\\uC0C9\\uC740 \\uB370\\uC774\\uD130\\uAC00 \\uC815\\uB82C\\uB418\\uC788\\uB294 \\uC0C1\\uD0DC\\uC5D0\\uC11C \\uC9C4\\uD589\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB370\\uC774\\uD130\\uAC00 \", \"[2, 3, 8, 12, 20]\", \" \\uC77C \\uB54C,\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"binary_search(data_list, find_data) \\uD568\\uC218\\uB97C \\uB9CC\\uB4E4\\uACE0\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"find_data\\uB294 \\uCC3E\\uB294 \\uC22B\\uC790\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"data_list\\uB294 \\uB370\\uC774\\uD130 \\uB9AC\\uC2A4\\uD2B8\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"data_list\\uC758 \\uC911\\uAC04\\uAC12\\uC744 find_data\\uC640 \\uBE44\\uAD50\\uD574\\uC11C\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"find_data < data_list\\uC758 \\uC911\\uAC04\\uAC12 \\uC774\\uB77C\\uBA74\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB9E8 \\uC55E\\uBD80\\uD130 data_list\\uC758 \\uC911\\uAC04\\uAE4C\\uC9C0 \\uC5D0\\uC11C \\uB2E4\\uC2DC find_data \\uCC3E\\uAE30\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"data_list\\uC758 \\uC911\\uAC04\\uAC12 < find_data \\uC774\\uB77C\\uBA74\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"data_list\\uC758 \\uC911\\uAC04\\uBD80\\uD130 \\uB9E8 \\uB05D\\uAE4C\\uC9C0\\uC5D0\\uC11C \\uB2E4\\uC2DC find_data \\uCC3E\\uAE30\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uADF8\\uB807\\uC9C0 \\uC54A\\uB2E4\\uBA74, data_list\\uC758 \\uC911\\uAC04\\uAC12\\uC740 find_data \\uC778 \\uACBD\\uC6B0\\uB85C, return data_list \\uC911\\uAC04\\uC704\\uCE58\")))))))), mdx(\"h3\", null, \"4. \\uC54C\\uACE0\\uB9AC\\uC998 \\uAD6C\\uD604\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"def binary_search(data, search):\\n    print (data)\\n    if len(data) == 1 and search == data[0]:\\n        return True\\n    if len(data) == 1 and search != data[0]:\\n        return False\\n    if len(data) == 0:\\n        return False\\n    \\n    medium = len(data) // 2\\n    if search == data[medium]:\\n        return True\\n    else:\\n        if search > data[medium]:\\n            return binary_search(data[medium+1:], search)\\n        else:\\n            return binary_search(data[:medium], search)\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"import random\\ndata_list = random.sample(range(100), 10)\\ndata_list\\n\\n[69, 65, 18, 71, 11, 10, 42, 68, 36, 89]\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"data_list.sort()\\ndata_list\\n[10, 11, 18, 36, 42, 65, 68, 69, 71, 89]\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"binary_search(data_list, 66)\\n\\n[10, 11, 18, 36, 42, 65, 68, 69, 71, 89]\\n[68, 69, 71, 89]\\n[68, 69]\\n[68]\\nFalse\\n\")), mdx(\"h3\", null, \"5. \\uC54C\\uACE0\\uB9AC\\uC998 \\uBD84\\uC11D\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"n\\uAC1C\\uC758 \\uB9AC\\uC2A4\\uD2B8\\uB97C \\uB9E4\\uBC88 2\\uB85C \\uB098\\uB204\\uC5B4 1\\uC774 \\uB420 \\uB54C\\uAE4C\\uC9C0 \\uBE44\\uAD50\\uC5F0\\uC0B0\\uC744 k\\uD68C \\uC9C4\\uD589\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"n X $\\\\frac { 1 }{ 2 }$ X $\\\\frac { 1 }{ 2 }$ X $\\\\frac { 1 }{ 2 }$ ... = 1\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"n X $\\\\frac { 1 }{ 2 }^k$ = 1\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"n = $2^k$ = $log_2 n$ = $log_2 2^k$\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$log_2 n$ = k\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBE45 \\uC624 \\uD45C\\uAE30\\uBC95\\uC73C\\uB85C\\uB294 k + 1 \\uC774 \\uACB0\\uAD6D \\uCD5C\\uC885 \\uC2DC\\uAC04 \\uBCF5\\uC7A1\\uB3C4\\uC784 (1\\uC774 \\uB418\\uC5C8\\uC744 \\uB54C\\uB3C4, \\uBE44\\uAD50\\uC5F0\\uC0B0\\uC744 \\uD55C\\uBC88 \\uC218\\uD589)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uACB0\\uAD6D O($log_2 n$ + 1) \\uC774\\uACE0, 2\\uC640 1, \\uC0C1\\uC218\\uB294 \\uC0AD\\uC81C \\uB418\\uBBC0\\uB85C, O($log n$)\")))))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB2E4\\uC74C 10000\\uAC1C\\uC758 \\uB370\\uC774\\uD130\\uB97C \\uC0BD\\uC785 \\uC815\\uB82C, \\uD035 \\uC815\\uB82C\\uB85C \\uC815\\uB82C\\uD558\\uB294 \\uD568\\uC218\\uB97C \\uAC01\\uAC01 \\uB9CC\\uB4E4\\uC5B4\\uBCF4\\uACE0, \\uAC01\\uAC01\\uC758 \\uC815\\uB82C \\uC2DC\\uAC04\\uC744 \\uCD9C\\uB825\\uD558\\uAE30\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"# \\uB370\\uC774\\uD130 \\uC14B\\nimport random \\ndata_list = random.sample(range(100000), 10000)\\n\\n# \\uD604\\uC7AC \\uC2DC\\uAC04 \\uAD6C\\uD558\\uAE30\\nimport datetime\\nprint (datetime.datetime.now())\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#1-이진-탐색-binary-search-이란","title":"1. 이진 탐색 (Binary Search) 이란?"},{"url":"#다음-문제를-먼저-생각해보자","title":"다음 문제를 먼저 생각해보자"},{"url":"#이진-탐색의-이해-순차-탐색과-비교하며-이해하기","title":"이진 탐색의 이해 (순차 탐색과 비교하며 이해하기)"},{"url":"#2-분할-정복-알고리즘과-이진-탐색","title":"2. 분할 정복 알고리즘과 이진 탐색"},{"url":"#3-어떻게-코드로-만들까","title":"3. 어떻게 코드로 만들까?"},{"url":"#4-알고리즘-구현","title":"4. 알고리즘 구현"},{"url":"#5-알고리즘-분석","title":"5. 알고리즘 분석"}]},"parent":{"relativePath":"datastructure&algorithm/19.BinarySearch.md"},"frontmatter":{"metaTitle":"탐색 알고리즘","metaDescription":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/framework/prisma","title":"Prisma"}}},{"node":{"fields":{"slug":"/datastructure&algorithm","title":"자료구조 & 알고리즘"}}},{"node":{"fields":{"slug":"/framework","title":"프레임워크"}}},{"node":{"fields":{"slug":"/","title":"SuHyeon's TechBlog"}}},{"node":{"fields":{"slug":"/language","title":"언어"}}},{"node":{"fields":{"slug":"/infra","title":"인프라"}}},{"node":{"fields":{"slug":"/library","title":"라이브러리"}}},{"node":{"fields":{"slug":"/library/graphql","title":"GraphQL"}}},{"node":{"fields":{"slug":"/language/typescript","title":"Typescript"}}},{"node":{"fields":{"slug":"/library/nexusjs","title":"Nexus.JS"}}},{"node":{"fields":{"slug":"/library/graphql/ApolloGraphQLserver","title":"ApolloGraphQLserver"}}},{"node":{"fields":{"slug":"/library/graphql/graphql","title":"GraphQL"}}},{"node":{"fields":{"slug":"/framework/NextJs","title":"Next Js"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/3.queue","title":"큐(queue)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/4.stack","title":"스택(stack)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/1.datastructure&algorithm-tutorial","title":"자료구조 & 알고리즘 튜토리얼"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/5.linkedlist","title":"링크드리스트(LinkedList)"}}},{"node":{"fields":{"slug":"/framework/prisma/NoticePrisma","title":"Notice Prisma"}}},{"node":{"fields":{"slug":"/framework/prisma/prisma2","title":"Prisma 2"}}},{"node":{"fields":{"slug":"/infra/2.aws","title":"aws"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-Basic","title":"AWS-Basic"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-S3","title":"AWS-S3"}}},{"node":{"fields":{"slug":"/infra/3.docker/docker","title":"Docker"}}},{"node":{"fields":{"slug":"/infra/3.docker","title":"Docker"}}},{"node":{"fields":{"slug":"/infra/3.docker/dockerbasic","title":"Docker Basic"}}},{"node":{"fields":{"slug":"/infra/1.BasicTheory","title":"Basic Theory"}}},{"node":{"fields":{"slug":"/testframework","title":"테스트 프레임워크"}}},{"node":{"fields":{"slug":"/testframework/1.mocha","title":"Mocha"}}},{"node":{"fields":{"slug":"/infra/3.docker/dockerawsdeploy","title":"Docker AWS EC2 Deploy"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-EC2","title":"AWS-EC2"}}},{"node":{"fields":{"slug":"/language/javascript","title":"Javascript"}}},{"node":{"fields":{"slug":"/language/javascript/class","title":"Class"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-Route53","title":"AWS-Route 53"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-RDS","title":"AWS-RDS"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/7.HashTable","title":"해쉬 테이블"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/8.Tree","title":"트리"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/9.Heap","title":"힙"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/10.SpaceComplexity","title":"공간 복잡도"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/13.SelectionSort","title":"선택 정렬"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/14.RecursiveCall","title":"재귀 용법"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/15.DynamicProgramming","title":"동적 계획법과 분할 정복"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/16.QuickSort","title":"퀵 정렬"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/17.MergeSort","title":"병렬 정렬"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/18.SequentialSearch","title":"순차 탐색"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/19.BinarySearch","title":"탐색 알고리즘"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/20.Graph","title":"그래프"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/2.array","title":"배열"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/21.Depth-FirstSearch","title":"깊이 우선 탐색"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/22.Breadth-FirstSearch","title":"너비 우선 탐색"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/23.GreedyAlgorithm","title":"탐욕 알고리즘"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/24.DijkstraAlgorithm","title":"다익스트라 알고리즘"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/25.MinimumSpanningTree","title":"최소 신장 트리"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/26.BackTracking","title":"백트래킹"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/6.TimeComplexity","title":"시간 복잡도"}}},{"node":{"fields":{"slug":"/git","title":"깃 허브"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/11.BubbleSort","title":"버블 정렬"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/12.InsertionSort","title":"삽입 정렬"}}},{"node":{"fields":{"slug":"/git/gitforksync","title":"git fork & sync"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"880a5c60-5c55-52a9-a7d2-2ab336341d4d"}}}