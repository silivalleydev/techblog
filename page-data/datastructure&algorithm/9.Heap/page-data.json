{"componentChunkName":"component---src-templates-docs-js","path":"/datastructure&algorithm/9.Heap","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Gitbook Boilerplate | Hasura","docsLocation":"https://github.com/hasura/gatsby-gitbook-boilerplate/tree/master/content"}},"mdx":{"fields":{"id":"b42d7f35-fbbd-5ea8-9d4f-cdfa00247bcb","title":"힙(Heap)","slug":"/datastructure&algorithm/9.Heap"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"힙(Heap)\",\n  \"metaTitle\": \"힙(Heap)\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h3\", null, \"1. \\uD799 (Heap) \\uC774\\uB780?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD799: \\uB370\\uC774\\uD130\\uC5D0\\uC11C \\uCD5C\\uB300\\uAC12\\uACFC \\uCD5C\\uC18C\\uAC12\\uC744 \\uBE60\\uB974\\uAC8C \\uCC3E\\uAE30 \\uC704\\uD574 \\uACE0\\uC548\\uB41C \\uC644\\uC804 \\uC774\\uC9C4 \\uD2B8\\uB9AC(Complete Binary Tree)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC644\\uC804 \\uC774\\uC9C4 \\uD2B8\\uB9AC: \\uB178\\uB4DC\\uB97C \\uC0BD\\uC785\\uD560 \\uB54C \\uCD5C\\uD558\\uB2E8 \\uC67C\\uCABD \\uB178\\uB4DC\\uBD80\\uD130 \\uCC28\\uB840\\uB300\\uB85C \\uC0BD\\uC785\\uD558\\uB294 \\uD2B8\\uB9AC\")))), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://www.fun-coding.org/00_Images/completebinarytree.png\",\n    \"alt\": \"sds\"\n  })), \"  \"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD799\\uC744 \\uC0AC\\uC6A9\\uD558\\uB294 \\uC774\\uC720\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBC30\\uC5F4\\uC5D0 \\uB370\\uC774\\uD130\\uB97C \\uB123\\uACE0, \\uCD5C\\uB300\\uAC12\\uACFC \\uCD5C\\uC18C\\uAC12\\uC744 \\uCC3E\\uC73C\\uB824\\uBA74 O(n) \\uC774 \\uAC78\\uB9BC <- \\uC77C\\uBC18 \\uBC30\\uC5F4\\uB85C \\uCD5C\\uB300 \\uCD5C\\uC18C\\uAC12\\uC744 \\uAC80\\uC0C9\\uD558\\uB824\\uBA74 \\uC624\\uB798 \\uAC78\\uB9BC\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774\\uC5D0 \\uBC18\\uD574, \\uD799\\uC5D0 \\uB370\\uC774\\uD130\\uB97C \\uB123\\uACE0, \\uCD5C\\uB300\\uAC12\\uACFC \\uCD5C\\uC18C\\uAC12\\uC744 \\uCC3E\\uC73C\\uBA74, O($log n$)\\uC774 \\uAC78\\uB9BC <- \\uD799\\uC744 \\uC0AC\\uC6A9\\uD558\\uBA74 \\uCD5C\\uB300 \\uCD5C\\uC18C\\uAC12\\uC744 \\uCC3E\\uB294 \\uC2DC\\uAC04\\uC774 \\uD604\\uACA9\\uD558\\uAC8C \\uC904\\uC5B4\\uB4E0\\uB2E4 \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC6B0\\uC120\\uC21C\\uC704 \\uD050\\uC640 \\uAC19\\uC774 \\uCD5C\\uB300\\uAC12 \\uB610\\uB294 \\uCD5C\\uC18C\\uAC12\\uC744 \\uBE60\\uB974\\uAC8C \\uCC3E\\uC544\\uC57C \\uD558\\uB294 \\uC790\\uB8CC\\uAD6C\\uC870 \\uBC0F \\uC54C\\uACE0\\uB9AC\\uC998 \\uAD6C\\uD604 \\uB4F1\\uC5D0 \\uD65C\\uC6A9\\uB428\")))), mdx(\"h3\", null, \"2. \\uD799 (Heap) \\uAD6C\\uC870\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD799\\uC740 \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"\\uCD5C\\uB300\\uAC12\"), \"\\uC744 \\uAD6C\\uD558\\uAE30 \\uC704\\uD55C \\uAD6C\\uC870 (\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"\\uCD5C\\uB300 \\uD799, Max Heap\"), \") \\uC640, \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"\\uCD5C\\uC18C\\uAC12\"), \"\\uC744 \\uAD6C\\uD558\\uAE30 \\uC704\\uD55C \\uAD6C\\uC870 (\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"\\uCD5C\\uC18C \\uD799, Min Heap\"), \") \\uB85C \\uBD84\\uB958\\uD560 \\uC218 \\uC788\\uC74C\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD799\\uC740 \\uB2E4\\uC74C\\uACFC \\uAC19\\uC774 \\uB450 \\uAC00\\uC9C0 \\uC870\\uAC74\\uC744 \\uAC00\\uC9C0\\uACE0 \\uC788\\uB294 \\uC790\\uB8CC\\uAD6C\\uC870\\uC784\", mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uAC01 \\uB178\\uB4DC\\uC758 \\uAC12\\uC740 \\uD574\\uB2F9 \\uB178\\uB4DC\\uC758 \\uC790\\uC2DD \\uB178\\uB4DC\\uAC00 \\uAC00\\uC9C4 \\uAC12\\uBCF4\\uB2E4 \\uD06C\\uAC70\\uB098 \\uAC19\\uB2E4. (\\uCD5C\\uB300 \\uD799\\uC758 \\uACBD\\uC6B0) <-- \\uBD80\\uBAA8 \\uB178\\uB4DC\\uC758 \\uAC12\\uC774 \\uC790\\uC2DD\\uB178\\uB4DC 2\\uAC1C \\uAC01\\uAC01\\uC758 \\uAC12\\uBCF4\\uB2E4 \\uD06C\\uAC70\\uB098 \\uAC19\\uC74C\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uCD5C\\uC18C \\uD799\\uC758 \\uACBD\\uC6B0\\uB294 \\uAC01 \\uB178\\uB4DC\\uC758 \\uAC12\\uC740 \\uD574\\uB2F9 \\uB178\\uB4DC\\uC758 \\uC790\\uC2DD \\uB178\\uB4DC\\uAC00 \\uAC00\\uC9C4 \\uAC12\\uBCF4\\uB2E4 \\uD06C\\uAC70\\uB098 \\uC791\\uC74C <-- \\uBD80\\uBAA8 \\uB178\\uB4DC\\uC758 \\uAC12\\uC774 \\uC790\\uC2DD\\uB178\\uB4DC 2\\uAC1C \\uAC01\\uAC01\\uC758 \\uAC12\\uBCF4\\uB2E4 \\uC791\\uAC70\\uB098 \\uAC19\\uC74C\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uC644\\uC804 \\uC774\\uC9C4 \\uD2B8\\uB9AC \\uD615\\uD0DC\\uB97C \\uAC00\\uC9D0 <-- \\uB178\\uB4DC\\uB2F9 \\uC790\\uC2DD\\uB178\\uB4DC\\uB294 \\uBB34\\uC870\\uAC74 2\\uAC1C\\uB9CC \\uAC00\\uC9C0\\uACE0 \\uC788\\uC744 \\uC218 \\uC788\\uC73C\\uBA70, \\uB370\\uC774\\uD130\\uB97C \\uB123\\uC744\\uB54C \\uAC00\\uC7A5 \\uC67C\\uCABD \\uC790\\uC2DD  \\uB178\\uB4DC\\uBD80\\uD130 \\uCC44\\uC6CC\\uB098\\uAC00\\uB294 \\uAC83\")))), mdx(\"h3\", null, \"\\uD799\\uACFC \\uC774\\uC9C4 \\uD0D0\\uC0C9 \\uD2B8\\uB9AC\\uC758 \\uACF5\\uD1B5\\uC810\\uACFC \\uCC28\\uC774\\uC810\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uACF5\\uD1B5\\uC810: \\uD799\\uACFC \\uC774\\uC9C4 \\uD0D0\\uC0C9 \\uD2B8\\uB9AC\\uB294 \\uBAA8\\uB450 \\uC774\\uC9C4 \\uD2B8\\uB9AC\\uC784\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uCC28\\uC774\\uC810: \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD799\\uC740 \\uAC01 \\uB178\\uB4DC\\uC758 \\uAC12\\uC774 \\uC790\\uC2DD \\uB178\\uB4DC\\uBCF4\\uB2E4 \\uD06C\\uAC70\\uB098 \\uAC19\\uC74C(Max Heap\\uC758 \\uACBD\\uC6B0)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774\\uC9C4 \\uD0D0\\uC0C9 \\uD2B8\\uB9AC\\uB294 \\uC67C\\uCABD \\uC790\\uC2DD \\uB178\\uB4DC\\uC758 \\uAC12\\uC774 \\uAC00\\uC7A5 \\uC791\\uACE0, \\uADF8 \\uB2E4\\uC74C \\uBD80\\uBAA8 \\uB178\\uB4DC, \\uADF8 \\uB2E4\\uC74C \\uC624\\uB978\\uCABD \\uC790\\uC2DD \\uB178\\uB4DC \\uAC12\\uC774 \\uAC00\\uC7A5 \\uD07C\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD799\\uC740 \\uC774\\uC9C4 \\uD0D0\\uC0C9 \\uD2B8\\uB9AC\\uC758 \\uC870\\uAC74\\uC778 \\uC790\\uC2DD \\uB178\\uB4DC\\uC5D0\\uC11C \\uC791\\uC740 \\uAC12\\uC740 \\uC67C\\uCABD, \\uD070 \\uAC12\\uC740 \\uC624\\uB978\\uCABD\\uC774\\uB77C\\uB294 \\uC870\\uAC74\\uC740 \\uC5C6\\uC74C <- \\uC774\\uC9C4\\uD0D0\\uC0C9\\uD2B8\\uB77C\\uC640 \\uB2E4\\uB974\\uAC8C \\uD799\\uC740 \\uC67C\\uCABD \\uC624\\uB978\\uCABD \\uC790\\uC2DD\\uB178\\uB4DC\\uC758 \\uAC12\\uC774 \\uC11C\\uB85C \\uD06C\\uACE0 \\uC791\\uC74C\\uC774 \\uC0C1\\uAD00\\uC774 \\uC5C6\\uACE0 \\uC624\\uC9C1 \\uBD80\\uBAA8 \\uB178\\uB4DC\\uBCF4\\uB2E4 \\uC791\\uAC70\\uB098 \\uAC19\\uC73C\\uBA74\\uB41C\\uB2E4(\\uCD5C\\uB300 \\uD799\\uC758 \\uACBD\\uC6B0)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD799\\uC758 \\uC67C\\uCABD \\uBC0F \\uC624\\uB978\\uCABD \\uC790\\uC2DD \\uB178\\uB4DC\\uC758 \\uAC12\\uC740 \\uC624\\uB978\\uCABD\\uC774 \\uD074 \\uC218\\uB3C4 \\uC788\\uACE0, \\uC67C\\uCABD\\uC774 \\uD074 \\uC218\\uB3C4 \\uC788\\uC74C\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"\\uC774\\uC9C4 \\uD0D0\\uC0C9 \\uD2B8\\uB9AC\"), \"\\uB294 \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"\\uD0D0\\uC0C9\\uC744 \\uC704\\uD55C \\uAD6C\\uC870\"), \", \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"\\uD799\"), \"\\uC740 \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"\\uCD5C\\uB300/\\uCD5C\\uC18C\\uAC12 \\uAC80\\uC0C9\\uC744 \\uC704\\uD55C \\uAD6C\\uC870\"), \" \\uC911 \\uD558\\uB098\\uB85C \\uC774\\uD574\\uD558\\uBA74 \\uB428\", mdx(\"br\", {\n    parentName: \"li\"\n  }), mdx(\"img\", _extends({\n    parentName: \"li\"\n  }, {\n    \"src\": \"https://www.fun-coding.org/00_Images/completebinarytree_bst.png\",\n    \"alt\": \"dsc\"\n  })), \"  \")), mdx(\"h3\", null, \"3. \\uD799 (Heap) \\uB3D9\\uC791\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB370\\uC774\\uD130\\uB97C \\uD799 \\uAD6C\\uC870\\uC5D0 \\uC0BD\\uC785, \\uC0AD\\uC81C\\uD558\\uB294 \\uACFC\\uC815\\uC744 \\uADF8\\uB9BC\\uC744 \\uD1B5\\uD574 \\uC120\\uBA85\\uD558\\uAC8C \\uC774\\uD574\\uD558\\uAE30\")), mdx(\"h3\", null, \"\\uD799\\uC5D0 \\uB370\\uC774\\uD130 \\uC0BD\\uC785\\uD558\\uAE30 - \\uAE30\\uBCF8 \\uB3D9\\uC791\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD799\\uC740 \\uC644\\uC804 \\uC774\\uC9C4 \\uD2B8\\uB9AC\\uC774\\uBBC0\\uB85C, \\uC0BD\\uC785\\uD560 \\uB178\\uB4DC\\uB294 \\uAE30\\uBCF8\\uC801\\uC73C\\uB85C \\uC67C\\uCABD \\uCD5C\\uD558\\uB2E8\\uBD80 \\uB178\\uB4DC\\uBD80\\uD130 \\uCC44\\uC6CC\\uC9C0\\uB294 \\uD615\\uD0DC\\uB85C \\uC0BD\\uC785\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB178\\uB4DC\\uAC00 insert\\uB420 \\uB54C \\uB8E8\\uD2B8 \\uB178\\uB4DC\\uC758 \\uC67C\\uCABD\\uC744 \\uCC44\\uC6B0\\uACE0 \\uADF8\\uB2E4\\uC74C \\uC624\\uB978\\uCABD\\uBD80\\uBD84\\uC744 \\uCC44\\uC6B4\\uB2E4\\n\", mdx(\"img\", _extends({\n    parentName: \"li\"\n  }, {\n    \"src\": \"https://www.fun-coding.org/00_Images/heap_ordinary.png\",\n    \"alt\": \"dscds\"\n  })), \"  \")), mdx(\"h3\", null, \"\\uD799\\uC5D0 \\uB370\\uC774\\uD130 \\uC0BD\\uC785\\uD558\\uAE30 - \\uC0BD\\uC785\\uD560 \\uB370\\uC774\\uD130\\uAC00 \\uD799\\uC758 \\uB370\\uC774\\uD130\\uBCF4\\uB2E4 \\uD074 \\uACBD\\uC6B0 (Max Heap \\uC758 \\uC608)\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBA3C\\uC800 \\uC0BD\\uC785\\uB41C \\uB370\\uC774\\uD130\\uB294 \\uC644\\uC804 \\uC774\\uC9C4 \\uD2B8\\uB9AC \\uAD6C\\uC870\\uC5D0 \\uB9DE\\uCD94\\uC5B4, \\uCD5C\\uD558\\uB2E8\\uBD80 \\uC67C\\uCABD \\uB178\\uB4DC\\uBD80\\uD130 \\uCC44\\uC6CC\\uC9D0 <-\\uC0BD\\uC785\\uD560 \\uB370\\uC774\\uD130\\uAC00 \\uD799\\uC758 \\uB370\\uC774\\uD130\\uBCF4\\uB2E4 \\uCEE4\\uB3C4 \\uC77C\\uB2E8 \\uC644\\uC804\\uC774\\uC9C4\\uD2B8\\uB9AC\\uC5D0 \\uADDC\\uCE59\\uC5D0 \\uB530\\uB77C \\uC67C\\uCABD\\uBD80\\uD130 \\uCC44\\uC6C0\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uCC44\\uC6CC\\uC9C4 \\uB178\\uB4DC \\uC704\\uCE58\\uC5D0\\uC11C, \\uBD80\\uBAA8 \\uB178\\uB4DC\\uBCF4\\uB2E4 \\uAC12\\uC774 \\uD074 \\uACBD\\uC6B0, \\uBD80\\uBAA8 \\uB178\\uB4DC\\uC640 \\uC704\\uCE58\\uB97C \\uBC14\\uAFD4\\uC8FC\\uB294 \\uC791\\uC5C5\\uC744 \\uBC18\\uBCF5\\uD568 (swap) <-\\uC0BD\\uC785\\uD55C \\uB370\\uC774\\uD130\\uAC00 \\uCC44\\uC6CC\\uC9C4 \\uC704\\uCE58\\uC5D0\\uC11C\\uBD80\\uD130 \\uBD80\\uBAA8 \\uB178\\uB4DC\\uC640 \\uBE44\\uAD50\\uD558\\uBA74\\uC11C swap\\uD55C\\uB2E4\\n\", mdx(\"img\", _extends({\n    parentName: \"li\"\n  }, {\n    \"src\": \"https://www.fun-coding.org/00_Images/heap_insert.png\",\n    \"alt\": \"sdcds\"\n  })))), mdx(\"h3\", null, \"\\uD799\\uC758 \\uB370\\uC774\\uD130 \\uC0AD\\uC81C\\uD558\\uAE30 (Max Heap \\uC758 \\uC608)\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBCF4\\uD1B5 \\uC0AD\\uC81C\\uB294 \\uCD5C\\uC0C1\\uB2E8 \\uB178\\uB4DC (root \\uB178\\uB4DC)\\uB97C \\uC0AD\\uC81C\\uD558\\uB294 \\uAC83\\uC774 \\uC77C\\uBC18\\uC801\\uC784 <-- \\uC608\\uB97C\\uB4E4\\uC5B4 20\\uC774 \\uB8E8\\uD2B8 \\uB178\\uB4DC\\uACE0 \\uADF8\\uBC11\\uC5D0 10, 8\\uC774\\uB77C\\uB294 \\uB178\\uB4DC\\uAC00 \\uC788\\uB294\\uB370 10\\uC774\\uB780 \\uB178\\uB4DC\\uB97C \\uD2B9\\uC815\\uD558\\uAC8C \\uC9C0\\uC6B0\\uB294 \\uAC83\\uC774\\uB77C\\uB2C8\\uB77C \\uBB34\\uC870\\uAC74 \\uCD5C\\uC0C1\\uB2E8(root) \\uB178\\uB4DC\\uBD80\\uD130 \\uC0AD\\uC81C\\uAC00 \\uB418\\uB294 \\uAC83\\uC774 \\uD799 \\uB370\\uC774\\uD130\\uC758 \\uC6D0\\uCE59\\uC774\\uB2E4\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD799\\uC758 \\uC6A9\\uB3C4\\uB294 \\uCD5C\\uB300\\uAC12 \\uB610\\uB294 \\uCD5C\\uC18C\\uAC12\\uC744 root \\uB178\\uB4DC\\uC5D0 \\uB193\\uC544\\uC11C, \\uCD5C\\uB300\\uAC12\\uACFC \\uCD5C\\uC18C\\uAC12\\uC744 \\uBC14\\uB85C \\uAEBC\\uB0B4 \\uC4F8 \\uC218 \\uC788\\uB3C4\\uB85D \\uD558\\uB294 \\uAC83\\uC784 <-- \\uC774\\uB7EC\\uD55C \\uC774\\uC720\\uB85C \\uB8E8\\uD2B8\\uB178\\uB4DC\\uAC00 \\uC911\\uC2EC\\uC774\\uB418\\uC5B4 \\uC0AD\\uC81C\\uAC00 \\uB418\\uB294 \\uAC83\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC0C1\\uB2E8\\uC758 \\uB370\\uC774\\uD130 \\uC0AD\\uC81C\\uC2DC, \\uAC00\\uC7A5 \\uCD5C\\uD558\\uB2E8\\uBD80 \\uC67C\\uCABD\\uC5D0 \\uC704\\uCE58\\uD55C \\uB178\\uB4DC (\\uC77C\\uBC18\\uC801\\uC73C\\uB85C \\uAC00\\uC7A5 \\uB9C8\\uC9C0\\uB9C9\\uC5D0 \\uCD94\\uAC00\\uD55C \\uB178\\uB4DC) \\uB97C root \\uB178\\uB4DC\\uB85C \\uC774\\uB3D9 <-- \\uB9E8\\uB9C8\\uC9C0\\uB9C9\\uC5D0 \\uC0BD\\uC785\\uD55C \\uB370\\uC774\\uD130\\uB97C \\uB8E8\\uD2B8 \\uB178\\uB4DC\\uB85C \\uC62C\\uB9B0\\uB2E4\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"root \\uB178\\uB4DC\\uC758 \\uAC12\\uC774 child node \\uBCF4\\uB2E4 \\uC791\\uC744 \\uACBD\\uC6B0, root \\uB178\\uB4DC\\uC758 child node \\uC911 \\uAC00\\uC7A5 \\uD070 \\uAC12\\uC744 \\uAC00\\uC9C4 \\uB178\\uB4DC\\uC640 root \\uB178\\uB4DC \\uC704\\uCE58\\uB97C \\uBC14\\uAFD4\\uC8FC\\uB294 \\uC791\\uC5C5\\uC744 \\uBC18\\uBCF5\\uD568 (swap)\", mdx(\"br\", {\n    parentName: \"li\"\n  }), \"root \\uB178\\uB4DC\\uC758 \\uAC12\\uC774 \\uC790\\uC2DD\\uB178\\uB4DC\\uBCF4\\uB2E4 \\uC791\\uC740\\uACBD\\uC6B0 swap\\uD558\\uACE0\\uB97C \\uBC18\\uBCF5\\uD558\\uC5EC root\\uAC12\\uC774 \\uCD5C\\uB300\\uAC00\\uB418\\uACE0 \\uB9E8 \\uB9C8\\uC9C0\\uB9C9 \\uB178\\uB4DC\\uAC00 \\uCD5C\\uC18C\\uAC12\\uC774 \\uB420\\uB54C\\uAE4C\\uC9C0 swap\\uD574\\uC900\\uB2E4\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://www.fun-coding.org/00_Images/heap_remove.png\",\n    \"alt\": \"sdc\"\n  }))), mdx(\"h3\", null, \"4. \\uD799 \\uAD6C\\uD604\"), mdx(\"h3\", null, \"\\uD799\\uACFC \\uBC30\\uC5F4\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC77C\\uBC18\\uC801\\uC73C\\uB85C \\uD799 \\uAD6C\\uD604\\uC2DC \\uBC30\\uC5F4 \\uC790\\uB8CC\\uAD6C\\uC870\\uB97C \\uD65C\\uC6A9\\uD568\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBC30\\uC5F4\\uC740 \\uC778\\uB371\\uC2A4\\uAC00 0\\uBC88\\uBD80\\uD130 \\uC2DC\\uC791\\uD558\\uC9C0\\uB9CC, \\uD799 \\uAD6C\\uD604\\uC758 \\uD3B8\\uC758\\uB97C \\uC704\\uD574, root \\uB178\\uB4DC \\uC778\\uB371\\uC2A4 \\uBC88\\uD638\\uB97C 1\\uB85C \\uC9C0\\uC815\\uD558\\uBA74, \\uAD6C\\uD604\\uC774 \\uC880\\uB354 \\uC218\\uC6D4\\uD568 <- \\uAC04\\uB2E8\\uD558\\uAC8C \\uB9D0\\uD558\\uBA74 \\uD799 \\uAD6C\\uD604\\uC2DC \\uB8E8\\uD2B8\\uB178\\uB4DC\\uC758 \\uC778\\uB371\\uC2A4\\uBC88\\uD638\\uB97C 1\\uB85C \\uC9C0\\uC815\\uD55C\\uB2E4.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBD80\\uBAA8 \\uB178\\uB4DC \\uC778\\uB371\\uC2A4 \\uBC88\\uD638 (parent node's index) = \\uC790\\uC2DD \\uB178\\uB4DC \\uC778\\uB371\\uC2A4 \\uBC88\\uD638 (child node's index) // 2\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC67C\\uCABD \\uC790\\uC2DD \\uB178\\uB4DC \\uC778\\uB371\\uC2A4 \\uBC88\\uD638 (left child node's index) = \\uBD80\\uBAA8 \\uB178\\uB4DC \\uC778\\uB371\\uC2A4 \\uBC88\\uD638 (parent node's index) * 2\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC624\\uB978\\uCABD \\uC790\\uC2DD \\uB178\\uB4DC \\uC778\\uB371\\uC2A4 \\uBC88\\uD638 (right child node's index) = \\uBD80\\uBAA8 \\uB178\\uB4DC \\uC778\\uB371\\uC2A4 \\uBC88\\uD638 (parent node's index) * 2 + 1\")))), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://www.fun-coding.org/00_Images/heap_array.png\",\n    \"alt\": \"sdc\"\n  })), \"  \"), mdx(\"h1\", null, \"\\uC6081 - 10 \\uB178\\uB4DC\\uC758 \\uBD80\\uBAA8 \\uB178\\uB4DC \\uC778\\uB371\\uC2A4\"), mdx(\"p\", null, \"2 // 2  <== \\uD2B9\\uC815\\uB178\\uB4DC\\uC758 \\uBD80\\uBAA8\\uB178\\uB4DC \\uC778\\uB371\\uC2A4\\uB97C \\uAD6C\\uD558\\uB824\\uBA74 2\\uB85C \\uB098\\uB208 \\uBAAB\\uC744 \\uAD6C\\uD558\\uBA74\\uB41C\\uB2E4, \\uC608\\uB97C\\uB4E4\\uC5B4 5\\uBC88\\uB178\\uB4DC\\uC758 \\uBD80\\uBAA8\\uC778\\uB371\\uC2A4\\uB294 5 // 2\\uB85C\\uD574\\uC11C 2\\uBC88 \\uB178\\uB4DC\\uAC00 \\uB418\\uB294 \\uAC83\\uC774\\uB2E4\\n1\"), mdx(\"h1\", null, \"\\uC6081 - 15 \\uB178\\uB4DC\\uC758 \\uC67C\\uCABD \\uC790\\uC2DD \\uB178\\uB4DC \\uC778\\uB371\\uC2A4 \\uBC88\\uD638\"), mdx(\"p\", null, \"1 * 2   <== \\uD2B9\\uC815 \\uB178\\uB4DC\\uC758 \\uC67C\\uCABD \\uB178\\uB4DC\\uC758 \\uC778\\uB371\\uC2A4\\uB97C\\n2\"), mdx(\"h1\", null, \"\\uC6081 - 15 \\uB178\\uB4DC\\uC758 \\uC624\\uB978\\uCABD \\uC790\\uC2DD \\uB178\\uB4DC \\uC778\\uB371\\uC2A4 \\uBC88\\uD638\"), mdx(\"p\", null, \"2 * 2 + 1\\n5\"), mdx(\"h3\", null, \"\\uD799\\uC5D0 \\uB370\\uC774\\uD130 \\uC0BD\\uC785 \\uAD6C\\uD604 (Max Heap \\uC608)\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD799 \\uD074\\uB798\\uC2A4 \\uAD6C\\uD6041 \")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"class Heap:\\n    def __init__(self, data):\\n        # \\uD799\\uC744 \\uAD6C\\uD604\\uD560 \\uB54C\\uB294 \\uBC30\\uC5F4\\uB85C \\uAD6C\\uD604\\uD558\\uB294\\uB370 \\uC778\\uB371\\uC2A4 0\\uC740 \\uC81C\\uC678\\uC2DC\\uD0A4\\uAE30 \\uC704\\uD574 None\\uC744 \\uB123\\uC5B4\\uC8FC\\uACE0 \\uC2DC\\uC791\\uD55C\\uB2E4\\n        self.heap_array = list()\\n        self.heap_array.append(None)\\n        self.heap_array.append(data)\\n\\nheap = Heap(1)\\nheap.heap_array\\n\\n[None, 1]\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD799 \\uD074\\uB798\\uC2A4 \\uAD6C\\uD6042 - insert1\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC778\\uB371\\uC2A4 \\uBC88\\uD638\\uB294 1\\uBC88\\uBD80\\uD130 \\uC2DC\\uC791\\uD558\\uB3C4\\uB85D \\uBCC0\\uACBD\")))), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://www.fun-coding.org/00_Images/heap_ordinary.png\",\n    \"alt\": \"sdvcds\"\n  }))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"class Heap:\\n    def __init__(self, data):\\n        self.heap_array = list()\\n        self.heap_array.append(None)\\n        self.heap_array.append(data)\\n        \\n    def insert(self, data):\\n        if len(self.heap_array) == 0:\\n            self.heap_array.append(None)\\n            self.heap_array.append(data)\\n            return True\\n        \\n        self.heap_array.append(data)\\n        return True           \\n\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD799 \\uD074\\uB798\\uC2A4 \\uAD6C\\uD6043 - insert2\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC0BD\\uC785\\uD55C \\uB178\\uB4DC\\uAC00 \\uBD80\\uBAA8 \\uB178\\uB4DC\\uC758 \\uAC12\\uBCF4\\uB2E4 \\uD074 \\uACBD\\uC6B0, \\uBD80\\uBAA8 \\uB178\\uB4DC\\uC640 \\uC0BD\\uC785\\uD55C \\uB178\\uB4DC \\uC704\\uCE58\\uB97C \\uBC14\\uAFC8\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC0BD\\uC785\\uD55C \\uB178\\uB4DC\\uAC00 \\uB8E8\\uD2B8 \\uB178\\uB4DC\\uAC00 \\uB418\\uAC70\\uB098, \\uBD80\\uBAA8 \\uB178\\uB4DC\\uBCF4\\uB2E4 \\uAC12\\uC774 \\uC791\\uAC70\\uB098 \\uAC19\\uC744 \\uACBD\\uC6B0\\uAE4C\\uC9C0 \\uBC18\\uBCF5\")))), mdx(\"hr\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD2B9\\uC815 \\uB178\\uB4DC\\uC758 \\uAD00\\uB828 \\uB178\\uB4DC \\uC704\\uCE58 \\uC54C\\uC544\\uB0B4\\uAE30\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBD80\\uBAA8 \\uB178\\uB4DC \\uC778\\uB371\\uC2A4 \\uBC88\\uD638 (parent node's index) = \\uC790\\uC2DD \\uB178\\uB4DC \\uC778\\uB371\\uC2A4 \\uBC88\\uD638 (child node's index) // 2\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC67C\\uCABD \\uC790\\uC2DD \\uB178\\uB4DC \\uC778\\uB371\\uC2A4 \\uBC88\\uD638 (left child node's index) = \\uBD80\\uBAA8 \\uB178\\uB4DC \\uC778\\uB371\\uC2A4 \\uBC88\\uD638 (parent node's index) * 2\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC624\\uB978\\uCABD \\uC790\\uC2DD \\uB178\\uB4DC \\uC778\\uB371\\uC2A4 \\uBC88\\uD638 (right child node's index) = \\uBD80\\uBAA8 \\uB178\\uB4DC \\uC778\\uB371\\uC2A4 \\uBC88\\uD638 (parent node's index) * 2 + 1\")))), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://www.fun-coding.org/00_Images/heap_insert.png\",\n    \"alt\": \"sdcs\"\n  }))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"heap = Heap(15)\\nheap.insert(10)\\nheap.insert(8)\\nheap.insert(5)\\nheap.insert(4)\\nheap.insert(20)\\nheap.heap_array\\n\\n[None, 20, 10, 15, 5, 4, 8]\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"\\nclass Heap:\\n    def __init__(self, data):\\n        # \\uD799\\uC744 \\uAD6C\\uD604\\uD560 \\uB54C\\uB294 \\uBC30\\uC5F4\\uB85C \\uAD6C\\uD604\\uD558\\uB294\\uB370 \\uC778\\uB371\\uC2A4 0\\uC740 \\uC81C\\uC678\\uC2DC\\uD0A4\\uAE30 \\uC704\\uD574 None\\uC744 \\uB123\\uC5B4\\uC8FC\\uACE0 \\uC2DC\\uC791\\uD55C\\uB2E4\\n        self.heap_array = list()\\n        self.heap_array.append(None)\\n        self.heap_array.append(data)\\n        \\n    # \\uC0BD\\uC785\\uB41C \\uB178\\uB4DC\\uAC00 \\uC0C1\\uC704\\uBCF4\\uB4DC\\uBCF4\\uB2E4 \\uAC12\\uC774 \\uCEE4\\uC11C \\uBC14\\uAFD4\\uC57C\\uB418\\uB294\\uC9C0 \\uD310\\uB2E8\\uD558\\uB294 \\uBA54\\uC11C\\uB4DC\\n    def move_up(self, inserted_idx):\\n\\n        # inserted_idx\\uAC00 1\\uBCF4\\uB2E4 \\uC791\\uC73C\\uBA74 \\uB8E8\\uD2B8\\uB178\\uB4DC\\uC774\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uD310\\uB2E8 \\uD560\\uD544\\uC694\\uC5C6\\uC774 false\\uC774\\uB2E4\\n        if inserted_idx <= 1:\\n            return False\\n        \\n        # \\uBD80\\uBAA8\\uB178\\uB4DC \\uC778\\uB371\\uC2A4\\uB97C \\uAD6C\\uD558\\uACE0\\n        parent_idx = inserted_idx // 2\\n        # \\uC785\\uB825\\uB178\\uB4DC\\uAC00 \\uBD80\\uBAA8\\uB178\\uB4DC\\uBCF4\\uB2E4 \\uD06C\\uB2E4\\uBA74 True\\uB97C \\uBC18\\uD658\\uD558\\uC5EC \\uBC14\\uAFD4\\uC90C\\n        if self.heap_array[inserted_idx] > self.heap_array[parent_idx]:\\n            return True\\n        else:\\n            return False\\n        \\n    def insert(self, data):\\n        if len(self.heap_array) == 0:\\n            self.heap_array.append(None)\\n            self.heap_array.append(data)\\n            return True\\n        \\n        self.heap_array.append(data)\\n        \\n        # \\uB4E4\\uC5B4\\uAC00\\uB294 \\uAC12\\uC774 \\uBC30\\uC5F4\\uC758 \\uB9E8\\uB05D\\uC5D0 \\uB4E4\\uC5B4\\uAC00\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uBC30\\uC5F4\\uC758 \\uAE38\\uC774\\uC5D0 -1\\uC744 \\uD558\\uBA74 insert\\uB420\\uB54C \\uB4E4\\uC5B4\\uAC04 \\uAC12\\uC758 \\uC778\\uB371\\uC2A4\\uB97C \\uC5BB\\uC744 \\uC218 \\uC788\\uB2E4\\n        # \\uC5EC\\uAE30\\uC11C\\uBD80\\uD130\\uB294 \\uD799 \\uC790\\uB8CC\\uAD6C\\uC870\\uC5D0\\uC11C \\uC785\\uB825\\uB41C \\uAC12\\uC774 \\uBD80\\uBAA8\\uB178\\uB4DC\\uBCF4\\uB2E4 \\uD070 \\uACBD\\uC6B0\\uC5D0 \\uC2A4\\uC704\\uCE6D\\uD558\\uAE30 \\uC704\\uD55C \\uC54C\\uACE0\\uB9AC\\uC998\\uC774\\uB2E4\\n        inserted_idx = len(self.heap_array) - 1 \\n    \\n        # move_up \\uBA54\\uC11C\\uB4DC\\uB85C \\uC785\\uB825\\uB178\\uB4DC\\uC640 \\uBD80\\uBAA8\\uB178\\uB4DC\\uC758 \\uD06C\\uAE30 \\uCC28\\uC774\\uB97C \\uBE44\\uAD50\\uD574\\uC11C \\uB9AC\\uD134\\uD574\\uC900\\uB2E4\\n        while self.move_up(inserted_idx):\\n            # \\uC2A4\\uC651\\uD558\\uAE30 \\uC704\\uD574 \\uBD80\\uBAA8 \\uB178\\uB4DC\\uC758 \\uC778\\uB371\\uC2A4\\uB97C \\uC5BB\\uC5B4\\uC57C\\uD55C\\uB2E4 \\uC790\\uC2DD\\uB178\\uB4DC\\uC758 \\uC778\\uB371\\uC2A4\\uC758 \\uBAAB\\uC744 \\uAD6C\\uD558\\uBA74\\uB41C\\uB2E4\\n            parent_idx = inserted_idx // 2\\n            # \\uC544\\uB798\\uC758 \\uBB38\\uBC95\\uC740 \\uC2A4\\uC651\\uC744 \\uD45C\\uD604\\uD55C \\uAC83\\uC73C\\uB85C ,\\uCF64\\uB9C8\\uB97C \\uAE30\\uC900\\uC73C\\uB85C 1,2 = 2,1 \\uC21C\\uC11C\\uB85C\\uD558\\uBA74 \\uC55E\\uC5D0 1\\uC774 2\\uB85C \\uBC14\\uB00C\\uACE0 \\uB4A4\\uC5D0 2\\uAC00 \\uB4A4\\uC5D0 1\\uB85C \\uBC14\\uB00C\\uB294 \\uAD6C\\uC870\\uC774\\uB2E4\\n            self.heap_array[inserted_idx],self.heap_array[parent_idx] = self.heap_array[parent_idx],self.heap_array[inserted_idx]\\n            # \\uC6D0\\uB798 \\uC0BD\\uC785\\uB41C \\uB178\\uB4DC\\uC758 \\uC778\\uB371\\uC2A4\\uAC00 \\uBD80\\uBAA8\\uB178\\uB4DC\\uC758 \\uC778\\uB371\\uC2A4\\uB85C \\uBC14\\uB00C\\uC5C8\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uC544\\uB798\\uC640 \\uAC19\\uC774 \\uBD80\\uBAA8\\uB178\\uB4DC\\uC758 \\uC778\\uB371\\uC2A4\\uB97C \\uC785\\uB825 \\uC778\\uB371\\uC2A4\\uC5D0 \\uB123\\uC5B4\\uC8FC\\uACE0\\n            inserted_idx = parent_idx\\n        \\n        return True\\n            \\n        \\nheap = Heap(15)\\n\\nheap.insert(10)\\nheap.insert(8)\\nheap.insert(5)\\nheap.insert(4)\\nheap.insert(20)\\n\\nprint(heap.heap_array)\\n\\n# 20\\uC774 \\uB098\\uC911\\uC5D0 \\uC785\\uB825\\uB418\\uC5C8\\uC74C\\uC5D0\\uB3C4 \\uC815\\uC0C1\\uC801\\uC73C\\uB85C \\uD799 \\uC790\\uB8CC\\uAD6C\\uC870 \\uD615\\uD0DC\\uB85C \\uB4E4\\uC5B4\\uC628\\uAC78 \\uD655\\uC778\\uD560 \\uC218 \\uC788\\uB2E4\\n[None, 20, 10, 15, 5, 4, 8]\\n\")), mdx(\"h3\", null, \"\\uD799\\uC5D0 \\uB370\\uC774\\uD130 \\uC0AD\\uC81C \\uAD6C\\uD604 (Max Heap \\uC608)\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD799 \\uD074\\uB798\\uC2A4 \\uAD6C\\uD6044 - delete1\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBCF4\\uD1B5 \\uC0AD\\uC81C\\uB294 \\uCD5C\\uC0C1\\uB2E8 \\uB178\\uB4DC (root \\uB178\\uB4DC)\\uB97C \\uC0AD\\uC81C\\uD558\\uB294 \\uAC83\\uC774 \\uC77C\\uBC18\\uC801\\uC784\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD799\\uC758 \\uC6A9\\uB3C4\\uB294 \\uCD5C\\uB300\\uAC12 \\uB610\\uB294 \\uCD5C\\uC18C\\uAC12\\uC744 root \\uB178\\uB4DC\\uC5D0 \\uB193\\uC544\\uC11C, \\uCD5C\\uB300\\uAC12\\uACFC \\uCD5C\\uC18C\\uAC12\\uC744 \\uBC14\\uB85C \\uAEBC\\uB0B4 \\uC4F8 \\uC218 \\uC788\\uB3C4\\uB85D \\uD558\\uB294 \\uAC83\\uC784\")))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"class Heap:\\n    def __init__(self, data):\\n        self.heap_array = list()\\n        self.heap_array.append(None)\\n        self.heap_array.append(data)\\n    \\n    def pop(self):\\n        if len(self.heap_array) <= 1:\\n            return None\\n        \\n        returned_data = self.heap_array[1]\\n        return returned_data\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD799 \\uD074\\uB798\\uC2A4 \\uAD6C\\uD6044 - delete2\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC0C1\\uB2E8\\uC758 \\uB370\\uC774\\uD130 \\uC0AD\\uC81C\\uC2DC, \\uAC00\\uC7A5 \\uCD5C\\uD558\\uB2E8\\uBD80 \\uC67C\\uCABD\\uC5D0 \\uC704\\uCE58\\uD55C \\uB178\\uB4DC (\\uC77C\\uBC18\\uC801\\uC73C\\uB85C \\uAC00\\uC7A5 \\uB9C8\\uC9C0\\uB9C9\\uC5D0 \\uCD94\\uAC00\\uD55C \\uB178\\uB4DC) \\uB97C root \\uB178\\uB4DC\\uB85C \\uC774\\uB3D9\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"root \\uB178\\uB4DC\\uC758 \\uAC12\\uC774 child node \\uBCF4\\uB2E4 \\uC791\\uC744 \\uACBD\\uC6B0, root \\uB178\\uB4DC\\uC758 child node \\uC911 \\uAC00\\uC7A5 \\uD070 \\uAC12\\uC744 \\uAC00\\uC9C4 \\uB178\\uB4DC\\uC640 root \\uB178\\uB4DC \\uC704\\uCE58\\uB97C \\uBC14\\uAFD4\\uC8FC\\uB294 \\uC791\\uC5C5\\uC744 \\uBC18\\uBCF5\\uD568 (swap)\")))), mdx(\"hr\", null), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD2B9\\uC815 \\uB178\\uB4DC\\uC758 \\uAD00\\uB828 \\uB178\\uB4DC \\uC704\\uCE58 \\uC54C\\uC544\\uB0B4\\uAE30\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBD80\\uBAA8 \\uB178\\uB4DC \\uC778\\uB371\\uC2A4 \\uBC88\\uD638 (parent node's index) = \\uC790\\uC2DD \\uB178\\uB4DC \\uC778\\uB371\\uC2A4 \\uBC88\\uD638 (child node's index) // 2\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC67C\\uCABD \\uC790\\uC2DD \\uB178\\uB4DC \\uC778\\uB371\\uC2A4 \\uBC88\\uD638 (left child node's index) = \\uBD80\\uBAA8 \\uB178\\uB4DC \\uC778\\uB371\\uC2A4 \\uBC88\\uD638 (parent node's index) * 2\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC624\\uB978\\uCABD \\uC790\\uC2DD \\uB178\\uB4DC \\uC778\\uB371\\uC2A4 \\uBC88\\uD638 (right child node's index) = \\uBD80\\uBAA8 \\uB178\\uB4DC \\uC778\\uB371\\uC2A4 \\uBC88\\uD638 (parent node's index) * 2 + 1\")))), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://www.fun-coding.org/00_Images/heap_remove.png\",\n    \"alt\": \"dscds\"\n  }))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"heap = Heap(15)\\nheap.insert(10)\\nheap.insert(8)\\nheap.insert(5)\\nheap.insert(4)\\nheap.insert(20)\\nheap.heap_array\\n\\n[None, 20, 10, 15, 5, 4, 8]\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"heap.pop()\\n20\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"heap.heap_array\\n[None, 15, 10, 8, 5, 4]\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"class Heap:\\n    def __init__(self, data):\\n        self.heap_array = list()\\n        self.heap_array.append(None)\\n        self.heap_array.append(data)\\n    \\n    # \\uD604\\uC7AC \\uB178\\uB4DC\\uC640 \\uC790\\uC2DD\\uB178\\uB4DC\\uB97C \\uBE44\\uAD50\\uD558\\uC5EC \\uB0B4\\uB824\\uC57C\\uB420\\uC9C0 \\uC544\\uB2D0\\uC9C0 \\uD310\\uB2E8\\uD558\\uB294 \\uBA54\\uC11C\\uB4DC\\n    def move_down(self ,poped_idx):\\n        # \\uC67C\\uCABD\\uC790\\uC2DD\\uB178\\uB4DC\\uB294 \\uD604\\uC7AC \\uB178\\uB4DC * 2\\n        left_child_poped_idx = poped_idx * 2\\n        right_child_poped_idx = poped_idx * 2 + 1\\n        \\n        # \\uC67C\\uCABD \\uC790\\uC2DD\\uB178\\uB4DC\\uB3C4 \\uC5C6\\uC744 \\uB54C(\\uC774\\uC9C4\\uD2B8\\uB9AC\\uC758 \\uC790\\uC2DD\\uB178\\uB4DC \\uB458\\uB2E4 \\uC5C6\\uC744\\uB54C)\\n        # left_child_poped_idx\\uC758 \\uAC12\\uC774 \\uBC30\\uC5F4\\uC758 \\uAE38\\uC774\\uBCF4\\uB2E4 \\uD06C\\uBA74 \\uC5C6\\uB294 \\uAC12\\uC744 \\uAC00\\uB9AC\\uD0A4\\uACE0 \\uC788\\uB294\\uAC83 \\n        if left_child_poped_idx >= len(self.heap_array):\\n            # \\uBC14\\uAFC0 \\uC218 \\uC5C6\\uB2E4\\n            return False\\n        # \\uC624\\uB978\\uCABD \\uC790\\uC2DD\\uB178\\uB4DC\\uB9CC \\uC5C6\\uC744 \\uB54C\\n        elif right_child_poped_idx >= len(self.heap_array):\\n            # \\uC67C\\uCABD \\uC790\\uC2DD\\uB178\\uB4DC\\uAC00 \\uD604\\uC7AC \\uB178\\uB4DC\\uBCF4\\uB2E4 \\uD06C\\uB2E4\\uBA74 \\uC2A4\\uC704\\uCE6D \\n            if self.heap_array[poped_idx] < self.heap_array[left_child_poped_idx]:\\n                return True\\n            else:\\n                return False\\n        \\n        # \\uC67C\\uCABD \\uC624\\uB978\\uCABD \\uB178\\uB4DC \\uC804\\uBD80 \\uC874\\uC7AC\\uD560 \\uB54C\\n        # 1. \\uC790\\uC2DD\\uB178\\uB4DC\\uB07C\\uB9AC \\uBE44\\uAD50\\n        else:\\n            # \\uC67C\\uCABD \\uC790\\uC2DD\\uB178\\uB4DC\\uAC00 \\uC624\\uB978\\uCABD \\uBCF4\\uB2E4 \\uD074\\uB54C\\n            if self.heap_array[left_child_poped_idx] > self.heap_array[right_child_poped_idx]:\\n                # \\uD604\\uC7AC \\uB178\\uB4DC\\uBCF4\\uB2E4 \\uC67C\\uCABD \\uB178\\uB4DC\\uC758 \\uAC12\\uC774 \\uD06C\\uB2E4\\uBA74 \\uC2A4\\uC704\\uCE6D\\n                if self.heap_array[poped_idx] < self.heap_array[left_child_poped_idx]:\\n                    return True\\n                else:\\n                    return False\\n            else:\\n                # \\uD604\\uC7AC \\uB178\\uB4DC\\uBCF4\\uB2E4 \\uC624\\uB978\\uCABD \\uB178\\uB4DC\\uC758 \\uAC12\\uC774 \\uD06C\\uB2E4\\uBA74 \\uC2A4\\uC704\\uCE6D\\n                if self.heap_array[poped_idx] < self.heap_array[right_child_poped_idx]:\\n                    return True\\n                else:\\n                    return False\\n    \\n    # \\uD799\\uC5D0\\uC11C\\uB294 \\uB178\\uB4DC\\uB97C \\uC0AD\\uC81C\\uD560\\uB54C \\uB8E8\\uD2B8\\uAC12\\uB9CC \\uBE7C\\uB294 \\uAD6C\\uC870\\uC774\\uAE30 \\uB54C\\uBB38\\uC5D0 pop\\uC73C\\uB85C \\uBE7C\\uC624\\uB294 \\uAC83\\uACFC \\uAC19\\uB2E4\\n    def pop(self):\\n        if len(self.heap_array) <= 1:\\n            return None\\n        \\n        # 0\\uBC88 \\uC778\\uB371\\uC2A4\\uB294 \\uC81C\\uC678\\uD558\\uACE0 1\\uBC88 \\uC778\\uB371\\uC2A4\\uAC00 \\uB8E8\\uD2B8 \\uB370\\uC774\\uD130\\uC774\\uAE30 \\uB54C\\uBB38\\uC5D0\\n        returned_data = self.heap_array[1]\\n        # list\\uC758 -1\\uBC88 \\uC778\\uB371\\uC2A4\\uB294 \\uD56D\\uC0C1 \\uBC30\\uC5F4\\uC758 \\uB9E8\\uB05D\\uC744 \\uAC00\\uB9AC\\uD0A8\\uB2E4. \\n        # \\uD799\\uC740 \\uB8E8\\uD2B8 \\uB370\\uC774\\uD130\\uB97C \\uC81C\\uAC70\\uD55C\\uD6C4 \\uB9E8\\uB05D\\uC5D0 \\uC788\\uB294 \\uAC12\\uC744 \\uB8E8\\uD2B8\\uC704\\uCE58\\uB85C \\uC62C\\uB9B0\\uB2E4\\n        self.heap_array[1] = self.heap_array[-1]\\n        # \\uB9E8\\uB05D\\uC758 \\uBC30\\uC5F4\\uC744 \\uB8E8\\uD2B8\\uB85C \\uC62C\\uB824\\uC92C\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uADF8 \\uACF5\\uAC04\\uC740 \\uBE44\\uC5B4\\uC788\\uB294 \\uAC83\\uC774\\uACE0, \\uADF8 \\uACF5\\uAC04\\uC740 \\uC0AD\\uC81C\\uD574\\uC900\\uB2E4\\n        del self.heap_array[-1]\\n        \\n        # \\uB8E8\\uD2B8\\uC5D0 \\uB9E8\\uB05D\\uC758 \\uAC12\\uC774 \\uC62C\\uB77C\\uC640\\uC788\\uACE0 \\uADF8 \\uAC12\\uC744 \\uC790\\uC2DD\\uB178\\uB4DC\\uC640 \\uBE44\\uAD50\\uD558\\uAE30\\uC704\\uD574 \\uB8E8\\uD2B8 \\uC778\\uB371\\uC2A4\\uB97C \\uB123\\uB294\\uB2E4\\n        poped_idx = 1\\n         \\n        while self.move_down(poped_idx):\\n            # \\uC67C\\uCABD\\uC790\\uC2DD\\uB178\\uB4DC\\uB294 \\uD604\\uC7AC \\uB178\\uB4DC * 2\\n            left_child_poped_idx = poped_idx * 2\\n            right_child_poped_idx = poped_idx * 2 + 1\\n\\n            if right_child_poped_idx > len(self.heap_array):\\n                # \\uC67C\\uCABD \\uC790\\uC2DD\\uB178\\uB4DC\\uAC00 \\uD604\\uC7AC \\uB178\\uB4DC\\uBCF4\\uB2E4 \\uD06C\\uB2E4\\uBA74 \\uC2A4\\uC704\\uCE6D \\n                if self.heap_array[poped_idx] < self.heap_array[left_child_poped_idx]:\\n                    self.heap_array[poped_idx],self.heap_array[left_child_poped_idx] = self.heap_array[left_child_poped_idx],self.heap_array[poped_idx]\\n                    # \\uC2A4\\uC704\\uCE6D\\uD574\\uC900 \\uB2E4\\uC74C\\uC5D0 poped_idx\\uB97C \\uC67C\\uCABD \\uC790\\uC2DD\\uB178\\uB4DC\\uC758 \\uC778\\uB371\\uC2A4\\uB85C \\uAC31\\uC2E0\\uD574\\uC900\\uB2E4\\n                    poped_idx = left_child_poped_idx\\n\\n            # \\uC67C\\uCABD \\uC624\\uB978\\uCABD \\uB178\\uB4DC \\uC804\\uBD80 \\uC874\\uC7AC\\uD560 \\uB54C\\n            # 1. \\uC790\\uC2DD\\uB178\\uB4DC\\uB07C\\uB9AC \\uBE44\\uAD50\\n            else:\\n                # \\uC67C\\uCABD \\uC790\\uC2DD\\uB178\\uB4DC\\uAC00 \\uC624\\uB978\\uCABD \\uBCF4\\uB2E4 \\uD074\\uB54C\\n                if self.heap_array[left_child_poped_idx] > self.heap_array[right_child_poped_idx]:\\n                    # \\uD604\\uC7AC \\uB178\\uB4DC\\uBCF4\\uB2E4 \\uC67C\\uCABD \\uB178\\uB4DC\\uC758 \\uAC12\\uC774 \\uD06C\\uB2E4\\uBA74 \\uC2A4\\uC704\\uCE6D\\n                    if self.heap_array[poped_idx] < self.heap_array[left_child_poped_idx]:\\n                        self.heap_array[poped_idx],self.heap_array[left_child_poped_idx] = self.heap_array[left_child_poped_idx],self.heap_array[poped_idx]\\n                        # \\uC2A4\\uC704\\uCE6D\\uD574\\uC900 \\uB2E4\\uC74C\\uC5D0 poped_idx\\uB97C \\uC67C\\uCABD \\uC790\\uC2DD\\uB178\\uB4DC\\uC758 \\uC778\\uB371\\uC2A4\\uB85C \\uAC31\\uC2E0\\uD574\\uC900\\uB2E4\\n                        poped_idx = left_child_poped_idx\\n                else:\\n                    # \\uD604\\uC7AC \\uB178\\uB4DC\\uBCF4\\uB2E4 \\uC624\\uB978\\uCABD \\uB178\\uB4DC\\uC758 \\uAC12\\uC774 \\uD06C\\uB2E4\\uBA74 \\uC2A4\\uC704\\uCE6D\\n                    if self.heap_array[poped_idx] < self.heap_array[right_child_poped_idx]:\\n                        self.heap_array[poped_idx],self.heap_array[right_child_poped_idx] = self.heap_array[right_child_poped_idx],self.heap_array[poped_idx]\\n                        # \\uC2A4\\uC704\\uCE6D\\uD574\\uC900 \\uB2E4\\uC74C\\uC5D0 poped_idx\\uB97C \\uC624\\uB978\\uCABD \\uC790\\uC2DD\\uB178\\uB4DC\\uC758 \\uC778\\uB371\\uC2A4\\uB85C \\uAC31\\uC2E0\\uD574\\uC900\\uB2E4\\n                        poped_idx = right_child_poped_idx\\n            \\n            \\n        return returned_data\\n            \\n        \\nheap = Heap(15)\\n\\nheap.insert(10)\\nheap.insert(8)\\nheap.insert(5)\\nheap.insert(4)\\nheap.insert(20)\\nheap.pop()\\n\\n\\nprint(heap.heap_array)\\n\\n[None, 20, 15, 10, 8, 5, 4]\\n[None, 15, 10, 8, 5, 4]\\n\")), mdx(\"h3\", null, \"5. \\uD799 (Heap) \\uC2DC\\uAC04 \\uBCF5\\uC7A1\\uB3C4\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"depth (\\uD2B8\\uB9AC\\uC758 \\uB192\\uC774) \\uB97C h\\uB77C\\uACE0 \\uD45C\\uAE30\\uD55C\\uB2E4\\uBA74,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"n\\uAC1C\\uC758 \\uB178\\uB4DC\\uB97C \\uAC00\\uC9C0\\uB294 heap \\uC5D0 \\uB370\\uC774\\uD130 \\uC0BD\\uC785 \\uB610\\uB294 \\uC0AD\\uC81C\\uC2DC, \\uCD5C\\uC545\\uC758 \\uACBD\\uC6B0 root \\uB178\\uB4DC\\uC5D0\\uC11C leaf \\uB178\\uB4DC\\uAE4C\\uC9C0 \\uBE44\\uAD50\\uD574\\uC57C \\uD558\\uBBC0\\uB85C $h = log_2{n} $ \\uC5D0 \\uAC00\\uAE4C\\uC6B0\\uBBC0\\uB85C, \\uC2DC\\uAC04 \\uBCF5\\uC7A1\\uB3C4\\uB294 $ O(log{n}) $ \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uCC38\\uACE0: \\uBE45\\uC624 \\uD45C\\uAE30\\uBC95\\uC5D0\\uC11C $log{n}$ \\uC5D0\\uC11C\\uC758 log\\uC758 \\uBC11\\uC740 10\\uC774 \\uC544\\uB2C8\\uB77C, 2\\uC785\\uB2C8\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD55C\\uBC88 \\uC2E4\\uD589\\uC2DC\\uB9C8\\uB2E4, 50%\\uC758 \\uC2E4\\uD589\\uD560 \\uC218\\uB3C4 \\uC788\\uB294 \\uBA85\\uB839\\uC744 \\uC81C\\uAC70\\uD55C\\uB2E4\\uB294 \\uC758\\uBBF8. \\uC989 50%\\uC758 \\uC2E4\\uD589\\uC2DC\\uAC04\\uC744 \\uB2E8\\uCD95\\uC2DC\\uD0AC \\uC218 \\uC788\\uB2E4\\uB294 \\uAC83\\uC744 \\uC758\\uBBF8\\uD568\")))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"items":[{"items":[{"url":"#1-힙-heap-이란","title":"1. 힙 (Heap) 이란?"},{"url":"#2-힙-heap-구조","title":"2. 힙 (Heap) 구조"},{"url":"#힙과-이진-탐색-트리의-공통점과-차이점","title":"힙과 이진 탐색 트리의 공통점과 차이점"},{"url":"#3-힙-heap-동작","title":"3. 힙 (Heap) 동작"},{"url":"#힙에-데이터-삽입하기---기본-동작","title":"힙에 데이터 삽입하기 - 기본 동작"},{"url":"#힙에-데이터-삽입하기---삽입할-데이터가-힙의-데이터보다-클-경우-max-heap-의-예","title":"힙에 데이터 삽입하기 - 삽입할 데이터가 힙의 데이터보다 클 경우 (Max Heap 의 예)"},{"url":"#힙의-데이터-삭제하기-max-heap-의-예","title":"힙의 데이터 삭제하기 (Max Heap 의 예)"},{"url":"#4-힙-구현","title":"4. 힙 구현"},{"url":"#힙과-배열","title":"힙과 배열"}]}]},{"url":"#예1---10-노드의-부모-노드-인덱스","title":"예1 - 10 노드의 부모 노드 인덱스"},{"url":"#예1---15-노드의-왼쪽-자식-노드-인덱스-번호","title":"예1 - 15 노드의 왼쪽 자식 노드 인덱스 번호"},{"url":"#예1---15-노드의-오른쪽-자식-노드-인덱스-번호","title":"예1 - 15 노드의 오른쪽 자식 노드 인덱스 번호","items":[{"items":[{"url":"#힙에-데이터-삽입-구현-max-heap-예","title":"힙에 데이터 삽입 구현 (Max Heap 예)"},{"url":"#힙에-데이터-삭제-구현-max-heap-예","title":"힙에 데이터 삭제 구현 (Max Heap 예)"},{"url":"#5-힙-heap-시간-복잡도","title":"5. 힙 (Heap) 시간 복잡도"}]}]}]},"parent":{"__typename":"File","relativePath":"datastructure&algorithm/9.Heap.md"},"frontmatter":{"metaTitle":"힙(Heap)","metaDescription":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/framework/prisma","title":"Prisma"}}},{"node":{"fields":{"slug":"/datastructure&algorithm","title":"자료구조 & 알고리즘(Datastructure & Algorithm)"}}},{"node":{"fields":{"slug":"/framework","title":"프레임워크(Framework)"}}},{"node":{"fields":{"slug":"/git","title":"깃(Git)"}}},{"node":{"fields":{"slug":"/","title":"SuHyeon's TechBlog"}}},{"node":{"fields":{"slug":"/infra","title":"인프라(Infra)"}}},{"node":{"fields":{"slug":"/library","title":"라이브러리(Library)"}}},{"node":{"fields":{"slug":"/language","title":"언어(Language)"}}},{"node":{"fields":{"slug":"/tdd","title":"테스트 주도 개발(TDD)"}}},{"node":{"fields":{"slug":"/terminology","title":"용어정리(terminology)"}}},{"node":{"fields":{"slug":"/terminology/web","title":"Web"}}},{"node":{"fields":{"slug":"/tdd/2.mocha","title":"Mocha Framework"}}},{"node":{"fields":{"slug":"/tdd/3.chai","title":"Chai Library"}}},{"node":{"fields":{"slug":"/tdd/1.unit-test","title":"유닛 테스트(Unit Test)"}}},{"node":{"fields":{"slug":"/library/graphql","title":"GraphQL"}}},{"node":{"fields":{"slug":"/library/graphql/ApolloGraphQLserver","title":"ApolloGraphQLserver"}}},{"node":{"fields":{"slug":"/library/graphql/graphql","title":"GraphQL"}}},{"node":{"fields":{"slug":"/language/javascript","title":"Javascript"}}},{"node":{"fields":{"slug":"/language/python","title":"Python"}}},{"node":{"fields":{"slug":"/language/python/basic","title":"Basic"}}},{"node":{"fields":{"slug":"/language/typescript","title":"Typescript"}}},{"node":{"fields":{"slug":"/library/nexusjs","title":"Nexus.JS"}}},{"node":{"fields":{"slug":"/language/javascript/class","title":"Class"}}},{"node":{"fields":{"slug":"/language/javascript/executionContext","title":"Execution Context(실행 컨텍스트)"}}},{"node":{"fields":{"slug":"/language/javascript/scope_this","title":"스코프 & 함수 호출 방식에 의해 결정되는 this"}}},{"node":{"fields":{"slug":"/infra/1.BasicTheory","title":"Basic Theory"}}},{"node":{"fields":{"slug":"/infra/2.aws","title":"aws"}}},{"node":{"fields":{"slug":"/infra/3.docker","title":"Docker"}}},{"node":{"fields":{"slug":"/infra/3.docker/docker","title":"Docker"}}},{"node":{"fields":{"slug":"/infra/3.docker/dockerawsdeploy","title":"Docker AWS EC2 Deploy"}}},{"node":{"fields":{"slug":"/infra/3.docker/dockerbasic","title":"Docker Basic"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-Basic","title":"AWS-Basic"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-EC2","title":"AWS-EC2"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-RDS","title":"AWS-RDS"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-S3","title":"AWS-S3"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-Route53","title":"AWS-Route 53"}}},{"node":{"fields":{"slug":"/git/changing-default-branch","title":"Changing the Default Branch"}}},{"node":{"fields":{"slug":"/git/configuring-protected-branches","title":"Configure Branch Protection Rule"}}},{"node":{"fields":{"slug":"/git/basic-git-command","title":"Basic git command"}}},{"node":{"fields":{"slug":"/git/gitforksync","title":"git fork & sync"}}},{"node":{"fields":{"slug":"/git/rebase","title":"Rebase"}}},{"node":{"fields":{"slug":"/framework/prisma/NoticePrisma","title":"Notice Prisma"}}},{"node":{"fields":{"slug":"/framework/electron","title":"일렉트론 학습"}}},{"node":{"fields":{"slug":"/framework/prisma/prisma2","title":"Prisma 2"}}},{"node":{"fields":{"slug":"/framework/electron/electronbasic","title":"Electron Basic"}}},{"node":{"fields":{"slug":"/framework/NextJs","title":"Next Js"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/10.SpaceComplexity","title":"공간 복잡도(Space Complexity)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/11.BubbleSort","title":"버블 정렬(Bubble Sort)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/12.InsertionSort","title":"삽입 정렬(Insertion Sort)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/13.SelectionSort","title":"선택 정렬(Selection Sort)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/14.RecursiveCall","title":"재귀 용법(Recursive Call)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/15.DynamicProgramming","title":"동적 계획법과 분할 정복(Dynamic Programming & Divide and conquer"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/16.QuickSort","title":"퀵 정렬(Quick Sort)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/17.MergeSort","title":"병렬 정렬(Merge Sort)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/18.SequentialSearch","title":"순차 탐색(Sequential Search)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/2.array","title":"배열(Array)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/19.BinarySearch","title":"탐색 알고리즘(Binary Search)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/20.Graph","title":"그래프(Graph)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/21.Depth-FirstSearch","title":"깊이 우선 탐색(Depth-FirstSearch)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/22.Breadth-FirstSearch","title":"너비 우선 탐색(Breadth-FirstSearch)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/23.GreedyAlgorithm","title":"탐욕 알고리즘(Greedy Algorithm)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/25.MinimumSpanningTree","title":"최소 신장 트리(Minimum Spanning Tree)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/24.DijkstraAlgorithm","title":"다익스트라 알고리즘(Dijkstra Algorithm)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/26.BackTracking","title":"백트래킹(BackTracking)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/3.queue","title":"큐(Queue)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/4.stack","title":"스택(Stack)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/5.linkedlist","title":"링크드리스트(LinkedList)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/6.TimeComplexity","title":"시간 복잡도(Time Complexity)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/8.Tree","title":"트리(Tree)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/9.Heap","title":"힙(Heap)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/7.HashTable","title":"해쉬 테이블(HashTable)"}}}]}},"pageContext":{"id":"b42d7f35-fbbd-5ea8-9d4f-cdfa00247bcb"}},"staticQueryHashes":["2619113677","2619113677","3706406642","3706406642","417421954","417421954"]}