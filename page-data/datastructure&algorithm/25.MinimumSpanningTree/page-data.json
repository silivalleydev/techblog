{"componentChunkName":"component---src-templates-docs-js","path":"/datastructure&algorithm/25.MinimumSpanningTree","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Gitbook Boilerplate | Hasura","docsLocation":"https://github.com/hasura/gatsby-gitbook-boilerplate/tree/master/content"}},"mdx":{"fields":{"id":"3f5b01c8-0b4f-5cf8-8a52-43f0dfa252a3","title":"최소 신장 트리(Minimum Spanning Tree)","slug":"/datastructure&algorithm/25.MinimumSpanningTree"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"최소 신장 트리(Minimum Spanning Tree)\",\n  \"metaTitle\": \"최소 신장 트리(Minimum Spanning Tree)\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"\\uCD5C\\uC18C \\uC2E0\\uC7A5 \\uD2B8\\uB9AC\\uC758 \\uC774\\uD574\"), mdx(\"h3\", null, \"1. \\uC2E0\\uC7A5 \\uD2B8\\uB9AC \\uB780?\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Spanning Tree, \\uB610\\uB294 \\uC2E0\\uC7A5 \\uD2B8\\uB9AC \\uB77C\\uACE0 \\uBD88\\uB9AC\\uC6C0 (Spanning Tree\\uAC00 \\uBCF4\\uB2E4 \\uC790\\uC5F0\\uC2A4\\uB7EC\\uC6CC \\uBCF4\\uC784)\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uC6D0\\uB798\\uC758 \\uADF8\\uB798\\uD504\\uC758 \\uBAA8\\uB4E0 \\uB178\\uB4DC\\uAC00 \\uC5F0\\uACB0\\uB418\\uC5B4 \\uC788\\uC73C\\uBA74\\uC11C \\uD2B8\\uB9AC\\uC758 \\uC18D\\uC131\\uC744 \\uB9CC\\uC871\\uD558\\uB294 \\uADF8\\uB798\\uD504\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uC2E0\\uC7A5 \\uD2B8\\uB9AC\\uC758 \\uC870\\uAC74\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBCF8\\uB798\\uC758 \\uADF8\\uB798\\uD504\\uC758 \\uBAA8\\uB4E0 \\uB178\\uB4DC\\uB97C \\uD3EC\\uD568\\uD574\\uC57C \\uD568\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBAA8\\uB4E0 \\uB178\\uB4DC\\uAC00 \\uC11C\\uB85C \\uC5F0\\uACB0\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD2B8\\uB9AC\\uC758 \\uC18D\\uC131\\uC744 \\uB9CC\\uC871\\uC2DC\\uD0B4 (\\uC0AC\\uC774\\uD074\\uC774 \\uC874\\uC7AC\\uD558\\uC9C0 \\uC54A\\uC74C)\")), mdx(\"p\", {\n    parentName: \"li\"\n  }, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://www.fun-coding.org/00_Images/spanningtree.png\",\n    \"alt\": \"cds\"\n  }))))), mdx(\"h3\", null, \"2. \\uCD5C\\uC18C \\uC2E0\\uC7A5 \\uD2B8\\uB9AC\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Minimum Spanning Tree, MST \\uB77C\\uACE0 \\uBD88\\uB9AC\\uC6C0\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAC00\\uB2A5\\uD55C Spanning Tree \\uC911\\uC5D0\\uC11C, \\uAC04\\uC120\\uC758 \\uAC00\\uC911\\uCE58 \\uD569\\uC774 \\uCD5C\\uC18C\\uC778 Spanning Tree\\uB97C \\uC9C0\\uCE6D\\uD568\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://www.fun-coding.org/00_Images/mst.png\",\n    \"alt\": \"ds\"\n  }))), mdx(\"h3\", null, \"3. \\uCD5C\\uC18C \\uC2E0\\uC7A5 \\uD2B8\\uB9AC \\uC54C\\uACE0\\uB9AC\\uC998\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uADF8\\uB798\\uD504\\uC5D0\\uC11C \\uCD5C\\uC18C \\uC2E0\\uC7A5 \\uD2B8\\uB9AC\\uB97C \\uCC3E\\uC744 \\uC218 \\uC788\\uB294 \\uC54C\\uACE0\\uB9AC\\uC998\\uC774 \\uC874\\uC7AC\\uD568\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB300\\uD45C\\uC801\\uC778 \\uCD5C\\uC18C \\uC2E0\\uC7A5 \\uD2B8\\uB9AC \\uC54C\\uACE0\\uB9AC\\uC998\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Kruskal\\u2019s algorithm (\\uD06C\\uB8E8\\uC2A4\\uCE7C \\uC54C\\uACE0\\uB9AC\\uC998), Prim's algorithm (\\uD504\\uB9BC \\uC54C\\uACE0\\uB9AC\\uC998)\")))), mdx(\"h3\", null, \"4. \\uD06C\\uB8E8\\uC2A4\\uCE7C \\uC54C\\uACE0\\uB9AC\\uC998 (Kruskal's algorithm)\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uBAA8\\uB4E0 \\uC815\\uC810\\uC744 \\uB3C5\\uB9BD\\uC801\\uC778 \\uC9D1\\uD569\\uC73C\\uB85C \\uB9CC\\uB4E0\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uBAA8\\uB4E0 \\uAC04\\uC120\\uC744 \\uBE44\\uC6A9\\uC744 \\uAE30\\uC900\\uC73C\\uB85C \\uC815\\uB82C\\uD558\\uACE0, \\uBE44\\uC6A9\\uC774 \\uC791\\uC740 \\uAC04\\uC120\\uBD80\\uD130 \\uC591 \\uB05D\\uC758 \\uB450 \\uC815\\uC810\\uC744 \\uBE44\\uAD50\\uD55C\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uB450 \\uC815\\uC810\\uC758 \\uCD5C\\uC0C1\\uC704 \\uC815\\uC810\\uC744 \\uD655\\uC778\\uD558\\uACE0, \\uC11C\\uB85C \\uB2E4\\uB97C \\uACBD\\uC6B0 \\uB450 \\uC815\\uC810\\uC744 \\uC5F0\\uACB0\\uD55C\\uB2E4. (\\uCD5C\\uC18C \\uC2E0\\uC7A5 \\uD2B8\\uB9AC\\uB294 \\uC0AC\\uC774\\uD074\\uC774 \\uC5C6\\uC73C\\uBBC0\\uB85C, \\uC0AC\\uC774\\uD074\\uC774 \\uC0DD\\uAE30\\uC9C0 \\uC54A\\uB3C4\\uB85D \\uD558\\uB294 \\uAC83\\uC784)\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uD0D0\\uC695 \\uC54C\\uACE0\\uB9AC\\uC998\\uC744 \\uAE30\\uCD08\\uB85C \\uD558\\uACE0 \\uC788\\uC74C (\\uB2F9\\uC7A5 \\uB208 \\uC55E\\uC758 \\uCD5C\\uC18C \\uBE44\\uC6A9\\uC744 \\uC120\\uD0DD\\uD574\\uC11C, \\uACB0\\uACFC\\uC801\\uC73C\\uB85C \\uCD5C\\uC801\\uC758 \\uC194\\uB8E8\\uC158\\uC744 \\uCC3E\\uC74C)\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://www.fun-coding.org/00_Images/kruscal_internal1.png\",\n    \"alt\": \"cds\"\n  })), \"\\n\", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://www.fun-coding.org/00_Images/kruscal_internal2.png\",\n    \"alt\": \"cds\"\n  }))), mdx(\"h3\", null, \"5. Union-Find \\uC54C\\uACE0\\uB9AC\\uC998\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Disjoint Set\\uC744 \\uD45C\\uD604\\uD560 \\uB54C \\uC0AC\\uC6A9\\uD558\\uB294 \\uC54C\\uACE0\\uB9AC\\uC998\\uC73C\\uB85C \\uD2B8\\uB9AC \\uAD6C\\uC870\\uB97C \\uD65C\\uC6A9\\uD558\\uB294 \\uC54C\\uACE0\\uB9AC\\uC998\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAC04\\uB2E8\\uD558\\uAC8C, \\uB178\\uB4DC\\uB4E4 \\uC911\\uC5D0 \\uC5F0\\uACB0\\uB41C \\uB178\\uB4DC\\uB97C \\uCC3E\\uAC70\\uB098, \\uB178\\uB4DC\\uB4E4\\uC744 \\uC11C\\uB85C \\uC5F0\\uACB0\\uD560 \\uB54C (\\uD569\\uCE60 \\uB54C) \\uC0AC\\uC6A9\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Disjoint Set\\uC774\\uB780\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC11C\\uB85C \\uC911\\uBCF5\\uB418\\uC9C0 \\uC54A\\uB294 \\uBD80\\uBD84 \\uC9D1\\uD569\\uB4E4\\uB85C \\uB098\\uB220\\uC9C4 \\uC6D0\\uC18C\\uB4E4\\uC5D0 \\uB300\\uD55C \\uC815\\uBCF4\\uB97C \\uC800\\uC7A5\\uD558\\uACE0 \\uC870\\uC791\\uD558\\uB294 \\uC790\\uB8CC\\uAD6C\\uC870\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uACF5\\uD1B5 \\uC6D0\\uC18C\\uAC00 \\uC5C6\\uB294 (\\uC11C\\uB85C\\uC18C) \\uC0C1\\uD638 \\uBC30\\uD0C0\\uC801\\uC778 \\uBD80\\uBD84 \\uC9D1\\uD569\\uB4E4\\uB85C \\uB098\\uB220\\uC9C4 \\uC6D0\\uC18C\\uB4E4\\uC5D0 \\uB300\\uD55C \\uC790\\uB8CC\\uAD6C\\uC870\\uB97C \\uC758\\uBBF8\\uD568\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Disjoint Set = \\uC11C\\uB85C\\uC18C \\uC9D1\\uD569 \\uC790\\uB8CC\\uAD6C\\uC870\")))), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uCD08\\uAE30\\uD654\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"n \\uAC1C\\uC758 \\uC6D0\\uC18C\\uAC00 \\uAC1C\\uBCC4 \\uC9D1\\uD569\\uC73C\\uB85C \\uC774\\uB904\\uC9C0\\uB3C4\\uB85D \\uCD08\\uAE30\\uD654\\n\", mdx(\"img\", _extends({\n    parentName: \"li\"\n  }, {\n    \"src\": \"https://www.fun-coding.org/00_Images/initial_findunion.png\",\n    \"alt\": \"csd\"\n  }))))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Union\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB450 \\uAC1C\\uBCC4 \\uC9D1\\uD569\\uC744 \\uD558\\uB098\\uC758 \\uC9D1\\uD569\\uC73C\\uB85C \\uD569\\uCE68, \\uB450 \\uD2B8\\uB9AC\\uB97C \\uD558\\uB098\\uC758 \\uD2B8\\uB9AC\\uB85C \\uB9CC\\uB4EC\\n\", mdx(\"img\", _extends({\n    parentName: \"li\"\n  }, {\n    \"src\": \"https://www.fun-coding.org/00_Images/union_findunion.png\",\n    \"alt\": \"dc\"\n  }))))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Find\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC5EC\\uB7EC \\uB178\\uB4DC\\uAC00 \\uC874\\uC7AC\\uD560 \\uB54C, \\uB450 \\uAC1C\\uC758 \\uB178\\uB4DC\\uB97C \\uC120\\uD0DD\\uD574\\uC11C, \\uD604\\uC7AC \\uB450 \\uB178\\uB4DC\\uAC00 \\uC11C\\uB85C \\uAC19\\uC740 \\uADF8\\uB798\\uD504\\uC5D0 \\uC18D\\uD558\\uB294\\uC9C0 \\uD310\\uBCC4\\uD558\\uAE30 \\uC704\\uD574, \\uAC01 \\uADF8\\uB8F9\\uC758 \\uCD5C\\uC0C1\\uB2E8 \\uC6D0\\uC18C (\\uC989, \\uB8E8\\uD2B8 \\uB178\\uB4DC)\\uB97C \\uD655\\uC778\\n\", mdx(\"img\", _extends({\n    parentName: \"li\"\n  }, {\n    \"src\": \"https://www.fun-coding.org/00_Images/find_findunion.png\",\n    \"alt\": \"csd\"\n  })))))), mdx(\"h3\", null, \"Union-Find \\uC54C\\uACE0\\uB9AC\\uC998\\uC758 \\uACE0\\uB824\\uD560 \\uC810\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Union \\uC21C\\uC11C\\uC5D0 \\uB530\\uB77C\\uC11C, \\uCD5C\\uC545\\uC758 \\uACBD\\uC6B0 \\uB9C1\\uD06C\\uB4DC \\uB9AC\\uC2A4\\uD2B8\\uC640 \\uAC19\\uC740 \\uD615\\uD0DC\\uAC00 \\uB420 \\uC218 \\uC788\\uC74C.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774 \\uB54C\\uB294 Find/Union \\uC2DC \\uACC4\\uC0B0\\uB7C9\\uC774 O(N) \\uC774 \\uB420 \\uC218 \\uC788\\uC73C\\uBBC0\\uB85C, \\uD574\\uB2F9 \\uBB38\\uC81C\\uB97C \\uD574\\uACB0\\uD558\\uAE30 \\uC704\\uD574, union-by-rank, path compression \\uAE30\\uBC95\\uC744 \\uC0AC\\uC6A9\\uD568 \")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://www.fun-coding.org/00_Images/worst_findunion.png\",\n    \"alt\": \"cds\"\n  }))), mdx(\"h3\", null, \"union-by-rank \\uAE30\\uBC95\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uAC01 \\uD2B8\\uB9AC\\uC5D0 \\uB300\\uD574 \\uB192\\uC774(rank)\\uB97C \\uAE30\\uC5B5\\uD574 \\uB450\\uACE0,\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"Union\\uC2DC \\uB450 \\uD2B8\\uB9AC\\uC758 \\uB192\\uC774(rank)\\uAC00 \\uB2E4\\uB974\\uBA74, \\uB192\\uC774\\uAC00 \\uC791\\uC740 \\uD2B8\\uB9AC\\uB97C \\uB192\\uC774\\uAC00 \\uD070 \\uD2B8\\uB9AC\\uC5D0 \\uBD99\\uC784 (\\uC989, \\uB192\\uC774\\uAC00 \\uD070 \\uD2B8\\uB9AC\\uC758 \\uB8E8\\uD2B8 \\uB178\\uB4DC\\uAC00 \\uD569\\uCE5C \\uC9D1\\uD569\\uC758 \\uB8E8\\uD2B8 \\uB178\\uB4DC\\uAC00 \\uB418\\uAC8C \\uD568)\\n\", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://www.fun-coding.org/00_Images/unionbyrank_findunion.png\",\n    \"alt\": \"sdc\"\n  })))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uB192\\uC774\\uAC00 h - 1 \\uC778 \\uB450 \\uAC1C\\uC758 \\uD2B8\\uB9AC\\uB97C \\uD569\\uCE60 \\uB54C\\uB294 \\uD55C \\uCABD\\uC758 \\uD2B8\\uB9AC \\uB192\\uC774\\uB97C 1 \\uC99D\\uAC00\\uC2DC\\uCF1C\\uC8FC\\uACE0, \\uB2E4\\uB978 \\uCABD\\uC758 \\uD2B8\\uB9AC\\uB97C \\uD574\\uB2F9 \\uD2B8\\uB9AC\\uC5D0 \\uBD99\\uC5EC\\uC90C\\n\", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://www.fun-coding.org/00_Images/unionbyranksame_findunion.png\",\n    \"alt\": \"ds\"\n  })))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uCD08\\uAE30\\uD654\\uC2DC, \\uBAA8\\uB4E0 \\uC6D0\\uC18C\\uB294 \\uB192\\uC774(rank) \\uAC00 0 \\uC778 \\uAC1C\\uBCC4 \\uC9D1\\uD569\\uC778 \\uC0C1\\uD0DC\\uC5D0\\uC11C, \\uD558\\uB098\\uC529 \\uC6D0\\uC18C\\uB97C \\uD569\\uCE60 \\uB54C, union-by-rank \\uAE30\\uBC95\\uC744 \\uC0AC\\uC6A9\\uD55C\\uB2E4\\uBA74,\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB192\\uC774\\uAC00 h \\uC778 \\uD2B8\\uB9AC\\uAC00 \\uB9CC\\uB4E4\\uC5B4\\uC9C0\\uB824\\uBA74, \\uB192\\uC774\\uAC00 h - 1 \\uC778 \\uB450 \\uAC1C\\uC758 \\uD2B8\\uB9AC\\uAC00 \\uD569\\uCCD0\\uC838\\uC57C \\uD568\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB192\\uC774\\uAC00 h - 1 \\uC778 \\uD2B8\\uB9AC\\uB97C \\uB9CC\\uB4E4\\uAE30 \\uC704\\uD574 \\uCD5C\\uC18C n\\uAC1C\\uC758 \\uC6D0\\uC18C\\uAC00 \\uD544\\uC694\\uD558\\uB2E4\\uBA74, \\uB192\\uC774\\uAC00 h \\uC778 \\uD2B8\\uB9AC\\uAC00 \\uB9CC\\uB4E4\\uC5B4\\uC9C0\\uAE30 \\uC704\\uD574\\uC11C\\uB294 \\uCD5C\\uC18C 2n\\uAC1C\\uC758 \\uC6D0\\uC18C\\uAC00 \\uD544\\uC694\\uD568\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB530\\uB77C\\uC11C union-by-rank \\uAE30\\uBC95\\uC744 \\uC0AC\\uC6A9\\uD558\\uBA74, union/find \\uC5F0\\uC0B0\\uC758 \\uC2DC\\uAC04\\uBCF5\\uC7A1\\uB3C4\\uB294 O(N) \\uC774 \\uC544\\uB2CC, $ O(log{N}) $ \\uB85C \\uB0AE\\uCD9C \\uC218 \\uC788\\uC74C\")))), mdx(\"h3\", null, \"path compression\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Find\\uB97C \\uC2E4\\uD589\\uD55C \\uB178\\uB4DC\\uC5D0\\uC11C \\uAC70\\uCCD0\\uAC04 \\uB178\\uB4DC\\uB97C \\uB8E8\\uD2B8\\uC5D0 \\uB2E4\\uC774\\uB809\\uD2B8\\uB85C \\uC5F0\\uACB0\\uD558\\uB294 \\uAE30\\uBC95\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Find\\uB97C \\uC2E4\\uD589\\uD55C \\uB178\\uB4DC\\uB294 \\uC774\\uD6C4\\uBD80\\uD130\\uB294 \\uB8E8\\uD2B8 \\uB178\\uB4DC\\uB97C \\uD55C\\uBC88\\uC5D0 \\uC54C \\uC218 \\uC788\\uC74C\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://www.fun-coding.org/00_Images/pathcompression_findunion.png\",\n    \"alt\": \"dcs\"\n  }))), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"union-by-rank \\uC640 path compression \\uAE30\\uBC95 \\uC0AC\\uC6A9\\uC2DC \\uC2DC\\uAC04 \\uBCF5\\uC7A1\\uB3C4\\uB294 \\uB2E4\\uC74C \\uACC4\\uC0B0\\uC2DD\\uC744 \\uB9CC\\uC871\\uD568\\uC774 \\uC99D\\uBA85\\uB418\\uC5C8\\uC74C\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ O(M log^*{N}) $\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"$ log^*{N} $ \\uC740 \\uB2E4\\uC74C \\uAC12\\uC744 \\uAC00\\uC9D0\\uC774 \\uC99D\\uBA85\\uB418\\uC5C8\\uC74C\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"N\\uC774 $ 2^{65536} $ \\uAC12\\uC744 \\uAC00\\uC9C0\\uB354\\uB77C\\uB3C4, $ log^*{N} $ \\uC758 \\uAC12\\uC774 5\\uC758 \\uAC12\\uC744 \\uAC00\\uC9C0\\uBBC0\\uB85C, \\uAC70\\uC758 O(1), \\uC989 \\uC0C1\\uC218\\uAC12\\uC5D0 \\uAC00\\uAE5D\\uB2E4\\uACE0 \\uBCFC \\uC218 \\uC788\\uC74C\")))))), mdx(\"table\", null, mdx(\"thead\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"thead\"\n  }, mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"N\"), mdx(\"th\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"\\uD835\\uDC59\\uD835\\uDC5C\\uD835\\uDC54\\u2217\\uD835\\uDC41\"))), mdx(\"tbody\", {\n    parentName: \"table\"\n  }, mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"1\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"0\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"2\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"1\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"4\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"2\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"16\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"3\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"65536\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"4\")), mdx(\"tr\", {\n    parentName: \"tbody\"\n  }, mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"2^65536\"), mdx(\"td\", _extends({\n    parentName: \"tr\"\n  }, {\n    \"align\": null\n  }), \"5\")))), mdx(\"h3\", null, \"6. \\uD06C\\uB8E8\\uC2A4\\uCE7C \\uC54C\\uACE0\\uB9AC\\uC998 (Kruskal's algorithm) \\uCF54\\uB4DC \\uC791\\uC131\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"mygraph = {\\n    'vertices': ['A', 'B', 'C', 'D', 'E', 'F', 'G'],\\n    'edges': [\\n        (7, 'A', 'B'),\\n        (5, 'A', 'D'),\\n        (7, 'B', 'A'),\\n        (8, 'B', 'C'),\\n        (9, 'B', 'D'),\\n        (7, 'B', 'E'),\\n        (8, 'C', 'B'),\\n        (5, 'C', 'E'),\\n        (5, 'D', 'A'),\\n        (9, 'D', 'B'),\\n        (7, 'D', 'E'),\\n        (6, 'D', 'F'),\\n        (7, 'E', 'B'),\\n        (5, 'E', 'C'),\\n        (7, 'E', 'D'),\\n        (8, 'E', 'F'),\\n        (9, 'E', 'G'),\\n        (6, 'F', 'D'),\\n        (8, 'F', 'E'),\\n        (11, 'F', 'G'),\\n        (9, 'G', 'E'),\\n        (11, 'G', 'F')\\n    ]\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"parent = dict()\\nrank = dict()\\n\\n\\ndef find(node):\\n    # path compression \\uAE30\\uBC95\\n    if parent[node] != node:\\n        parent[node] = find(parent[node])\\n    return parent[node]\\n\\n\\ndef union(node_v, node_u):\\n    root1 = find(node_v)\\n    root2 = find(node_u)\\n    \\n    # union-by-rank \\uAE30\\uBC95\\n    if rank[root1] > rank[root2]:\\n        parent[root2] = root1\\n    else:\\n        parent[root1] = root2\\n        if rank[root1] == rank[root2]:\\n            rank[root2] += 1\\n    \\n    \\ndef make_set(node):\\n    parent[node] = node\\n    rank[node] = 0\\n\\ndef kruskal(graph):\\n    mst = list()\\n    \\n    # 1. \\uCD08\\uAE30\\uD654\\n    for node in graph['vertices']:\\n        make_set(node)\\n    \\n    # 2. \\uAC04\\uC120 weight \\uAE30\\uBC18 sorting\\n    edges = graph['edges']\\n    edges.sort()\\n    \\n    # 3. \\uAC04\\uC120 \\uC5F0\\uACB0 (\\uC0AC\\uC774\\uD074 \\uC5C6\\uB294)\\n    for edge in edges:\\n        weight, node_v, node_u = edge\\n        if find(node_v) != find(node_u):\\n            union(node_v, node_u)\\n            mst.append(edge)\\n    \\n    return mst\\n\\nkruskal(mygraph)\\n\\n[(5, 'A', 'D'),\\n (5, 'C', 'E'),\\n (6, 'D', 'F'),\\n (7, 'A', 'B'),\\n (7, 'B', 'E'),\\n (9, 'E', 'G')]\\n\")), mdx(\"h3\", null, \"7. \\uC2DC\\uAC04 \\uBCF5\\uC7A1\\uB3C4\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD06C\\uB8E8\\uC2A4\\uCEEC \\uC54C\\uACE0\\uB9AC\\uC998\\uC758 \\uC2DC\\uAC04 \\uBCF5\\uC7A1\\uB3C4\\uB294 O(E log E)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB2E4\\uC74C \\uB2E8\\uACC4\\uC5D0\\uC11C 2\\uBC88, \\uAC04\\uC120\\uC744 \\uBE44\\uC6A9 \\uAE30\\uC900\\uC73C\\uB85C \\uC815\\uB82C\\uD558\\uB294 \\uC2DC\\uAC04\\uC5D0 \\uC88C\\uC6B0\\uB428 (\\uC989 \\uAC04\\uC120\\uC744 \\uBE44\\uC6A9 \\uAE30\\uC900\\uC73C\\uB85C \\uC815\\uB82C\\uD558\\uB294 \\uC2DC\\uAC04\\uC774 \\uAC00\\uC7A5 \\uD07C)\")), mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uBAA8\\uB4E0 \\uC815\\uC810\\uC744 \\uB3C5\\uB9BD\\uC801\\uC778 \\uC9D1\\uD569\\uC73C\\uB85C \\uB9CC\\uB4E0\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uBAA8\\uB4E0 \\uAC04\\uC120\\uC744 \\uBE44\\uC6A9\\uC744 \\uAE30\\uC900\\uC73C\\uB85C \\uC815\\uB82C\\uD558\\uACE0, \\uBE44\\uC6A9\\uC774 \\uC791\\uC740 \\uAC04\\uC120\\uBD80\\uD130 \\uC591 \\uB05D\\uC758 \\uB450 \\uC815\\uC810\\uC744 \\uBE44\\uAD50\\uD55C\\uB2E4.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD035\\uC18C\\uD2B8\\uB97C \\uC0AC\\uC6A9\\uD55C\\uB2E4\\uBA74 \\uC2DC\\uAC04 \\uBCF5\\uC7A1\\uB3C4\\uB294 O(n log n) \\uC774\\uBA70, \\uAC04\\uC120\\uC774 n \\uC774\\uBBC0\\uB85C O(E log E)\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uB450 \\uC815\\uC810\\uC758 \\uCD5C\\uC0C1\\uC704 \\uC815\\uC810\\uC744 \\uD655\\uC778\\uD558\\uACE0, \\uC11C\\uB85C \\uB2E4\\uB97C \\uACBD\\uC6B0 \\uB450 \\uC815\\uC810\\uC744 \\uC5F0\\uACB0\\uD55C\\uB2E4. (\\uCD5C\\uC18C \\uC2E0\\uC7A5 \\uD2B8\\uB9AC\\uB294 \\uC0AC\\uC774\\uD074\\uC774 \\uC5C6\\uC73C\\uBBC0\\uB85C, \\uC0AC\\uC774\\uD074\\uC774 \\uC0DD\\uAE30\\uC9C0 \\uC54A\\uB3C4\\uB85D \\uD558\\uB294 \\uAC83\\uC784)\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"union-by-rank \\uC640 path compression \\uAE30\\uBC95 \\uC0AC\\uC6A9\\uC2DC \\uC2DC\\uAC04 \\uBCF5\\uC7A1\\uB3C4\\uAC00 \\uACB0\\uAD6D \\uC0C1\\uC218\\uAC12\\uC5D0 \\uAC00\\uAE4C\\uC6C0, O(1)\")))))), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://www.fun-coding.org/00_Images/kruscal_time.png\",\n    \"alt\": \"cds\"\n  }))), mdx(\"h2\", null, \"\\uCD5C\\uC18C \\uC2E0\\uC7A5 \\uD2B8\\uB9AC2\"), mdx(\"h3\", null, \"1. \\uD504\\uB9BC \\uC54C\\uACE0\\uB9AC\\uC998 (Prim's algorithm)\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB300\\uD45C\\uC801\\uC778 \\uCD5C\\uC18C \\uC2E0\\uC7A5 \\uD2B8\\uB9AC \\uC54C\\uACE0\\uB9AC\\uC998\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Kruskal\\u2019s algorithm (\\uD06C\\uB8E8\\uC2A4\\uCE7C \\uC54C\\uACE0\\uB9AC\\uC998), Prim's algorithm (\\uD504\\uB9BC \\uC54C\\uACE0\\uB9AC\\uC998)\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD504\\uB9BC \\uC54C\\uACE0\\uB9AC\\uC998 \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC2DC\\uC791 \\uC815\\uC810\\uC744 \\uC120\\uD0DD\\uD55C \\uD6C4, \\uC815\\uC810\\uC5D0 \\uC778\\uC811\\uD55C \\uAC04\\uC120\\uC911 \\uCD5C\\uC18C \\uAC04\\uC120\\uC73C\\uB85C \\uC5F0\\uACB0\\uB41C \\uC815\\uC810\\uC744 \\uC120\\uD0DD\\uD558\\uACE0, \\uD574\\uB2F9 \\uC815\\uC810\\uC5D0\\uC11C \\uB2E4\\uC2DC \\uCD5C\\uC18C \\uAC04\\uC120\\uC73C\\uB85C \\uC5F0\\uACB0\\uB41C \\uC815\\uC810\\uC744 \\uC120\\uD0DD\\uD558\\uB294 \\uBC29\\uC2DD\\uC73C\\uB85C \\uCD5C\\uC18C \\uC2E0\\uC7A5 \\uD2B8\\uB9AC\\uB97C \\uD655\\uC7A5\\uD574\\uAC00\\uB294 \\uBC29\\uC2DD\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Kruskal's algorithm \\uACFC Prim's algorithm \\uBE44\\uAD50\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB458\\uB2E4, \\uD0D0\\uC695 \\uC54C\\uACE0\\uB9AC\\uC998\\uC744 \\uAE30\\uCD08\\uB85C \\uD558\\uACE0 \\uC788\\uC74C (\\uB2F9\\uC7A5 \\uB208 \\uC55E\\uC758 \\uCD5C\\uC18C \\uBE44\\uC6A9\\uC744 \\uC120\\uD0DD\\uD574\\uC11C, \\uACB0\\uACFC\\uC801\\uC73C\\uB85C \\uCD5C\\uC801\\uC758 \\uC194\\uB8E8\\uC158\\uC744 \\uCC3E\\uC74C)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Kruskal's algorithm\\uC740 \\uAC00\\uC7A5 \\uAC00\\uC911\\uCE58\\uAC00 \\uC791\\uC740 \\uAC04\\uC120\\uBD80\\uD130 \\uC120\\uD0DD\\uD558\\uBA74\\uC11C MST\\uB97C \\uAD6C\\uD568\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Prim's algorithm\\uC740 \\uD2B9\\uC815 \\uC815\\uC810\\uC5D0\\uC11C \\uC2DC\\uC791, \\uD574\\uB2F9 \\uC815\\uC810\\uC5D0 \\uC5F0\\uACB0\\uB41C \\uAC00\\uC7A5 \\uAC00\\uC911\\uCE58\\uAC00 \\uC791\\uC740 \\uAC04\\uC120\\uC744 \\uC120\\uD0DD, \\uAC04\\uC120\\uC73C\\uB85C \\uC5F0\\uACB0\\uB41C \\uC815\\uC810\\uB4E4\\uC5D0 \\uC5F0\\uACB0\\uB41C \\uAC04\\uC120 \\uC911\\uC5D0\\uC11C \\uAC00\\uC7A5 \\uAC00\\uC911\\uCE58\\uAC00 \\uC791\\uC740 \\uAC04\\uC120\\uC744 \\uD0DD\\uD558\\uB294 \\uBC29\\uC2DD\\uC73C\\uB85C MST\\uB97C \\uAD6C\\uD568\")))), mdx(\"h3\", null, \"2. \\uADF8\\uB9BC\\uC73C\\uB85C \\uC774\\uD574\\uD558\\uB294 \\uD504\\uB9BC \\uC54C\\uACE0\\uB9AC\\uC998\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uC784\\uC758\\uC758 \\uC815\\uC810\\uC744 \\uC120\\uD0DD, '\\uC5F0\\uACB0\\uB41C \\uB178\\uB4DC \\uC9D1\\uD569'\\uC5D0 \\uC0BD\\uC785\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uC120\\uD0DD\\uB41C \\uC815\\uC810\\uC5D0 \\uC5F0\\uACB0\\uB41C \\uAC04\\uC120\\uB4E4\\uC744 \\uAC04\\uC120 \\uB9AC\\uC2A4\\uD2B8\\uC5D0 \\uC0BD\\uC785\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uAC04\\uC120 \\uB9AC\\uC2A4\\uD2B8\\uC5D0\\uC11C \\uCD5C\\uC18C \\uAC00\\uC911\\uCE58\\uB97C \\uAC00\\uC9C0\\uB294 \\uAC04\\uC120\\uBD80\\uD130 \\uCD94\\uCD9C\\uD574\\uC11C,\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD574\\uB2F9 \\uAC04\\uC120\\uC5D0 \\uC5F0\\uACB0\\uB41C \\uC778\\uC811 \\uC815\\uC810\\uC774 '\\uC5F0\\uACB0\\uB41C \\uB178\\uB4DC \\uC9D1\\uD569'\\uC5D0 \\uC774\\uBBF8 \\uB4E4\\uC5B4 \\uC788\\uB2E4\\uBA74, \\uC2A4\\uD0B5\\uD568(cycle \\uBC1C\\uC0DD\\uC744 \\uB9C9\\uAE30 \\uC704\\uD568)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD574\\uB2F9 \\uAC04\\uC120\\uC5D0 \\uC5F0\\uACB0\\uB41C \\uC778\\uC811 \\uC815\\uC810\\uC774 '\\uC5F0\\uACB0\\uB41C \\uB178\\uB4DC \\uC9D1\\uD569'\\uC5D0 \\uB4E4\\uC5B4 \\uC788\\uC9C0 \\uC54A\\uC73C\\uBA74, \\uD574\\uB2F9 \\uAC04\\uC120\\uC744 \\uC120\\uD0DD\\uD558\\uACE0, \\uD574\\uB2F9 \\uAC04\\uC120 \\uC815\\uBCF4\\uB97C '\\uCD5C\\uC18C \\uC2E0\\uC7A5 \\uD2B8\\uB9AC'\\uC5D0 \\uC0BD\\uC785\"))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uCD94\\uCD9C\\uD55C \\uAC04\\uC120\\uC740 \\uAC04\\uC120 \\uB9AC\\uC2A4\\uD2B8\\uC5D0\\uC11C \\uC81C\\uAC70\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uAC04\\uC120 \\uB9AC\\uC2A4\\uD2B8\\uC5D0 \\uB354 \\uC774\\uC0C1\\uC758 \\uAC04\\uC120\\uC774 \\uC5C6\\uC744 \\uB54C\\uAE4C\\uC9C0 3-4\\uBC88\\uC744 \\uBC18\\uBCF5\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://www.fun-coding.org/00_Images/prim1.png\",\n    \"alt\": \"sdc\"\n  })), \"\\n\", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://www.fun-coding.org/00_Images/prim2.png\",\n    \"alt\": \"sdc\"\n  })), \"\\n\", mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://www.fun-coding.org/00_Images/prim3.png\",\n    \"alt\": \"sdc\"\n  }))), mdx(\"h3\", null, \"3. \\uD504\\uB9BC \\uC54C\\uACE0\\uB9AC\\uC998 (Prim's algorithm) \\uCF54\\uB4DC \\uC791\\uC131\"), mdx(\"h3\", null, \"\\uCC38\\uACE0: heapq \\uB77C\\uC774\\uBE0C\\uB7EC\\uB9AC \\uD65C\\uC6A9\\uC744 \\uD1B5\\uD574 \\uC6B0\\uC120\\uC21C\\uC704 \\uD050 \\uC0AC\\uC6A9\\uD558\\uAE30\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"heapq.heappush\\uB97C \\uD1B5\\uD574 \\uB370\\uC774\\uD130\\uB97C heap \\uD615\\uD0DC\\uB85C \\uB123\\uC744 \\uC218 \\uC788\\uC74C (0\\uBC88 \\uC778\\uB371\\uC2A4\\uB97C \\uC6B0\\uC120\\uC21C\\uC704\\uB85C \\uC778\\uC9C0\\uD568)\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"import heapq\\n\\nqueue = []\\ngraph_data = [[2, 'A'], [5, 'B'], [3, 'C']]\\n\\nfor edge in graph_data:\\n    heapq.heappush(queue, edge)\\n    \\nfor index in range(len(queue)):\\n    print (heapq.heappop(queue))\\n\\nprint (queue)\\n\\n[2, 'A']\\n[3, 'C']\\n[5, 'B']\\n[]\\n\")), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"heapq.heapify() \\uD568\\uC218\\uB97C \\uD1B5\\uD574 \\uB9AC\\uC2A4\\uD2B8 \\uB370\\uC774\\uD130\\uB97C heap \\uD615\\uD0DC\\uB85C \\uD55C \\uBC88\\uC5D0 \\uBCC0\\uD658\\uD560 \\uC218 \\uC788\\uC74C (0\\uBC88 \\uC778\\uB371\\uC2A4\\uB97C \\uC6B0\\uC120\\uC21C\\uC704\\uB85C \\uC778\\uC9C0\\uD568)\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"import heapq\\n\\ngraph_data = [[2, 'A'], [5, 'B'], [3, 'C']]\\n\\nheapq.heapify(graph_data)\\n    \\nfor index in range(len(graph_data)):\\n    print (heapq.heappop(graph_data))\\n\\nprint (graph_data)\\n\\n[2, 'A']\\n[3, 'C']\\n[5, 'B']\\n[]\\n\")), mdx(\"h3\", null, \"\\uCC38\\uACE0: collections \\uB77C\\uC774\\uBE0C\\uB7EC\\uB9AC\\uC758 defaultdict \\uD568\\uC218 \\uD65C\\uC6A9\\uD558\\uAE30\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"defaultdict \\uD568\\uC218\\uB97C \\uC0AC\\uC6A9\\uD574\\uC11C, key\\uC5D0 \\uB300\\uD55C value\\uB97C \\uC9C0\\uC815\\uD558\\uC9C0 \\uC54A\\uC558\\uC744 \\uC2DC, \\uBE48 \\uB9AC\\uC2A4\\uD2B8\\uB85C \\uCD08\\uAE30\\uD654\\uD558\\uAE30\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"from collections import defaultdict\\n\\nlist_dict = defaultdict(list)\\nprint (list_dict['key1'])\\n\\n[ ]\\n\")), mdx(\"h3\", null, \"\\uD504\\uB9BC \\uC54C\\uACE0\\uB9AC\\uC998 \\uD30C\\uC774\\uC36C \\uCF54\\uB4DC\"), mdx(\"ol\", {\n    \"start\": 0\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uBAA8\\uB4E0 \\uAC04\\uC120 \\uC815\\uBCF4\\uB97C \\uC800\\uC7A5 (\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"adjacent_edges\"), \")\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uC784\\uC758\\uC758 \\uC815\\uC810\\uC744 \\uC120\\uD0DD, '\\uC5F0\\uACB0\\uB41C \\uB178\\uB4DC \\uC9D1\\uD569(\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"connected_nodes\"), \")'\\uC5D0 \\uC0BD\\uC785\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uC120\\uD0DD\\uB41C \\uC815\\uC810\\uC5D0 \\uC5F0\\uACB0\\uB41C \\uAC04\\uC120\\uB4E4\\uC744 \\uAC04\\uC120 \\uB9AC\\uC2A4\\uD2B8(\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"candidate_edge_list\"), \")\\uC5D0 \\uC0BD\\uC785\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uAC04\\uC120 \\uB9AC\\uC2A4\\uD2B8(\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"candidate_edge_list\"), \")\\uC5D0\\uC11C \\uCD5C\\uC18C \\uAC00\\uC911\\uCE58\\uB97C \\uAC00\\uC9C0\\uB294 \\uAC04\\uC120\\uBD80\\uD130 \\uCD94\\uCD9C\\uD574\\uC11C,\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD574\\uB2F9 \\uAC04\\uC120\\uC5D0 \\uC5F0\\uACB0\\uB41C \\uC778\\uC811 \\uC815\\uC810\\uC774 '\\uC5F0\\uACB0\\uB41C \\uB178\\uB4DC \\uC9D1\\uD569'\\uC5D0 \\uC774\\uBBF8 \\uB4E4\\uC5B4 \\uC788\\uB2E4\\uBA74, \\uC2A4\\uD0B5\\uD568(cycle \\uBC1C\\uC0DD\\uC744 \\uB9C9\\uAE30 \\uC704\\uD568)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD574\\uB2F9 \\uAC04\\uC120\\uC5D0 \\uC5F0\\uACB0\\uB41C \\uC778\\uC811 \\uC815\\uC810\\uC774 '\\uC5F0\\uACB0\\uB41C \\uB178\\uB4DC \\uC9D1\\uD569'\\uC5D0 \\uB4E4\\uC5B4 \\uC788\\uC9C0 \\uC54A\\uC73C\\uBA74, \\uD574\\uB2F9 \\uAC04\\uC120\\uC744 \\uC120\\uD0DD\\uD558\\uACE0, \\uD574\\uB2F9 \\uAC04\\uC120 \\uC815\\uBCF4\\uB97C '\\uCD5C\\uC18C \\uC2E0\\uC7A5 \\uD2B8\\uB9AC(\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"mst\"), \")'\\uC5D0 \\uC0BD\\uC785\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD574\\uB2F9 \\uAC04\\uC120\\uC5D0 \\uC5F0\\uACB0\\uB41C \\uC778\\uC811 \\uC815\\uC810\\uC758 \\uAC04\\uC120\\uB4E4 \\uC911, '\\uC5F0\\uACB0\\uB41C \\uB178\\uB4DC \\uC9D1\\uD569(\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"connected_nodes\"), \")' \\uC5D0 \\uC5C6\\uB294 \\uB178\\uB4DC\\uC640 \\uC5F0\\uACB0\\uB41C \\uAC04\\uC120\\uB4E4\\uB9CC \\uAC04\\uC120 \\uB9AC\\uC2A4\\uD2B8(\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"candidate_edge_list\"), \") \\uC5D0 \\uC0BD\\uC785 \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"'\\uC5F0\\uACB0\\uB41C \\uB178\\uB4DC \\uC9D1\\uD569(\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"connected_nodes\"), \")' \\uC5D0 \\uC788\\uB294 \\uB178\\uB4DC\\uC640 \\uC5F0\\uACB0\\uB41C \\uAC04\\uC120\\uB4E4\\uC744 \\uAC04\\uC120 \\uB9AC\\uC2A4\\uD2B8\\uC5D0 \\uC0BD\\uC785\\uD574\\uB3C4, \\uD574\\uB2F9 \\uAC04\\uC120\\uC740 \\uC2A4\\uD0B5\\uB420 \\uAC83\\uC774\\uAE30 \\uB54C\\uBB38\\uC784\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC5B4\\uCC28\\uD53C \\uC2A4\\uD0B5\\uB420 \\uAC04\\uC120\\uC744 \\uAC04\\uC120 \\uB9AC\\uC2A4\\uD2B8(\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"candidate_edge_list\"), \")\\uC5D0 \\uB123\\uC9C0 \\uC54A\\uC73C\\uBBC0\\uB85C \\uD574\\uC11C, \\uAC04\\uC120 \\uB9AC\\uC2A4\\uD2B8(\", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"candidate_edge_list\"), \")\\uC5D0\\uC11C \\uCD5C\\uC18C \\uAC00\\uC911\\uCE58\\uB97C \\uAC00\\uC9C0\\uB294 \\uAC04\\uC120\\uBD80\\uD130 \\uCD94\\uCD9C\\uD558\\uAE30 \\uC704\\uD55C \\uC790\\uB8CC\\uAD6C\\uC870 \\uC720\\uC9C0\\uB97C \\uC704\\uD55C effort\\uB97C \\uC904\\uC77C \\uC218 \\uC788\\uC74C (\\uC608, \\uCD5C\\uC18C\\uD799 \\uAD6C\\uC870 \\uC0AC\\uC6A9)\"))))))), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uC120\\uD0DD\\uB41C \\uAC04\\uC120\\uC740 \\uAC04\\uC120 \\uB9AC\\uC2A4\\uD2B8\\uC5D0\\uC11C \\uC81C\\uAC70\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uAC04\\uC120 \\uB9AC\\uC2A4\\uD2B8\\uC5D0 \\uB354 \\uC774\\uC0C1\\uC758 \\uAC04\\uC120\\uC774 \\uC5C6\\uC744 \\uB54C\\uAE4C\\uC9C0 3-4\\uBC88\\uC744 \\uBC18\\uBCF5\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"myedges = [\\n    (7, 'A', 'B'), (5, 'A', 'D'),\\n    (8, 'B', 'C'), (9, 'B', 'D'), (7, 'B', 'E'),\\n    (5, 'C', 'E'),\\n    (7, 'D', 'E'), (6, 'D', 'F'),\\n    (8, 'E', 'F'), (9, 'E', 'G'),\\n    (11, 'F', 'G')\\n]\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"from collections import defaultdict\\nfrom heapq import *\\n\\ndef prim(start_node, edges):\\n    mst = list()\\n    adjacent_edges = defaultdict(list)\\n    for weight, n1, n2 in edges:\\n        adjacent_edges[n1].append((weight, n1, n2))\\n        adjacent_edges[n2].append((weight, n2, n1))\\n\\n    connected_nodes = set(start_node)\\n    candidate_edge_list = adjacent_edges[start_node]\\n    heapify(candidate_edge_list)\\n    \\n    while candidate_edge_list:\\n        weight, n1, n2 = heappop(candidate_edge_list)\\n        if n2 not in connected_nodes:\\n            connected_nodes.add(n2)\\n            mst.append((weight, n1, n2))\\n            \\n            for edge in adjacent_edges[n2]:\\n                if edge[2] not in connected_nodes:\\n                    heappush(candidate_edge_list, edge)\\n\\n    return mst\\n\\nprim ('A', myedges)\\n\\n[(5, 'A', 'D'),\\n (6, 'D', 'F'),\\n (7, 'A', 'B'),\\n (7, 'B', 'E'),\\n (5, 'E', 'C'),\\n (9, 'E', 'G')]\\n\")), mdx(\"h3\", null, \"4. \\uC2DC\\uAC04 \\uBCF5\\uC7A1\\uB3C4\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uCD5C\\uC545\\uC758 \\uACBD\\uC6B0, while \\uAD6C\\uBB38\\uC5D0\\uC11C \\uBAA8\\uB4E0 \\uAC04\\uC120\\uC5D0 \\uB300\\uD574 \\uBC18\\uBCF5\\uD558\\uACE0, \\uCD5C\\uC18C \\uD799 \\uAD6C\\uC870\\uB97C \\uC0AC\\uC6A9\\uD558\\uBBC0\\uB85C O($ElogE$) \\uC2DC\\uAC04 \\uBCF5\\uC7A1\\uB3C4\\uB97C \\uAC00\\uC9D0\")), mdx(\"h3\", null, \"\\uCC38\\uACE0: \\uAC1C\\uC120\\uB41C \\uD504\\uB9BC \\uC54C\\uACE0\\uB9AC\\uC998\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAC04\\uC120\\uC774 \\uC544\\uB2CC \\uB178\\uB4DC\\uB97C \\uC911\\uC2EC\\uC73C\\uB85C \\uC6B0\\uC120\\uC21C\\uC704 \\uD050\\uB97C \\uC801\\uC6A9\\uD558\\uB294 \\uBC29\\uC2DD\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uCD08\\uAE30\\uD654 - \\uC815\\uC810:key \\uAD6C\\uC870\\uB97C \\uB9CC\\uB4E4\\uC5B4\\uB193\\uACE0, \\uD2B9\\uC815 \\uC815\\uC810\\uC758 key\\uAC12\\uC740 0, \\uC774\\uC678\\uC758 \\uC815\\uC810\\uB4E4\\uC758 key\\uAC12\\uC740 \\uBB34\\uD55C\\uB300\\uB85C \\uB193\\uC74C.  \\uBAA8\\uB4E0 \\uC815\\uC810:key \\uAC12\\uC740 \\uC6B0\\uC120\\uC21C\\uC704 \\uD050\\uC5D0 \\uB123\\uC74C\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAC00\\uC7A5 key\\uAC12\\uC774 \\uC801\\uC740 \\uC815\\uC810:key\\uB97C \\uCD94\\uCD9C\\uD55C \\uD6C4(pop \\uD558\\uBBC0\\uB85C \\uD574\\uB2F9 \\uC815\\uC810:key \\uC815\\uBCF4\\uB294 \\uC6B0\\uC120\\uC21C\\uC704 \\uD050\\uC5D0\\uC11C \\uC0AD\\uC81C\\uB428), (extract min \\uB85C\\uC9C1\\uC774\\uB77C\\uACE0 \\uBD80\\uB984)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD574\\uB2F9 \\uC815\\uC810\\uC758 \\uC778\\uC811\\uD55C \\uC815\\uC810\\uB4E4\\uC5D0 \\uB300\\uD574 key \\uAC12\\uACFC \\uC5F0\\uACB0\\uB41C \\uAC00\\uC911\\uCE58 \\uAC12\\uC744 \\uBE44\\uAD50\\uD558\\uC5EC key\\uAC12\\uC774 \\uC791\\uC73C\\uBA74 \\uD574\\uB2F9 \\uC815\\uC810:key \\uAC12\\uC744 \\uAC31\\uC2E0\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC815\\uC810:key \\uAC12 \\uAC31\\uC2E0\\uC2DC, \\uC6B0\\uC120\\uC21C\\uC704 \\uD050\\uB294 \\uCD5C\\uC18C key\\uAC12\\uC744 \\uAC00\\uC9C0\\uB294 \\uC815\\uC810:key \\uB97C \\uB8E8\\uD2B8\\uB178\\uB4DC\\uB85C \\uC62C\\uB824\\uB193\\uB3C4\\uB85D \\uC7AC\\uAD6C\\uC131\\uD568 (decrease key \\uB85C\\uC9C1\\uC774\\uB77C\\uACE0 \\uBD80\\uB984)\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAC1C\\uC120\\uB41C \\uD504\\uB9BC \\uC54C\\uACE0\\uB9AC\\uC998 \\uAD6C\\uD604\\uC2DC \\uACE0\\uB824 \\uC0AC\\uD56D\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC6B0\\uC120\\uC21C\\uC704 \\uD050(\\uCD5C\\uC18C\\uD799) \\uAD6C\\uC870\\uC5D0\\uC11C, \\uC774\\uBBF8 \\uB4E4\\uC5B4\\uAC00 \\uC788\\uB294 \\uB370\\uC774\\uD130\\uC758 \\uAC12 \\uBCC0\\uACBD\\uC2DC, \\uCD5C\\uC18C\\uAC12\\uC744 \\uAC00\\uC9C0\\uB294 \\uB370\\uC774\\uD130\\uB97C \\uB8E8\\uD2B8\\uB178\\uB4DC\\uB85C \\uC62C\\uB824\\uB193\\uB3C4\\uB85D \\uC7AC\\uAD6C\\uC131\\uD558\\uB294 \\uAE30\\uB2A5\\uC774 \\uD544\\uC694\\uD568\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAD6C\\uD604 \\uBCF5\\uC7A1\\uB3C4\\uB97C \\uC904\\uC774\\uAE30 \\uC704\\uD574, heapdict \\uB77C\\uC774\\uBE0C\\uB7EC\\uB9AC\\uB97C \\uD1B5\\uD574, \\uD574\\uB2F9 \\uAE30\\uB2A5\\uC744 \\uAC04\\uB2E8\\uD788 \\uAD6C\\uD604\")))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"from heapdict import heapdict\\n\\ndef prim(graph, start):\\n    mst, keys, pi, total_weight = list(), heapdict(), dict(), 0\\n    for node in graph.keys():\\n        keys[node] = float('inf')\\n        pi[node] = None\\n    keys[start], pi[start] = 0, start\\n\\n    while keys:\\n        current_node, current_key = keys.popitem()\\n        mst.append([pi[current_node], current_node, current_key])\\n        total_weight += current_key\\n        for adjacent, weight in mygraph[current_node].items():\\n            if adjacent in keys and weight < keys[adjacent]:\\n                keys[adjacent] = weight\\n                pi[adjacent] = current_node\\n    return mst, total_weight\\n\\nmygraph = {\\n    'A': {'B': 7, 'D': 5},\\n    'B': {'A': 7, 'D': 9, 'C': 8, 'E': 7},\\n    'C': {'B': 8, 'E': 5},\\n    'D': {'A': 5, 'B': 9, 'E': 7, 'F': 6},\\n    'E': {'B': 7, 'C': 5, 'D': 7, 'F': 8, 'G': 9},\\n    'F': {'D': 6, 'E': 8, 'G': 11},\\n    'G': {'E': 9, 'F': 11}    \\n}\\nmst, total_weight = prim(mygraph, 'A')\\nprint ('MST:', mst)\\nprint ('Total Weight:', total_weight)\\n\\nMST: [['A', 'A', 0], ['A', 'D', 5], ['D', 'F', 6], ['A', 'B', 7], ['D', 'E', 7], ['E', 'C', 5], ['E', 'G', 9]]\\nTotal Weight: 39\\n\")), mdx(\"h3\", null, \"\\uAC1C\\uC120\\uB41C \\uD504\\uB9BC \\uC54C\\uACE0\\uB9AC\\uC998\\uC758 \\uC2DC\\uAC04 \\uBCF5\\uC7A1\\uB3C4: $ O(ElogV) $\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uCD5C\\uCD08 key \\uC0DD\\uC131 \\uC2DC\\uAC04 \\uBCF5\\uC7A1\\uB3C4: $ O(V) $\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"while \\uAD6C\\uBB38\\uACFC keys.popitem() \\uC758 \\uC2DC\\uAC04 \\uBCF5\\uC7A1\\uB3C4\\uB294 $ O(VlogV) $\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"while \\uAD6C\\uBB38\\uC740 V(\\uB178\\uB4DC \\uAC2F\\uC218) \\uBC88 \\uC2E4\\uD589\\uB428\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"heap \\uC5D0\\uC11C \\uCD5C\\uC18C key \\uAC12\\uC744 \\uAC00\\uC9C0\\uB294 \\uB178\\uB4DC \\uC815\\uBCF4 \\uCD94\\uCD9C \\uC2DC(pop)\\uC758 \\uC2DC\\uAC04 \\uBCF5\\uC7A1\\uB3C4: $ O(logV) $\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"for \\uAD6C\\uBB38\\uC758 \\uCD1D \\uC2DC\\uAC04 \\uBCF5\\uC7A1\\uB3C4\\uB294 $ O(ElogV) $\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"for \\uAD6C\\uBB38\\uC740 while \\uAD6C\\uBB38 \\uBC18\\uBCF5\\uC2DC\\uC5D0 \\uACB0\\uACFC\\uC801\\uC73C\\uB85C \\uCD1D \\uCD5C\\uB300 \\uAC04\\uC120\\uC758 \\uC218 E\\uB9CC\\uD07C \\uC2E4\\uD589 \\uAC00\\uB2A5 $ O(E) $\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"for \\uAD6C\\uBB38 \\uC548\\uC5D0\\uC11C key\\uAC12 \\uBCC0\\uACBD\\uC2DC\\uB9C8\\uB2E4 heap \\uAD6C\\uC870\\uB97C \\uBCC0\\uACBD\\uD574\\uC57C \\uD558\\uBA70, heap \\uC5D0\\uB294 \\uCD5C\\uB300 V \\uAC1C\\uC758 \\uC815\\uBCF4\\uAC00 \\uC788\\uC73C\\uBBC0\\uB85C $ O(logV) $\", mdx(\"blockquote\", {\n    parentName: \"li\"\n  }, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uC77C\\uBC18\\uC801\\uC778 heap \\uC790\\uB8CC \\uAD6C\\uC870 \\uC790\\uCCB4\\uC5D0\\uB294 \\uBCF8\\uB798 heap \\uB0B4\\uBD80\\uC758 \\uB370\\uC774\\uD130 \\uC6B0\\uC120\\uC21C\\uC704 \\uBCC0\\uACBD\\uC2DC, \\uCD5C\\uC18C \\uC6B0\\uC120\\uC21C\\uC704 \\uB370\\uC774\\uD130\\uB97C \\uB8E8\\uD2B8\\uB178\\uB4DC\\uB85C \\uB9CC\\uB4E4\\uC5B4\\uC8FC\\uB294 \\uB85C\\uC9C1\\uC740 \\uC5C6\\uC74C. \\uC774\\uB97C decrease key \\uB85C\\uC9C1\\uC774\\uB77C\\uACE0 \\uBD80\\uB984, \\uD574\\uB2F9 \\uB85C\\uC9C1\\uC740 heapdict \\uB77C\\uC774\\uBE0C\\uB7EC\\uB9AC\\uB97C \\uD65C\\uC6A9\\uD574\\uC11C \\uAC04\\uB2E8\\uD788 \\uC801\\uC6A9\\uAC00\\uB2A5\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB530\\uB77C\\uC11C \\uCD1D \\uC2DC\\uAC04 \\uBCF5\\uC7A1\\uB3C4\\uB294 $ O(V + VlogV + ElogV) $ \\uC774\\uBA70,\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"O(V)\\uB294 \\uC804\\uCCB4 \\uC2DC\\uAC04 \\uBCF5\\uC7A1\\uB3C4\\uC5D0 \\uD070 \\uC601\\uD5A5\\uC744 \\uBBF8\\uCE58\\uC9C0 \\uC54A\\uC73C\\uBBC0\\uB85C \\uC0AD\\uC81C,\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"E > V \\uC774\\uBBC0\\uB85C (\\uCD5C\\uB300 $ V^2 = E $ \\uAC00 \\uB420 \\uC218 \\uC788\\uC74C), $ O((V + E)logV) $ \\uB294 \\uAC04\\uB2E8\\uD558\\uAC8C $ O(ElogV) $ \\uB85C \\uB098\\uD0C0\\uB0BC \\uC218 \\uC788\\uC74C\")))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#최소-신장-트리의-이해","title":"최소 신장 트리의 이해","items":[{"url":"#1-신장-트리-란","title":"1. 신장 트리 란?"},{"url":"#2-최소-신장-트리","title":"2. 최소 신장 트리"},{"url":"#3-최소-신장-트리-알고리즘","title":"3. 최소 신장 트리 알고리즘"},{"url":"#4-크루스칼-알고리즘-kruskals-algorithm","title":"4. 크루스칼 알고리즘 (Kruskal's algorithm)"},{"url":"#5-union-find-알고리즘","title":"5. Union-Find 알고리즘"},{"url":"#union-find-알고리즘의-고려할-점","title":"Union-Find 알고리즘의 고려할 점"},{"url":"#union-by-rank-기법","title":"union-by-rank 기법"},{"url":"#path-compression","title":"path compression"},{"url":"#6-크루스칼-알고리즘-kruskals-algorithm-코드-작성","title":"6. 크루스칼 알고리즘 (Kruskal's algorithm) 코드 작성"},{"url":"#7-시간-복잡도","title":"7. 시간 복잡도"}]},{"url":"#최소-신장-트리2","title":"최소 신장 트리2","items":[{"url":"#1-프림-알고리즘-prims-algorithm","title":"1. 프림 알고리즘 (Prim's algorithm)"},{"url":"#2-그림으로-이해하는-프림-알고리즘","title":"2. 그림으로 이해하는 프림 알고리즘"},{"url":"#3-프림-알고리즘-prims-algorithm-코드-작성","title":"3. 프림 알고리즘 (Prim's algorithm) 코드 작성"},{"url":"#참고-heapq-라이브러리-활용을-통해-우선순위-큐-사용하기","title":"참고: heapq 라이브러리 활용을 통해 우선순위 큐 사용하기"},{"url":"#참고-collections-라이브러리의-defaultdict-함수-활용하기","title":"참고: collections 라이브러리의 defaultdict 함수 활용하기"},{"url":"#프림-알고리즘-파이썬-코드","title":"프림 알고리즘 파이썬 코드"},{"url":"#4-시간-복잡도","title":"4. 시간 복잡도"},{"url":"#참고-개선된-프림-알고리즘","title":"참고: 개선된 프림 알고리즘"},{"url":"#개선된-프림-알고리즘의-시간-복잡도--oelogv-","title":"개선된 프림 알고리즘의 시간 복잡도: $ O(ElogV) $"}]}]},"parent":{"relativePath":"datastructure&algorithm/25.MinimumSpanningTree.md"},"frontmatter":{"metaTitle":"최소 신장 트리(Minimum Spanning Tree)","metaDescription":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/framework/prisma","title":"Prisma"}}},{"node":{"fields":{"slug":"/datastructure&algorithm","title":"자료구조 & 알고리즘"}}},{"node":{"fields":{"slug":"/framework","title":"프레임워크"}}},{"node":{"fields":{"slug":"/","title":"SuHyeon's TechBlog"}}},{"node":{"fields":{"slug":"/language","title":"언어"}}},{"node":{"fields":{"slug":"/infra","title":"인프라"}}},{"node":{"fields":{"slug":"/library","title":"라이브러리"}}},{"node":{"fields":{"slug":"/library/graphql","title":"GraphQL"}}},{"node":{"fields":{"slug":"/language/typescript","title":"Typescript"}}},{"node":{"fields":{"slug":"/library/nexusjs","title":"Nexus.JS"}}},{"node":{"fields":{"slug":"/library/graphql/ApolloGraphQLserver","title":"ApolloGraphQLserver"}}},{"node":{"fields":{"slug":"/library/graphql/graphql","title":"GraphQL"}}},{"node":{"fields":{"slug":"/framework/NextJs","title":"Next Js"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/5.linkedlist","title":"링크드리스트(LinkedList)"}}},{"node":{"fields":{"slug":"/framework/prisma/NoticePrisma","title":"Notice Prisma"}}},{"node":{"fields":{"slug":"/framework/prisma/prisma2","title":"Prisma 2"}}},{"node":{"fields":{"slug":"/infra/2.aws","title":"aws"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-Basic","title":"AWS-Basic"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-S3","title":"AWS-S3"}}},{"node":{"fields":{"slug":"/infra/3.docker/docker","title":"Docker"}}},{"node":{"fields":{"slug":"/infra/3.docker","title":"Docker"}}},{"node":{"fields":{"slug":"/infra/3.docker/dockerbasic","title":"Docker Basic"}}},{"node":{"fields":{"slug":"/infra/1.BasicTheory","title":"Basic Theory"}}},{"node":{"fields":{"slug":"/testframework","title":"테스트 프레임워크"}}},{"node":{"fields":{"slug":"/testframework/1.mocha","title":"Mocha"}}},{"node":{"fields":{"slug":"/infra/3.docker/dockerawsdeploy","title":"Docker AWS EC2 Deploy"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-EC2","title":"AWS-EC2"}}},{"node":{"fields":{"slug":"/language/javascript","title":"Javascript"}}},{"node":{"fields":{"slug":"/language/javascript/class","title":"Class"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-Route53","title":"AWS-Route 53"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-RDS","title":"AWS-RDS"}}},{"node":{"fields":{"slug":"/git","title":"깃 허브"}}},{"node":{"fields":{"slug":"/git/gitforksync","title":"git fork & sync"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/1.datastructure&algorithm-tutorial","title":"자료구조 & 알고리즘 튜토리얼(Datastructure & Algorithm Tutorial"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/2.array","title":"배열(Array)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/3.queue","title":"큐(Queue)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/4.stack","title":"스택(Stack)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/6.TimeComplexity","title":"시간 복잡도(Time Complexity)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/7.HashTable","title":"해쉬 테이블(HashTable)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/8.Tree","title":"트리(Tree)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/9.Heap","title":"힙(Heap)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/10.SpaceComplexity","title":"공간 복잡도(Space Complexity)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/11.BubbleSort","title":"버블 정렬(Bubble Sort)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/12.InsertionSort","title":"삽입 정렬(Insertion Sort)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/13.SelectionSort","title":"선택 정렬(Selection Sort)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/14.RecursiveCall","title":"재귀 용법(Recursive Call)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/15.DynamicProgramming","title":"동적 계획법과 분할 정복(Dynamic Programming & Divide and conquer"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/16.QuickSort","title":"퀵 정렬(Quick Sort)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/17.MergeSort","title":"병렬 정렬(Merge Sort)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/18.SequentialSearch","title":"순차 탐색(Sequential Search)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/19.BinarySearch","title":"탐색 알고리즘(Binary Search)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/20.Graph","title":"그래프(Graph)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/21.Depth-FirstSearch","title":"깊이 우선 탐색(Depth-FirstSearch)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/22.Breadth-FirstSearch","title":"너비 우선 탐색(Breadth-FirstSearch)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/23.GreedyAlgorithm","title":"탐욕 알고리즘(Greedy Algorithm)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/24.DijkstraAlgorithm","title":"다익스트라 알고리즘(Dijkstra Algorithm)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/25.MinimumSpanningTree","title":"최소 신장 트리(Minimum Spanning Tree)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/26.BackTracking","title":"백트래킹(BackTracking)"}}},{"node":{"fields":{"slug":"/git/basic-git-command","title":"Basic git command"}}},{"node":{"fields":{"slug":"/git/changing-default-branch","title":"Changing the Default Branch"}}},{"node":{"fields":{"slug":"/git/configuring-protected-branches","title":"Configure Branch Protection Rule"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"3f5b01c8-0b4f-5cf8-8a52-43f0dfa252a3"}}}