{"componentChunkName":"component---src-templates-docs-js","path":"/datastructure&algorithm/8.Tree","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Gitbook Boilerplate | Hasura","docsLocation":"https://github.com/hasura/gatsby-gitbook-boilerplate/tree/master/content"}},"mdx":{"fields":{"id":"1f1ff196-a018-5783-8bdc-993829187152","title":"트리(Tree)","slug":"/datastructure&algorithm/8.Tree"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"트리(Tree)\",\n  \"metaTitle\": \"트리(Tree)\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", null, \"1. \\uD2B8\\uB9AC (Tree) \\uAD6C\\uC870\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD2B8\\uB9AC: Node\\uC640 Branch\\uB97C \\uC774\\uC6A9\\uD574\\uC11C, \\uC0AC\\uC774\\uD074\\uC744 \\uC774\\uB8E8\\uC9C0 \\uC54A\\uB3C4\\uB85D \\uAD6C\\uC131\\uD55C \\uB370\\uC774\\uD130 \\uAD6C\\uC870\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC2E4\\uC81C\\uB85C \\uC5B4\\uB514\\uC5D0 \\uB9CE\\uC774 \\uC0AC\\uC6A9\\uB418\\uB098? \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD2B8\\uB9AC \\uC911 \\uC774\\uC9C4 \\uD2B8\\uB9AC (Binary Tree) \\uD615\\uD0DC\\uC758 \\uAD6C\\uC870\\uB85C, \\uD0D0\\uC0C9(\\uAC80\\uC0C9) \\uC54C\\uACE0\\uB9AC\\uC998 \\uAD6C\\uD604\\uC744 \\uC704\\uD574 \\uB9CE\\uC774 \\uC0AC\\uC6A9\\uB428\")))), mdx(\"h3\", null, \"2. \\uC54C\\uC544\\uB458 \\uC6A9\\uC5B4\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Node: \\uD2B8\\uB9AC\\uC5D0\\uC11C \\uB370\\uC774\\uD130\\uB97C \\uC800\\uC7A5\\uD558\\uB294 \\uAE30\\uBCF8 \\uC694\\uC18C (\\uB370\\uC774\\uD130\\uC640 \\uB2E4\\uB978 \\uC5F0\\uACB0\\uB41C \\uB178\\uB4DC\\uC5D0 \\uB300\\uD55C Branch \\uC815\\uBCF4 \\uD3EC\\uD568)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Root Node: \\uD2B8\\uB9AC \\uB9E8 \\uC704\\uC5D0 \\uC788\\uB294 \\uB178\\uB4DC\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Level: \\uCD5C\\uC0C1\\uC704 \\uB178\\uB4DC\\uB97C Level 0\\uC73C\\uB85C \\uD558\\uC600\\uC744 \\uB54C, \\uD558\\uC704 Branch\\uB85C \\uC5F0\\uACB0\\uB41C \\uB178\\uB4DC\\uC758 \\uAE4A\\uC774\\uB97C \\uB098\\uD0C0\\uB0C4\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Parent Node: \\uC5B4\\uB5A4 \\uB178\\uB4DC\\uC758 \\uB2E4\\uC74C \\uB808\\uBCA8\\uC5D0 \\uC5F0\\uACB0\\uB41C \\uB178\\uB4DC\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Child Node: \\uC5B4\\uB5A4 \\uB178\\uB4DC\\uC758 \\uC0C1\\uC704 \\uB808\\uBCA8\\uC5D0 \\uC5F0\\uACB0\\uB41C \\uB178\\uB4DC\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Leaf Node (Terminal Node): Child Node\\uAC00 \\uD558\\uB098\\uB3C4 \\uC5C6\\uB294 \\uB178\\uB4DC\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Sibling (Brother Node): \\uB3D9\\uC77C\\uD55C Parent Node\\uB97C \\uAC00\\uC9C4 \\uB178\\uB4DC\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Depth: \\uD2B8\\uB9AC\\uC5D0\\uC11C Node\\uAC00 \\uAC00\\uC9C8 \\uC218 \\uC788\\uB294 \\uCD5C\\uB300 Level\\n\", mdx(\"img\", _extends({\n    parentName: \"li\"\n  }, {\n    \"src\": \"http://www.fun-coding.org/00_Images/tree.png\",\n    \"alt\": \"cdsc\"\n  })))), mdx(\"h3\", null, \"3. \\uC774\\uC9C4 \\uD2B8\\uB9AC\\uC640 \\uC774\\uC9C4 \\uD0D0\\uC0C9 \\uD2B8\\uB9AC (Binary Search Tree)\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774\\uC9C4 \\uD2B8\\uB9AC: \\uB178\\uB4DC\\uC758 \\uCD5C\\uB300 Branch\\uAC00 2\\uC778 \\uD2B8\\uB9AC\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774\\uC9C4 \\uD0D0\\uC0C9 \\uD2B8\\uB9AC (Binary Search Tree, BST): \\uC774\\uC9C4 \\uD2B8\\uB9AC\\uC5D0 \\uB2E4\\uC74C\\uACFC \\uAC19\\uC740 \\uCD94\\uAC00\\uC801\\uC778 \\uC870\\uAC74\\uC774 \\uC788\\uB294 \\uD2B8\\uB9AC\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC67C\\uCABD \\uB178\\uB4DC\\uB294 \\uD574\\uB2F9 \\uB178\\uB4DC\\uBCF4\\uB2E4 \\uC791\\uC740 \\uAC12, \\uC624\\uB978\\uCABD \\uB178\\uB4DC\\uB294 \\uD574\\uB2F9 \\uB178\\uB4DC\\uBCF4\\uB2E4 \\uD070 \\uAC12\\uC744 \\uAC00\\uC9C0\\uACE0 \\uC788\\uC74C!\")))), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://www.mathwarehouse.com/programming/images/binary-search-tree/binary-search-tree-insertion-animation.gif\",\n    \"alt\": \"ddd\"\n  })), \"  \"), mdx(\"h3\", null, \"4. \\uC790\\uB8CC \\uAD6C\\uC870 \\uC774\\uC9C4 \\uD0D0\\uC0C9 \\uD2B8\\uB9AC\\uC758 \\uC7A5\\uC810\\uACFC \\uC8FC\\uC694 \\uC6A9\\uB3C4\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC8FC\\uC694 \\uC6A9\\uB3C4: \\uB370\\uC774\\uD130 \\uAC80\\uC0C9(\\uD0D0\\uC0C9) \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC7A5\\uC810: \\uD0D0\\uC0C9 \\uC18D\\uB3C4\\uB97C \\uAC1C\\uC120\\uD560 \\uC218 \\uC788\\uC74C\")), mdx(\"blockquote\", null, mdx(\"p\", {\n    parentName: \"blockquote\"\n  }, \"\\uB2E8\\uC810\\uC740 \\uC774\\uC9C4 \\uD0D0\\uC0C9 \\uD2B8\\uB9AC \\uC54C\\uACE0\\uB9AC\\uC998 \\uC774\\uD574 \\uD6C4\\uC5D0 \\uC0B4\\uD3B4\\uBCF4\\uAE30\\uB85C \\uD568\")), mdx(\"h3\", null, \"\\uC774\\uC9C4\\uD2B8\\uB9AC\\uC640 \\uC815\\uB82C\\uB41C \\uBC30\\uC5F4\\uAC04\\uC758 \\uD0D0\\uC0C9 \\uBE44\\uAD50\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"https://www.mathwarehouse.com/programming/images/binary-search-tree/binary-search-tree-sorted-array-animation.gif\",\n    \"alt\": \"cds\"\n  })), \"  \"), mdx(\"h3\", null, \"5. \\uD30C\\uC774\\uC36C \\uAC1D\\uCCB4\\uC9C0\\uD5A5 \\uD504\\uB85C\\uADF8\\uB798\\uBC0D\\uC73C\\uB85C \\uB9C1\\uD06C\\uB4DC \\uB9AC\\uC2A4\\uD2B8 \\uAD6C\\uD604\\uD558\\uAE30\"), mdx(\"h4\", null, \"5.1. \\uB178\\uB4DC \\uD074\\uB798\\uC2A4 \\uB9CC\\uB4E4\\uAE30\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"class Node:\\n    def __init__(self, value):\\n        self.value = value\\n        self.left = None\\n        self.right = None\\n\")), mdx(\"h4\", null, \"5.2. \\uC774\\uC9C4 \\uD0D0\\uC0C9 \\uD2B8\\uB9AC\\uC5D0 \\uB370\\uC774\\uD130 \\uB123\\uAE30\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774\\uC9C4 \\uD0D0\\uC0C9 \\uD2B8\\uB9AC \\uC870\\uAC74\\uC5D0 \\uBD80\\uD569\\uD558\\uAC8C \\uB370\\uC774\\uD130\\uB97C \\uB123\\uC5B4\\uC57C \\uD568\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"class NodeMgmt:\\n    def __init__(self, head):\\n        self.head = head\\n    \\n    def insert(self, value):\\n        self.current_node = self.head\\n        while True:\\n            if value < self.current_node.value:\\n                if self.current_node.left != None:\\n                    self.current_node = self.current_node.left\\n                else:\\n                    self.current_node.left = Node(value)\\n                    break\\n            else:\\n                if self.current_node.right != None:\\n                    self.current_node = self.current_node.right\\n                else:\\n                    self.current_node.right = Node(value)\\n                    break\\n\\nhead = Node(1)\\nBST = NodeMgmt(head)\\nBST.insert(2)\\n\\n\\n\")), mdx(\"h4\", null, \"5.3. \\uC774\\uC9C4 \\uD0D0\\uC0C9 \\uD2B8\\uB9AC \\uD0D0\\uC0C9\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"class NodeMgmt:\\n    def __init__(self, head):\\n        self.head = head\\n    \\n    def insert(self, value):\\n        self.current_node = self.head\\n        while True:\\n            if value < self.current_node.value:\\n                if self.current_node.left != None:\\n                    self.current_node = self.current_node.left\\n                else:\\n                    self.current_node.left = Node(value)\\n                    break\\n            else:\\n                if self.current_node.right != None:\\n                    self.current_node = self.current_node.right\\n                else:\\n                    self.current_node.right = Node(value)\\n                    break\\n    \\n    def search(self, value):\\n        self.current_node = self.head\\n        while self.current_node:\\n            if self.current_node.value == value:\\n                return True\\n            elif value < self.current_node.value:\\n                self.current_node = self.current_node.left\\n            else:\\n                self.current_node = self.current_node.right\\n        return False        \\n\\nhead = Node(1)\\nBST = NodeMgmt(head)\\nBST.insert(2)\\nBST.insert(3)\\nBST.insert(0)\\nBST.insert(4)\\nBST.insert(8)\\n\\nBST.search(-1)\\n\")), mdx(\"h4\", null, \"5.4. \\uC774\\uC9C4 \\uD0D0\\uC0C9 \\uD2B8\\uB9AC \\uC0AD\\uC81C\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB9E4\\uC6B0 \\uBCF5\\uC7A1\\uD568. \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"\\uACBD\\uC6B0\\uB97C \\uB098\\uB204\\uC5B4\\uC11C \\uC774\\uD574\\uD558\\uB294 \\uAC83\\uC774 \\uC88B\\uC74C\"))), mdx(\"h4\", null, \"5.4.1. Leaf Node \\uC0AD\\uC81C\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Leaf Node: Child Node \\uAC00 \\uC5C6\\uB294 Node\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC0AD\\uC81C\\uD560 Node\\uC758 Parent Node\\uAC00 \\uC0AD\\uC81C\\uD560 Node\\uB97C \\uAC00\\uB9AC\\uD0A4\\uC9C0 \\uC54A\\uB3C4\\uB85D \\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"li\"\n  }), mdx(\"img\", _extends({\n    parentName: \"li\"\n  }, {\n    \"src\": \"http://www.fun-coding.org/00_Images/tree_remove_leaf.png\",\n    \"alt\": \"sdc\"\n  })))), mdx(\"h4\", null, \"5.4.2. Child Node \\uAC00 \\uD558\\uB098\\uC778 Node \\uC0AD\\uC81C\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC0AD\\uC81C\\uD560 Node\\uC758 Parent Node\\uAC00 \\uC0AD\\uC81C\\uD560 Node\\uC758 Child Node\\uB97C \\uAC00\\uB9AC\\uD0A4\\uB3C4\\uB85D \\uD55C\\uB2E4.\\n\", mdx(\"img\", _extends({\n    parentName: \"li\"\n  }, {\n    \"src\": \"http://www.fun-coding.org/00_Images/tree_remove_1child.png\",\n    \"alt\": \"dsc\"\n  })), \"  \")), mdx(\"h4\", null, \"5.4.3. Child Node \\uAC00 \\uB450 \\uAC1C\\uC778 Node \\uC0AD\\uC81C\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"\\uC0AD\\uC81C\\uD560 Node\\uC758 \\uC624\\uB978\\uCABD \\uC790\\uC2DD \\uC911, \\uAC00\\uC7A5 \\uC791\\uC740 \\uAC12\\uC744 \\uC0AD\\uC81C\\uD560 Node\\uC758 Parent Node\\uAC00 \\uAC00\\uB9AC\\uD0A4\\uB3C4\\uB85D \\uD55C\\uB2E4.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uC0AD\\uC81C\\uD560 Node\\uC758 \\uC67C\\uCABD \\uC790\\uC2DD \\uC911, \\uAC00\\uC7A5 \\uD070 \\uAC12\\uC744 \\uC0AD\\uC81C\\uD560 Node\\uC758 Parent Node\\uAC00 \\uAC00\\uB9AC\\uD0A4\\uB3C4\\uB85D \\uD55C\\uB2E4.\\n\", mdx(\"img\", _extends({\n    parentName: \"li\"\n  }, {\n    \"src\": \"http://www.fun-coding.org/00_Images/tree_remove_2child.png\",\n    \"alt\": \"sdcs\"\n  })), \"  \")), mdx(\"h5\", null, \"5.4.3.1. \\uC0AD\\uC81C\\uD560 Node\\uC758 \\uC624\\uB978\\uCABD \\uC790\\uC2DD\\uC911, \\uAC00\\uC7A5 \\uC791\\uC740 \\uAC12\\uC744 \\uC0AD\\uC81C\\uD560 Node\\uC758 Parent Node\\uAC00 \\uAC00\\uB9AC\\uD0A4\\uAC8C \\uD560 \\uACBD\\uC6B0\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC0AD\\uC81C\\uD560 Node\\uC758 \\uC624\\uB978\\uCABD \\uC790\\uC2DD \\uC120\\uD0DD\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC624\\uB978\\uCABD \\uC790\\uC2DD\\uC758 \\uAC00\\uC7A5 \\uC67C\\uCABD\\uC5D0 \\uC788\\uB294 Node\\uB97C \\uC120\\uD0DD\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD574\\uB2F9 Node\\uB97C \\uC0AD\\uC81C\\uD560 Node\\uC758 Parent Node\\uC758 \\uC67C\\uCABD Branch\\uAC00 \\uAC00\\uB9AC\\uD0A4\\uAC8C \\uD568\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD574\\uB2F9 Node\\uC758 \\uC67C\\uCABD Branch\\uAC00 \\uC0AD\\uC81C\\uD560 Node\\uC758 \\uC67C\\uCABD Child Node\\uB97C \\uAC00\\uB9AC\\uD0A4\\uAC8C \\uD568\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD574\\uB2F9 Node\\uC758 \\uC624\\uB978\\uCABD Branch\\uAC00 \\uC0AD\\uC81C\\uD560 Node\\uC758 \\uC624\\uB978\\uCABD Child Node\\uB97C \\uAC00\\uB9AC\\uD0A4\\uAC8C \\uD568\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB9CC\\uC57D \\uD574\\uB2F9 Node\\uAC00 \\uC624\\uB978\\uCABD Child Node\\uB97C \\uAC00\\uC9C0\\uACE0 \\uC788\\uC5C8\\uC744 \\uACBD\\uC6B0\\uC5D0\\uB294, \\uD574\\uB2F9 Node\\uC758 \\uBCF8\\uB798 Parent Node\\uC758 \\uC67C\\uCABD Branch\\uAC00 \\uD574\\uB2F9 \\uC624\\uB978\\uCABD Child Node\\uB97C \\uAC00\\uB9AC\\uD0A4\\uAC8C \\uD568\")), mdx(\"h3\", null, \"5.5. \\uC774\\uC9C4 \\uD0D0\\uC0C9 \\uD2B8\\uB9AC \\uC0AD\\uC81C \\uCF54\\uB4DC \\uAD6C\\uD604\\uACFC \\uBD84\\uC11D\"), mdx(\"h4\", null, \"5.5.1 \\uC0AD\\uC81C\\uD560 Node \\uD0D0\\uC0C9\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC0AD\\uC81C\\uD560 Node\\uAC00 \\uC5C6\\uB294 \\uACBD\\uC6B0\\uB3C4 \\uCC98\\uB9AC\\uD574\\uC57C \\uD568\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774\\uB97C \\uC704\\uD574 \\uC0AD\\uC81C\\uD560 Node\\uAC00 \\uC5C6\\uB294 \\uACBD\\uC6B0\\uB294 False\\uB97C \\uB9AC\\uD134\\uD558\\uACE0, \\uD568\\uC218\\uB97C \\uC885\\uB8CC \\uC2DC\\uD0B4\")))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"# def delete(self, value):\\n    searched = False\\n    self.current_node = self.head\\n    self.parent = self.head\\n    while self.current_node:\\n        if self.current_node.value == value:\\n            searched = True\\n            break\\n        elif value < self.current_node.value:\\n            self.parent = self.current_node\\n            self.current_node = self.current_node.left\\n        else:\\n            self.parent = self.current_node\\n            self.current_node = self.current_node.right\\n    \\n    if searched == False:\\n        return False\\n    \\n    ### \\uC774\\uD6C4\\uBD80\\uD130 Case\\uB4E4\\uC744 \\uBD84\\uB9AC\\uD574\\uC11C, \\uCF54\\uB4DC \\uC791\\uC131\\n\")), mdx(\"h4\", null, \"5.5.2. Case2: \\uC0AD\\uC81C\\uD560 Node\\uAC00 Child Node\\uB97C \\uD55C \\uAC1C \\uAC00\\uC9C0\\uACE0 \\uC788\\uC744 \\uACBD\\uC6B0\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"http://www.fun-coding.org/00_Images/tree_remove_1child_code.png\",\n    \"alt\": \"cds\"\n  })), \"  \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"    if self.current_node.left != None and self.current_node.right == None:\\n        if value < self.parent.value:\\n            self.parent.left = self.current_node.left\\n        else:\\n            self.parent.right = self.current_node.left\\n    elif self.current_node.left == None and self.current_node.right != None:\\n        if value < self.parent.value:\\n            self.parent.left = self.current_node.right\\n        else:\\n            self.parent.right = self.current_node.right\\n\")), mdx(\"h4\", null, \"5.5.3. Case3-1: \\uC0AD\\uC81C\\uD560 Node\\uAC00 Child Node\\uB97C \\uB450 \\uAC1C \\uAC00\\uC9C0\\uACE0 \\uC788\\uC744 \\uACBD\\uC6B0 (\\uC0AD\\uC81C\\uD560 Node\\uAC00 Parent Node \\uC67C\\uCABD\\uC5D0 \\uC788\\uC744 \\uB54C)\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAE30\\uBCF8 \\uC0AC\\uC6A9 \\uAC00\\uB2A5 \\uC804\\uB7B5\", mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"\\uC0AD\\uC81C\\uD560 Node\\uC758 \\uC624\\uB978\\uCABD \\uC790\\uC2DD \\uC911, \\uAC00\\uC7A5 \\uC791\\uC740 \\uAC12\\uC744 \\uC0AD\\uC81C\\uD560 Node\\uC758 Parent Node\\uAC00 \\uAC00\\uB9AC\\uD0A4\\uB3C4\\uB85D \\uD55C\\uB2E4.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uC0AD\\uC81C\\uD560 Node\\uC758 \\uC67C\\uCABD \\uC790\\uC2DD \\uC911, \\uAC00\\uC7A5 \\uD070 \\uAC12\\uC744 \\uC0AD\\uC81C\\uD560 Node\\uC758 Parent Node\\uAC00 \\uAC00\\uB9AC\\uD0A4\\uB3C4\\uB85D \\uD55C\\uB2E4.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAE30\\uBCF8 \\uC0AC\\uC6A9 \\uAC00\\uB2A5 \\uC804\\uB7B5 \\uC911, 1\\uBC88 \\uC804\\uB7B5\\uC744 \\uC0AC\\uC6A9\\uD558\\uC5EC \\uCF54\\uB4DC\\uB97C \\uAD6C\\uD604\\uD558\\uAE30\\uB85C \\uD568\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uACBD\\uC6B0\\uC758 \\uC218\\uAC00 \\uB610\\uB2E4\\uC2DC \\uB450\\uAC00\\uC9C0\\uAC00 \\uC788\\uC74C\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Case3-1-1:\"), \" \\uC0AD\\uC81C\\uD560 Node\\uAC00 Parent Node\\uC758 \\uC67C\\uCABD\\uC5D0 \\uC788\\uACE0, \\uC0AD\\uC81C\\uD560 Node\\uC758 \\uC624\\uB978\\uCABD \\uC790\\uC2DD \\uC911, \\uAC00\\uC7A5 \\uC791\\uC740 \\uAC12\\uC744 \\uAC00\\uC9C4 Node\\uC758 Child Node\\uAC00 \\uC5C6\\uC744 \\uB54C\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Case3-1-2:\"), \" \\uC0AD\\uC81C\\uD560 Node\\uAC00 Parent Node\\uC758 \\uC67C\\uCABD\\uC5D0 \\uC788\\uACE0, \\uC0AD\\uC81C\\uD560 Node\\uC758 \\uC624\\uB978\\uCABD \\uC790\\uC2DD \\uC911, \\uAC00\\uC7A5 \\uC791\\uC740 \\uAC12\\uC744 \\uAC00\\uC9C4 Node\\uC758 \\uC624\\uB978\\uCABD\\uC5D0 Child Node\\uAC00 \\uC788\\uC744 \\uB54C\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAC00\\uC7A5 \\uC791\\uC740 \\uAC12\\uC744 \\uAC00\\uC9C4 Node\\uC758 Child Node\\uAC00 \\uC67C\\uCABD\\uC5D0 \\uC788\\uC744 \\uACBD\\uC6B0\\uB294 \\uC5C6\\uC74C, \\uC65C\\uB0D0\\uD558\\uBA74 \\uC67C\\uCABD Node\\uAC00 \\uC788\\uB2E4\\uB294 \\uAC83\\uC740 \\uD574\\uB2F9 Node\\uBCF4\\uB2E4 \\uB354 \\uC791\\uC740 \\uAC12\\uC744 \\uAC00\\uC9C4 Node\\uAC00 \\uC788\\uB2E4\\uB294 \\uB73B\\uC774\\uAE30 \\uB54C\\uBB38\\uC784\")))))))), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"http://www.fun-coding.org/00_Images/tree_remove_2child_code_left.png\",\n    \"alt\": \"dsc\"\n  })), \"  \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"    if self.current_node.left != None and self.current_node.right != None: # case3\\n        if value < self.parent.value: # case3-1\\n            self.change_node = self.current_node.right\\n            self.change_node_parent = self.current_node.right\\n            while self.change_node.left != None:\\n                self.change_node_parent = self.change_node\\n                self.change_node = self.change_node.left\\n            if self.change_node.right != None:\\n                self.change_node_parent.left = self.change_node.right\\n            else:\\n                self.change_node_parent.left = None\\n            self.parent.left = self.change_node\\n            self.change_node.right = self.current_node.right\\n            self.change_node.left = self.change_node.left\\n\")), mdx(\"h4\", null, \"5.5.4. Case3-2: \\uC0AD\\uC81C\\uD560 Node\\uAC00 Child Node\\uB97C \\uB450 \\uAC1C \\uAC00\\uC9C0\\uACE0 \\uC788\\uC744 \\uACBD\\uC6B0 (\\uC0AD\\uC81C\\uD560 Node\\uAC00 Parent Node \\uC624\\uB978\\uCABD\\uC5D0 \\uC788\\uC744 \\uB54C)\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAE30\\uBCF8 \\uC0AC\\uC6A9 \\uAC00\\uB2A5 \\uC804\\uB7B5\", mdx(\"ol\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"\\uC0AD\\uC81C\\uD560 Node\\uC758 \\uC624\\uB978\\uCABD \\uC790\\uC2DD \\uC911, \\uAC00\\uC7A5 \\uC791\\uC740 \\uAC12\\uC744 \\uC0AD\\uC81C\\uD560 Node\\uC758 Parent Node\\uAC00 \\uAC00\\uB9AC\\uD0A4\\uB3C4\\uB85D \\uD55C\\uB2E4.\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\uC0AD\\uC81C\\uD560 Node\\uC758 \\uC67C\\uCABD \\uC790\\uC2DD \\uC911, \\uAC00\\uC7A5 \\uD070 \\uAC12\\uC744 \\uC0AD\\uC81C\\uD560 Node\\uC758 Parent Node\\uAC00 \\uAC00\\uB9AC\\uD0A4\\uB3C4\\uB85D \\uD55C\\uB2E4.\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAE30\\uBCF8 \\uC0AC\\uC6A9 \\uAC00\\uB2A5 \\uC804\\uB7B5 \\uC911, 1\\uBC88 \\uC804\\uB7B5\\uC744 \\uC0AC\\uC6A9\\uD558\\uC5EC \\uCF54\\uB4DC\\uB97C \\uAD6C\\uD604\\uD558\\uAE30\\uB85C \\uD568\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uACBD\\uC6B0\\uC758 \\uC218\\uAC00 \\uB610\\uB2E4\\uC2DC \\uB450\\uAC00\\uC9C0\\uAC00 \\uC788\\uC74C\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Case3-2-1:\"), \" \\uC0AD\\uC81C\\uD560 Node\\uAC00 Parent Node\\uC758 \\uC624\\uB978\\uCABD\\uC5D0 \\uC788\\uACE0, \\uC0AD\\uC81C\\uD560 Node\\uC758 \\uC624\\uB978\\uCABD \\uC790\\uC2DD \\uC911, \\uAC00\\uC7A5 \\uC791\\uC740 \\uAC12\\uC744 \\uAC00\\uC9C4 Node\\uC758 Child Node\\uAC00 \\uC5C6\\uC744 \\uB54C\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"Case3-2-2:\"), \" \\uC0AD\\uC81C\\uD560 Node\\uAC00 Parent Node\\uC758 \\uC624\\uB978\\uCABD\\uC5D0 \\uC788\\uACE0, \\uC0AD\\uC81C\\uD560 Node\\uC758 \\uC624\\uB978\\uCABD \\uC790\\uC2DD \\uC911, \\uAC00\\uC7A5 \\uC791\\uC740 \\uAC12\\uC744 \\uAC00\\uC9C4 Node\\uC758 \\uC624\\uB978\\uCABD\\uC5D0 Child Node\\uAC00 \\uC788\\uC744 \\uB54C\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uAC00\\uC7A5 \\uC791\\uC740 \\uAC12\\uC744 \\uAC00\\uC9C4 Node\\uC758 Child Node\\uAC00 \\uC67C\\uCABD\\uC5D0 \\uC788\\uC744 \\uACBD\\uC6B0\\uB294 \\uC5C6\\uC74C, \\uC65C\\uB0D0\\uD558\\uBA74 \\uC67C\\uCABD Node\\uAC00 \\uC788\\uB2E4\\uB294 \\uAC83\\uC740 \\uD574\\uB2F9 Node\\uBCF4\\uB2E4 \\uB354 \\uC791\\uC740 \\uAC12\\uC744 \\uAC00\\uC9C4 Node\\uAC00 \\uC788\\uB2E4\\uB294 \\uB73B\\uC774\\uAE30 \\uB54C\\uBB38\\uC784\")))))))), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"http://www.fun-coding.org/00_Images/tree_remove_2child_code_right.png\",\n    \"alt\": \"scd\"\n  }))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"        else:\\n            self.change_node = self.current_node.right\\n            self.change_node_parent = self.current_node.right\\n            while self.change_node.left != None:\\n                self.change_node_parent = self.change_node\\n                self.change_node = self.change_node.left\\n            if self.change_node.right != None:\\n                self.change_node_parent.left = self.change_node.right\\n            else:\\n                self.change_node_parent.left = None\\n            self.parent.right = self.change_node\\n            self.change_node.left = self.current_node.left\\n            self.change_node.right = self.current_node.right\\n\")), mdx(\"h4\", null, \"5.5.5. \\uD30C\\uC774\\uC36C \\uC804\\uCCB4 \\uCF54\\uB4DC \\uAD6C\\uD604\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"class Node:\\n    def __init__(self, value):\\n        self.value = value\\n        self.left = None\\n        self.right = None\\n\\n        \\nclass NodeMgmt:\\n    def __init__(self, head):\\n        self.head = head\\n    \\n    def insert(self, value):\\n        self.current_node = self.head\\n        while True:\\n            if value < self.current_node.value:\\n                if self.current_node.left != None:\\n                    self.current_node = self.current_node.left\\n                else:\\n                    self.current_node.left = Node(value)\\n                    break\\n            else:\\n                if self.current_node.right != None:\\n                    self.current_node = self.current_node.right\\n                else:\\n                    self.current_node.right = Node(value)\\n                    break\\n    \\n    def search(self, value):\\n        self.current_node = self.head\\n        while self.current_node:\\n            if self.current_node.value == value:\\n                return True\\n            elif value < self.current_node.value:\\n                self.current_node = self.current_node.left\\n            else:\\n                self.current_node = self.current_node.right\\n        return False        \\n    \\n    def delete(self, value):\\n        # \\uC0AD\\uC81C\\uD560 \\uB178\\uB4DC \\uD0D0\\uC0C9\\n        searched = False\\n        self.current_node = self.head\\n        self.parent = self.head\\n        while self.current_node:\\n            if self.current_node.value == value:\\n                searched = True\\n                break\\n            elif value < self.current_node.value:\\n                self.parent = self.current_node\\n                self.current_node = self.current_node.left\\n            else:\\n                self.parent = self.current_node\\n                self.current_node = self.current_node.right\\n\\n        if searched == False:\\n            return False    \\n\\n        # case1\\n        if  self.current_node.left == None and self.current_node.right == None:\\n            if value < self.parent.value:\\n                self.parent.left = None\\n            else:\\n                self.parent.right = None\\n        \\n        # case2\\n        elif self.current_node.left != None and self.current_node.right == None:\\n            if value < self.parent.value:\\n                self.parent.left = self.current_node.left\\n            else:\\n                self.parent.right = self.current_node.left\\n        elif self.current_node.left == None and self.current_node.right != None:\\n            if value < self.parent.value:\\n                self.parent.left = self.current_node.right\\n            else:\\n                self.parent.right = self.current_node.right        \\n        \\n        # case 3\\n        elif self.current_node.left != None and self.current_node.right != None:\\n            # case3-1\\n            if value < self.parent.value:\\n                self.change_node = self.current_node.right\\n                self.change_node_parent = self.current_node.right\\n                while self.change_node.left != None:\\n                    self.change_node_parent = self.change_node\\n                    self.change_node = self.change_node.left\\n                if self.change_node.right != None:\\n                    self.change_node_parent.left = self.change_node.right\\n                else:\\n                    self.change_node_parent.left = None\\n                self.parent.left = self.change_node\\n                self.change_node.right = self.current_node.right\\n                self.change_node.left = self.change_node.left\\n            # case 3-2\\n            else:\\n                self.change_node = self.current_node.right\\n                self.change_node_parent = self.current_node.right\\n                while self.change_node.left != None:\\n                    self.change_node_parent = self.change_node\\n                    self.change_node = self.change_node.left\\n                if self.change_node.right != None:\\n                    self.change_node_parent.left = self.change_node.right\\n                else:\\n                    self.change_node_parent.left = None\\n                self.parent.right = self.change_node\\n                self.change_node.right = self.current_node.right\\n                self.change_node.left = self.current_node.left\\n\\n        return True\\n\")), mdx(\"h4\", null, \"5.5.6. \\uD30C\\uC774\\uC36C \\uC804\\uCCB4 \\uCF54\\uB4DC \\uD14C\\uC2A4\\uD2B8\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"random \\uB77C\\uC774\\uBE0C\\uB7EC\\uB9AC \\uD65C\\uC6A9\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"random.randint(\\uCCAB\\uBC88\\uC9F8 \\uC22B\\uC790, \\uB9C8\\uC9C0\\uB9C9 \\uC22B\\uC790): \\uCCAB\\uBC88\\uC9F8 \\uC22B\\uC790\\uBD80\\uD130 \\uB9C8\\uC9C0\\uB9C9 \\uC22B\\uC790 \\uC0AC\\uC774\\uC5D0 \\uC788\\uB294 \\uC22B\\uC790\\uB97C \\uB79C\\uB364\\uD558\\uAC8C \\uC120\\uD0DD\\uD574\\uC11C \\uB9AC\\uD134\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC608: random.randint(0, 99): 0\\uC5D0\\uC11C 99\\uAE4C\\uC9C0 \\uC22B\\uC790\\uC911 \\uD2B9\\uC815 \\uC22B\\uC790\\uB97C \\uB79C\\uB364\\uD558\\uAC8C \\uC120\\uD0DD\\uD574\\uC11C \\uB9AC\\uD134\\uD574\\uC90C\")))))), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-py\"\n  }), \"# 0 ~ 999 \\uC22B\\uC790 \\uC911\\uC5D0\\uC11C \\uC784\\uC758\\uB85C 100\\uAC1C\\uB97C \\uCD94\\uCD9C\\uD574\\uC11C, \\uC774\\uC9C4 \\uD0D0\\uC0C9 \\uD2B8\\uB9AC\\uC5D0 \\uC785\\uB825, \\uAC80\\uC0C9, \\uC0AD\\uC81C\\nimport random\\n\\n# 0 ~ 999 \\uC911, 100 \\uAC1C\\uC758 \\uC22B\\uC790 \\uB79C\\uB364 \\uC120\\uD0DD\\nbst_nums = set()\\nwhile len(bst_nums) != 100:\\n    bst_nums.add(random.randint(0, 999))\\n# print (bst_nums)\\n\\n# \\uC120\\uD0DD\\uB41C 100\\uAC1C\\uC758 \\uC22B\\uC790\\uB97C \\uC774\\uC9C4 \\uD0D0\\uC0C9 \\uD2B8\\uB9AC\\uC5D0 \\uC785\\uB825, \\uC784\\uC758\\uB85C \\uB8E8\\uD2B8\\uB178\\uB4DC\\uB294 500\\uC744 \\uB123\\uAE30\\uB85C \\uD568\\nhead = Node(500)\\nbinary_tree = NodeMgmt(head)\\nfor num in bst_nums:\\n    binary_tree.insert(num)\\n    \\n# \\uC785\\uB825\\uD55C 100\\uAC1C\\uC758 \\uC22B\\uC790 \\uAC80\\uC0C9 (\\uAC80\\uC0C9 \\uAE30\\uB2A5 \\uD655\\uC778)\\nfor num in bst_nums:\\n    if binary_tree.search(num) == False:\\n        print ('search failed', num)\\n\\n# \\uC785\\uB825\\uD55C 100\\uAC1C\\uC758 \\uC22B\\uC790 \\uC911 10\\uAC1C\\uC758 \\uC22B\\uC790\\uB97C \\uB79C\\uB364 \\uC120\\uD0DD\\ndelete_nums = set()\\nbst_nums = list(bst_nums)\\nwhile len(delete_nums) != 10:\\n    delete_nums.add(bst_nums[random.randint(0, 99)])\\n\\n# \\uC120\\uD0DD\\uD55C 10\\uAC1C\\uC758 \\uC22B\\uC790\\uB97C \\uC0AD\\uC81C (\\uC0AD\\uC81C \\uAE30\\uB2A5 \\uD655\\uC778)\\nfor del_num in delete_nums:\\n    if binary_tree.delete(del_num) == False:\\n        print('delete failed', del_num)\\n\")), mdx(\"h3\", null, \"6. \\uC774\\uC9C4 \\uD0D0\\uC0C9 \\uD2B8\\uB9AC\\uC758 \\uC2DC\\uAC04 \\uBCF5\\uC7A1\\uB3C4\\uC640 \\uB2E8\\uC810\"), mdx(\"h4\", null, \"6.1. \\uC2DC\\uAC04 \\uBCF5\\uC7A1\\uB3C4 (\\uD0D0\\uC0C9\\uC2DC)\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"depth (\\uD2B8\\uB9AC\\uC758 \\uB192\\uC774) \\uB97C h\\uB77C\\uACE0 \\uD45C\\uAE30\\uD55C\\uB2E4\\uBA74, O(h)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"n\\uAC1C\\uC758 \\uB178\\uB4DC\\uB97C \\uAC00\\uC9C4\\uB2E4\\uBA74, \", mdx(\"span\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"katex\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-mathml\"\n  }), mdx(\"math\", _extends({\n    parentName: \"span\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }), mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"h\"), mdx(\"mo\", {\n    parentName: \"mrow\"\n  }, \"=\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"l\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"o\"), mdx(\"msub\", {\n    parentName: \"mrow\"\n  }, mdx(\"mi\", {\n    parentName: \"msub\"\n  }, \"g\"), mdx(\"mn\", {\n    parentName: \"msub\"\n  }, \"2\")), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"n\")), mdx(\"annotation\", _extends({\n    parentName: \"semantics\"\n  }, {\n    \"encoding\": \"application/x-tex\"\n  }), \"h = log_2{n}\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.69444em\",\n      \"verticalAlign\": \"0em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\"\n  }), \"h\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2777777777777778em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mrel\"\n  }), \"=\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mspace\",\n    \"style\": {\n      \"marginRight\": \"0.2777777777777778em\"\n    }\n  }))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.8888799999999999em\",\n      \"verticalAlign\": \"-0.19444em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.01968em\"\n    }\n  }), \"l\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\"\n  }), \"o\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.03588em\"\n    }\n  }), \"g\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"msupsub\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-t vlist-t2\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.30110799999999993em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"style\": {\n      \"top\": \"-2.5500000000000003em\",\n      \"marginLeft\": \"-0.03588em\",\n      \"marginRight\": \"0.05em\"\n    }\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"pstrut\",\n    \"style\": {\n      \"height\": \"2.7em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"sizing reset-size6 size3 mtight\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mtight\"\n  }), \"2\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-s\"\n  }), \"\\u200B\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist-r\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"vlist\",\n    \"style\": {\n      \"height\": \"0.15em\"\n    }\n  }), mdx(\"span\", {\n    parentName: \"span\"\n  })))))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\"\n  }), \"n\"))))), \" \\uC5D0 \\uAC00\\uAE4C\\uC6B0\\uBBC0\\uB85C, \\uC2DC\\uAC04 \\uBCF5\\uC7A1\\uB3C4\\uB294 \", mdx(\"span\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"katex\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-mathml\"\n  }), mdx(\"math\", _extends({\n    parentName: \"span\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }), mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"O\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \"(\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"l\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"o\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"g\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"n\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \")\")), mdx(\"annotation\", _extends({\n    parentName: \"semantics\"\n  }, {\n    \"encoding\": \"application/x-tex\"\n  }), \"O(log{n})\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.02778em\"\n    }\n  }), \"O\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mopen\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.01968em\"\n    }\n  }), \"l\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\"\n  }), \"o\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.03588em\"\n    }\n  }), \"g\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\"\n  }), \"n\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mclose\"\n  }), \")\")))), \"\\n- \\uCC38\\uACE0: \\uBE45\\uC624 \\uD45C\\uAE30\\uBC95\\uC5D0\\uC11C \", mdx(\"span\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"katex\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-mathml\"\n  }), mdx(\"math\", _extends({\n    parentName: \"span\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }), mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"l\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"o\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"g\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"n\")), mdx(\"annotation\", _extends({\n    parentName: \"semantics\"\n  }, {\n    \"encoding\": \"application/x-tex\"\n  }), \"log{n}\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"0.8888799999999999em\",\n      \"verticalAlign\": \"-0.19444em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.01968em\"\n    }\n  }), \"l\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\"\n  }), \"o\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.03588em\"\n    }\n  }), \"g\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\"\n  }), \"n\"))))), \" \\uC5D0\\uC11C\\uC758 log\\uC758 \\uBC11\\uC740 10\\uC774 \\uC544\\uB2C8\\uB77C, 2\\uC785\\uB2C8\\uB2E4.\\n- \\uD55C\\uBC88 \\uC2E4\\uD589\\uC2DC\\uB9C8\\uB2E4, 50%\\uC758 \\uC2E4\\uD589\\uD560 \\uC218\\uB3C4 \\uC788\\uB294 \\uBA85\\uB839\\uC744 \\uC81C\\uAC70\\uD55C\\uB2E4\\uB294 \\uC758\\uBBF8. \\uC989 50%\\uC758 \\uC2E4\\uD589\\uC2DC\\uAC04\\uC744 \\uB2E8\\uCD95\\uC2DC\\uD0AC \\uC218 \\uC788\\uB2E4\\uB294 \\uAC83\\uC744 \\uC758\\uBBF8\\uD568\\n\", mdx(\"img\", _extends({\n    parentName: \"li\"\n  }, {\n    \"src\": \"https://www.mathwarehouse.com/programming/images/binary-search-tree/binary-search-tree-sorted-array-animation.gif\",\n    \"alt\": \"cds\"\n  })))), mdx(\"h4\", null, \"6.2. \\uC774\\uC9C4 \\uD0D0\\uC0C9 \\uD2B8\\uB9AC \\uB2E8\\uC810\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD3C9\\uADE0 \\uC2DC\\uAC04 \\uBCF5\\uC7A1\\uB3C4\\uB294 \", mdx(\"span\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"katex\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-mathml\"\n  }), mdx(\"math\", _extends({\n    parentName: \"span\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }), mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"O\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \"(\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"l\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"o\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"g\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"n\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \")\")), mdx(\"annotation\", _extends({\n    parentName: \"semantics\"\n  }, {\n    \"encoding\": \"application/x-tex\"\n  }), \"O(log{n})\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.02778em\"\n    }\n  }), \"O\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mopen\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.01968em\"\n    }\n  }), \"l\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\"\n  }), \"o\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.03588em\"\n    }\n  }), \"g\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\"\n  }), \"n\")), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mclose\"\n  }), \")\")))), \" \\uC774\\uC9C0\\uB9CC, \", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774\\uB294 \\uD2B8\\uB9AC\\uAC00 \\uADE0\\uD615\\uC7A1\\uD600 \\uC788\\uC744 \\uB54C\\uC758 \\uD3C9\\uADE0 \\uC2DC\\uAC04\\uBCF5\\uC7A1\\uB3C4\\uC774\\uBA70,\"))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB2E4\\uC74C \\uC608\\uC640 \\uAC19\\uC774 \\uAD6C\\uC131\\uB418\\uC5B4 \\uC788\\uC744 \\uACBD\\uC6B0, \\uCD5C\\uC545\\uC758 \\uACBD\\uC6B0\\uB294 \\uB9C1\\uD06C\\uB4DC \\uB9AC\\uC2A4\\uD2B8\\uB4F1\\uACFC \\uB3D9\\uC77C\\uD55C \\uC131\\uB2A5\\uC744 \\uBCF4\\uC5EC\\uC90C ( \", mdx(\"span\", _extends({\n    parentName: \"li\"\n  }, {\n    \"className\": \"katex\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-mathml\"\n  }), mdx(\"math\", _extends({\n    parentName: \"span\"\n  }, {\n    \"xmlns\": \"http://www.w3.org/1998/Math/MathML\"\n  }), mdx(\"semantics\", {\n    parentName: \"math\"\n  }, mdx(\"mrow\", {\n    parentName: \"semantics\"\n  }, mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"O\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \"(\"), mdx(\"mi\", {\n    parentName: \"mrow\"\n  }, \"n\"), mdx(\"mo\", _extends({\n    parentName: \"mrow\"\n  }, {\n    \"stretchy\": \"false\"\n  }), \")\")), mdx(\"annotation\", _extends({\n    parentName: \"semantics\"\n  }, {\n    \"encoding\": \"application/x-tex\"\n  }), \"O(n)\")))), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"katex-html\",\n    \"aria-hidden\": \"true\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"base\"\n  }), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"strut\",\n    \"style\": {\n      \"height\": \"1em\",\n      \"verticalAlign\": \"-0.25em\"\n    }\n  })), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\",\n    \"style\": {\n      \"marginRight\": \"0.02778em\"\n    }\n  }), \"O\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mopen\"\n  }), \"(\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mord mathnormal\"\n  }), \"n\"), mdx(\"span\", _extends({\n    parentName: \"span\"\n  }, {\n    \"className\": \"mclose\"\n  }), \")\")))), \" )\")), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"http://www.fun-coding.org/00_Images/worstcase_bst.png\",\n    \"alt\": \"sdcds\"\n  }))));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#1-트리-tree-구조","title":"1. 트리 (Tree) 구조","items":[{"url":"#2-알아둘-용어","title":"2. 알아둘 용어"},{"url":"#3-이진-트리와-이진-탐색-트리-binary-search-tree","title":"3. 이진 트리와 이진 탐색 트리 (Binary Search Tree)"},{"url":"#4-자료-구조-이진-탐색-트리의-장점과-주요-용도","title":"4. 자료 구조 이진 탐색 트리의 장점과 주요 용도"},{"url":"#이진트리와-정렬된-배열간의-탐색-비교","title":"이진트리와 정렬된 배열간의 탐색 비교"},{"url":"#5-파이썬-객체지향-프로그래밍으로-링크드-리스트-구현하기","title":"5. 파이썬 객체지향 프로그래밍으로 링크드 리스트 구현하기","items":[{"url":"#51-노드-클래스-만들기","title":"5.1. 노드 클래스 만들기"},{"url":"#52-이진-탐색-트리에-데이터-넣기","title":"5.2. 이진 탐색 트리에 데이터 넣기"},{"url":"#53-이진-탐색-트리-탐색","title":"5.3. 이진 탐색 트리 탐색"},{"url":"#54-이진-탐색-트리-삭제","title":"5.4. 이진 탐색 트리 삭제"},{"url":"#541-leaf-node-삭제","title":"5.4.1. Leaf Node 삭제"},{"url":"#542-child-node-가-하나인-node-삭제","title":"5.4.2. Child Node 가 하나인 Node 삭제"},{"url":"#543-child-node-가-두-개인-node-삭제","title":"5.4.3. Child Node 가 두 개인 Node 삭제","items":[{"url":"#5431-삭제할-node의-오른쪽-자식중-가장-작은-값을-삭제할-node의-parent-node가-가리키게-할-경우","title":"5.4.3.1. 삭제할 Node의 오른쪽 자식중, 가장 작은 값을 삭제할 Node의 Parent Node가 가리키게 할 경우"}]}]},{"url":"#55-이진-탐색-트리-삭제-코드-구현과-분석","title":"5.5. 이진 탐색 트리 삭제 코드 구현과 분석","items":[{"url":"#551-삭제할-node-탐색","title":"5.5.1 삭제할 Node 탐색"},{"url":"#552-case2-삭제할-node가-child-node를-한-개-가지고-있을-경우","title":"5.5.2. Case2: 삭제할 Node가 Child Node를 한 개 가지고 있을 경우"},{"url":"#553-case3-1-삭제할-node가-child-node를-두-개-가지고-있을-경우-삭제할-node가-parent-node-왼쪽에-있을-때","title":"5.5.3. Case3-1: 삭제할 Node가 Child Node를 두 개 가지고 있을 경우 (삭제할 Node가 Parent Node 왼쪽에 있을 때)"},{"url":"#554-case3-2-삭제할-node가-child-node를-두-개-가지고-있을-경우-삭제할-node가-parent-node-오른쪽에-있을-때","title":"5.5.4. Case3-2: 삭제할 Node가 Child Node를 두 개 가지고 있을 경우 (삭제할 Node가 Parent Node 오른쪽에 있을 때)"},{"url":"#555-파이썬-전체-코드-구현","title":"5.5.5. 파이썬 전체 코드 구현"},{"url":"#556-파이썬-전체-코드-테스트","title":"5.5.6. 파이썬 전체 코드 테스트"}]},{"url":"#6-이진-탐색-트리의-시간-복잡도와-단점","title":"6. 이진 탐색 트리의 시간 복잡도와 단점","items":[{"url":"#61-시간-복잡도-탐색시","title":"6.1. 시간 복잡도 (탐색시)"},{"url":"#62-이진-탐색-트리-단점","title":"6.2. 이진 탐색 트리 단점"}]}]}]},"parent":{"relativePath":"datastructure&algorithm/8.Tree.md"},"frontmatter":{"metaTitle":"트리(Tree)","metaDescription":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/framework/prisma","title":"Prisma"}}},{"node":{"fields":{"slug":"/datastructure&algorithm","title":"자료구조 & 알고리즘(Datastructure & Algorithm)"}}},{"node":{"fields":{"slug":"/framework","title":"프레임워크(Framework)"}}},{"node":{"fields":{"slug":"/git","title":"깃(Git)"}}},{"node":{"fields":{"slug":"/","title":"SuHyeon's TechBlog"}}},{"node":{"fields":{"slug":"/infra","title":"인프라(Infra)"}}},{"node":{"fields":{"slug":"/language","title":"언어(Language)"}}},{"node":{"fields":{"slug":"/library","title":"라이브러리(Library)"}}},{"node":{"fields":{"slug":"/tdd","title":"테스트 주도 개발(TDD)"}}},{"node":{"fields":{"slug":"/tdd/1.unit-test","title":"유닛 테스트(Unit Test)"}}},{"node":{"fields":{"slug":"/tdd/2.mocha","title":"Mocha Framework"}}},{"node":{"fields":{"slug":"/tdd/3.chai","title":"Chai Library"}}},{"node":{"fields":{"slug":"/library/graphql","title":"GraphQL"}}},{"node":{"fields":{"slug":"/library/nexusjs","title":"Nexus.JS"}}},{"node":{"fields":{"slug":"/language/javascript","title":"Javascript"}}},{"node":{"fields":{"slug":"/infra/1.BasicTheory","title":"Basic Theory"}}},{"node":{"fields":{"slug":"/language/typescript","title":"Typescript"}}},{"node":{"fields":{"slug":"/infra/2.aws","title":"aws"}}},{"node":{"fields":{"slug":"/infra/3.docker","title":"Docker"}}},{"node":{"fields":{"slug":"/library/graphql/ApolloGraphQLserver","title":"ApolloGraphQLserver"}}},{"node":{"fields":{"slug":"/library/graphql/graphql","title":"GraphQL"}}},{"node":{"fields":{"slug":"/git/basic-git-command","title":"Basic git command"}}},{"node":{"fields":{"slug":"/git/changing-default-branch","title":"Changing the Default Branch"}}},{"node":{"fields":{"slug":"/git/configuring-protected-branches","title":"Configure Branch Protection Rule"}}},{"node":{"fields":{"slug":"/git/gitforksync","title":"git fork & sync"}}},{"node":{"fields":{"slug":"/language/javascript/class","title":"Class"}}},{"node":{"fields":{"slug":"/framework/NextJs","title":"Next Js"}}},{"node":{"fields":{"slug":"/infra/3.docker/docker","title":"Docker"}}},{"node":{"fields":{"slug":"/infra/3.docker/dockerawsdeploy","title":"Docker AWS EC2 Deploy"}}},{"node":{"fields":{"slug":"/infra/3.docker/dockerbasic","title":"Docker Basic"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-Basic","title":"AWS-Basic"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-EC2","title":"AWS-EC2"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-RDS","title":"AWS-RDS"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-Route53","title":"AWS-Route 53"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/10.SpaceComplexity","title":"공간 복잡도(Space Complexity)"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-S3","title":"AWS-S3"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/11.BubbleSort","title":"버블 정렬(Bubble Sort)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/13.SelectionSort","title":"선택 정렬(Selection Sort)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/12.InsertionSort","title":"삽입 정렬(Insertion Sort)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/14.RecursiveCall","title":"재귀 용법(Recursive Call)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/16.QuickSort","title":"퀵 정렬(Quick Sort)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/15.DynamicProgramming","title":"동적 계획법과 분할 정복(Dynamic Programming & Divide and conquer"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/17.MergeSort","title":"병렬 정렬(Merge Sort)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/18.SequentialSearch","title":"순차 탐색(Sequential Search)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/19.BinarySearch","title":"탐색 알고리즘(Binary Search)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/2.array","title":"배열(Array)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/20.Graph","title":"그래프(Graph)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/21.Depth-FirstSearch","title":"깊이 우선 탐색(Depth-FirstSearch)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/22.Breadth-FirstSearch","title":"너비 우선 탐색(Breadth-FirstSearch)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/23.GreedyAlgorithm","title":"탐욕 알고리즘(Greedy Algorithm)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/24.DijkstraAlgorithm","title":"다익스트라 알고리즘(Dijkstra Algorithm)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/26.BackTracking","title":"백트래킹(BackTracking)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/3.queue","title":"큐(Queue)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/4.stack","title":"스택(Stack)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/5.linkedlist","title":"링크드리스트(LinkedList)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/8.Tree","title":"트리(Tree)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/9.Heap","title":"힙(Heap)"}}},{"node":{"fields":{"slug":"/framework/prisma/NoticePrisma","title":"Notice Prisma"}}},{"node":{"fields":{"slug":"/framework/prisma/prisma2","title":"Prisma 2"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/6.TimeComplexity","title":"시간 복잡도(Time Complexity)"}}},{"node":{"fields":{"slug":"/language/python","title":"Python"}}},{"node":{"fields":{"slug":"/language/python/basic","title":"Basic"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/7.HashTable","title":"해쉬 테이블(HashTable)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/25.MinimumSpanningTree","title":"최소 신장 트리(Minimum Spanning Tree)"}}}]}},"pageContext":{"isCreatedByStatefulCreatePages":false,"id":"1f1ff196-a018-5783-8bdc-993829187152"}}}