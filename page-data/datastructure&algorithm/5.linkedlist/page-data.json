{"componentChunkName":"component---src-templates-docs-js","path":"/datastructure&algorithm/5.linkedlist","result":{"data":{"site":{"siteMetadata":{"title":"Gatsby Gitbook Boilerplate | Hasura","docsLocation":"https://github.com/hasura/gatsby-gitbook-boilerplate/tree/master/content"}},"mdx":{"fields":{"id":"96f68860-2be1-5dd4-99a6-19f66ee76317","title":"링크드리스트(LinkedList)","slug":"/datastructure&algorithm/5.linkedlist"},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"title\": \"링크드리스트(LinkedList)\",\n  \"metaTitle\": \"링크드리스트(LinkedList)\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", null, \"\\uB9C1\\uD06C\\uB4DC\\uB9AC\\uC2A4\\uD2B8\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC5F0\\uACB0 \\uB9AC\\uC2A4\\uD2B8\\uB77C\\uACE0 \\uD55C\\uB2E4.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBC30\\uC5F4\\uC740 \\uC21C\\uCC28\\uC801\\uC73C\\uB85C \\uC5F0\\uACB0\\uB41C \\uACF5\\uAC04\\uC5D0 \\uB370\\uC774\\uD130\\uB97C \\uB098\\uC5F4\\uD558\\uB294 \\uAD6C\\uC870 <-- \\uC608\\uB97C\\uB4E4\\uC5B4 6\\uAC1C\\uC758 \\uACF5\\uAC04\\uC744 \\uC608\\uC57D\\uC744 \\uD574\\uB193\\uACE0 \\uB370\\uC774\\uD130\\uB97C \\uB123\\uACE0 \\uC77D\\uB294\\uAD6C\\uC870\\uB85C \\uACF5\\uAC04\\uB0AD\\uBE44\\uAC00 \\uC2EC\\uD558\\uB2E4\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB9C1\\uD06C\\uB4DC \\uB9AC\\uC2A4\\uD2B8\\b\\uB294 \\uB5A8\\uC5B4\\uC9C4 \\uACF3\\uC5D0 \\uC874\\uC7AC\\uD558\\uB294 \\uB370\\uC774\\uD130\\uB97C \\uD654\\uC0B4\\uD45C\\uB85C \\uC5F0\\uACB0\\uD574\\uC11C \\uAD00\\uB9AC\\uD558\\uB294 \\uB370\\uC774\\uD130 \\uAD6C\\uC870 <--- \\uB370\\uC774\\uD130 \\uACF5\\uAC04\\uC744 \\uBBF8\\uB9AC \\uC7A1\\uC544 \\uB193\\uC744 \\uD544\\uC694\\uAC00 \\uC5C6\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uB0AD\\uBE44\\uAC00 \\uC904\\uC5B4\\uB4E0\\uB2E4 \"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB9C1\\uD06C\\uB4DC \\uB9AC\\uC2A4\\uD2B8\\uB294 \\uBBF8\\uB9AC \\uB370\\uC774\\uD130 \\uACF5\\uAC04\\uC744 \\uC7A1\\uC744 \\uD544\\uC694\\uC5C6\\uC774 \\uD544\\uC694\\uD560 \\uB54C\\uB9C8\\uB2E4 \\uCD94\\uAC00\\uD560 \\uC218 \\uC788\\uB294 \\uAD6C\\uC870\\uC774\\uB2E4. \")), mdx(\"h2\", null, \"\\uB9C1\\uD06C\\uB4DC \\uB9AC\\uC2A4\\uD2B8\\uC758 \\uAE30\\uBCF8 \\uAD6C\\uC870\\uC640 \\uC6A9\\uC5B4\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB178\\uB4DC(Node): \\uB370\\uC774\\uD130 \\uC800\\uC7A5 \\uB2E8\\uC704(\\uB370\\uC774\\uD130\\uAC12, \\uD3EC\\uC778\\uD130)\\uB85C \\uAD6C\\uC131\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uD3EC\\uC778\\uD130(Pointer): \\uAC01 \\uB178\\uB4DC \\uC548\\uC5D0\\uC11C, \\uB2E4\\uC74C\\uC774\\uB098 \\uC774\\uC804\\uC758 \\uB178\\uB4DC\\uC640\\uC758 \\uC5F0\\uACB0 \\uC815\\uBCF4\\uB97C \\uAC00\\uC9C0\\uACE0 \\uC788\\uB294 \\uACF5\\uAC04\")), mdx(\"h3\", null, \"\\uC77C\\uBC18\\uC801\\uC778 \\uB9C1\\uD06C\\uB4DC \\uB9AC\\uC2A4\\uD2B8\\uC758 \\uD615\\uD0DC\"), mdx(\"p\", null, mdx(\"img\", _extends({\n    parentName: \"p\"\n  }, {\n    \"src\": \"../../src/images/linkedlist.png\",\n    \"alt\": \"ㅇㅇㅇ\"\n  })), \"  \"), mdx(\"p\", null, \"\\uC704\\uC758 \\uC774\\uBBF8\\uC9C0\\uB97C \\uBCF4\\uBA74 \\uB370\\uC774\\uD130\\uC640 \\uC810\\uC73C\\uB85C \\uBCF4\\uC774\\uB294 \\uAC83\\uC774 \\uC788\\uB294\\uB370,\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uB9C1\\uD06C\\uB4DC\\uB9AC\\uC2A4\\uD2B8\\uB294 \\uBC30\\uC5F4\\uCC98\\uB7FC \\uD558\\uB098\\uC758 \\uB370\\uC774\\uD130\\uC5D0 \\uB370\\uC774\\uD130 \\uAC12\\uB9CC \\uC800\\uC7A5\\uD558\\uB294 \\uAC83\\uC774\\uC544\\uB2CC\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uB9C1\\uD06C\\uB4DC\\uB9AC\\uC2A4\\uD2B8 \\uD558\\uB098\\uC758 \\uB370\\uC774\\uD130\\uC5D0 \\uC704\\uC758 \\uADF8\\uB9BC\\uC5D0\\uC11C \\uBCF4\\uC774\\uB294 \\uAC83\\uACFC \\uAC19\\uC774 \\uC67C\\uCABD \\uC140\\uC5D0\\uB294 \\uB370\\uC774\\uD130 \\uAC12\\uACFC\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uC624\\uB978\\uCABD\\uC140\\uC5D0 \\uC810, \\uD654\\uC0B4\\uD45C\\uB85C \\uD45C\\uD604\\uD55C \\uB2E4\\uC74C \\uB370\\uC774\\uD130\\uC758 \\uC8FC\\uC18C\\uAC12\\uC744 \\uC800\\uC7A5\\uD574 \\uB193\\uC740 \\uAD6C\\uC870\\uB85C \\uAD6C\\uC131\\uB41C \\uB370\\uC774\\uD130\\uB97C \\uB178\\uB4DC\\uB77C\\uACE0 \\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uADF8\\uB9AC\\uACE0 \\uC8FC\\uC18C\\uAC12\\uC744 \\uC800\\uC7A5\\uD55C\\uB2E4\\uACE0 \\uD45C\\uD604\\uD588\\uB294\\uB370 \\uC774\\uAC83\\uC744 \\uD3EC\\uC778\\uD130\\uB77C\\uACE0\\uD55C\\uB2E4.\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uB9C1\\uD06C\\uB4DC\\uB9AC\\uC2A4\\uD2B8\\uB294 \\uB178\\uB4DC \\uB2E8\\uC704\\uB85C \\uC544\\uBB34 \\uACF5\\uAC04\\uC5D0\\uB098 \\uC800\\uC7A5\\uC744 \\uD574\\uB193\\uACE0 \\uC21C\\uC11C\\uB97C \\uAE30\\uC5B5\\uD558\\uAE30\\uC704\\uD574\", mdx(\"br\", {\n    parentName: \"p\"\n  }), \"\\n\", \"\\uAC01 \\uB178\\uB4DC\\uB9C8\\uB2E4 \\uB2E4\\uC74C \\uB178\\uB4DC\\uC758 \\uC704\\uCE58\\uB97C \\uAE30\\uC5B5\\uD558\\uB294 \\uC8FC\\uC18C(\\uD3EC\\uC778\\uD130)\\uAC00 \\uD558\\uB098\\uC529 \\uBD99\\uC5B4\\uC788\\uB294 \\uD615\\uD0DC\\uB97C \\uB9C1\\uD06C\\uB4DC\\uB9AC\\uC2A4\\uD2B8 \\uD615\\uD0DC\\uB77C\\uACE0\\uD55C\\uB2E4.  \"), mdx(\"h2\", null, \"\\uB9C1\\uD06C\\uB4DC \\uB9AC\\uC2A4\\uD2B8 \\uB178\\uB4DC \\uC9C1\\uC811 \\uAD6C\\uD604\\uD558\\uC5EC \\uAD6C\\uC131\\uD558\\uAE30\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"#\\uAC1D\\uCCB4\\uC9C0\\uD5A5 \\uBB38\\uBC95\\uC744 \\uC774\\uC6A9\\uD55C \\uB178\\uB4DC \\uAD6C\\uD604\\n \\n# \\uB370\\uC774\\uD130\\uC640 \\uC8FC\\uC18C\\uB97C \\uC800\\uC7A5\\uD560 \\uACF5\\uAC04\\uC774 \\uD544\\uC694\\uD558\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uD074\\uB798\\uC2A4\\uB97C \\uC0AC\\uC6A9\\nclass Node:\\n    # init \\uD568\\uC218\\uB97C \\uC774\\uC6A9\\uD558\\uC5EC \\uC774 \\uD074\\uB798\\uC2A4\\uAC00 \\uB9CC\\uB4E4\\uC5B4\\uC9C8\\uB54C\\uB9C8\\uB2E4, \\uAC1D\\uCCB4\\uD654 \\uB420\\uB54C\\uB9C8\\uB2E4 \\uB370\\uC774\\uD130\\uC640 \\uC8FC\\uC18C\\uB97C \\uB123\\uC74C\\n    # self\\uB294 \\uC0DD\\uC131\\uB41C \\uAC1D\\uCCB4(\\uD074\\uB798\\uC2A4)\\uC758 \\uC790\\uC2E0\\uC744 \\uC758\\uBBF8\\uD569\\uB2C8\\uB2E4.\\n    # \\uC544\\uB798\\uC5D0 \\uB9CC\\uB4E0 init\\uC758 \\uB0B4\\uC6A9\\uC740 \\uC774 \\uD074\\uB798\\uC2A4 \\uD615\\uD0DC\\uC758 \\uAC1D\\uCCB4\\uB97C \\uC0DD\\uC131\\uD560\\uB54C self\\uB97C \\uC81C\\uC678\\uD55C \\uC778\\uC790 2\\uAC1C\\uB97C \\uC904 \\uC218 \\uC788\\uB294\\uB370\\n    # \\uB9CC\\uC57D data\\uD558\\uB098\\uB97C \\uC900\\uB2E4\\uBA74 \\uC5F0\\uACB0\\uB41C \\uC8FC\\uC18C\\uAC12\\uC774 \\uC5C6\\uB294 \\uB370\\uC774\\uD130\\uB97C \\uBB34\\uC791\\uC704 \\uACF5\\uAC04\\uC5D0 \\uC0DD\\uC131\\uD558\\uB294\\uAC83\\uC774\\uACE0\\n    # \\uB9CC\\uC57D data\\uC640 next(\\uB2E4\\uC74C \\uB370\\uC774\\uD130\\uB85C \\uC5F0\\uACB0\\uB418\\uB294 \\uC8FC\\uC18C\\uAC12)\\uAC12\\uC744 \\uB123\\uC5B4\\uC900\\uB2E4\\uBA74 \\uBB34\\uC791\\uC704 \\uACF5\\uAC04\\uC5D0 \\uB370\\uC774\\uD130\\uB97C \\uB9CC\\uB4DC\\uB294\\uB370 \\uB2E4\\uB978 \\uB370\\uC774\\uD130\\uC640 \\uC5F0\\uACB0\\uB41C \\uB9C1\\uD06C\\uB4DC \\uB9AC\\uC2A4\\uD2B8\\uAC00 \\uB9CC\\uB4E4\\uC5B4\\uC9C0\\uB294 \\uAC83\\uC774\\uB2E4.\\n    def __init__(self, data, next=None):\\n        self.data = data\\n        self.next = next\\n        \\n# \\uB178\\uB4DC\\uC640 \\uB178\\uB4DC \\uC5F0\\uACB0\\uD558\\uAE30\\nnode1 = Node(1)\\nnode2 = Node(2)\\n# \\uD604\\uC7AC \\uC704\\uC758 node1\\uACFC node2\\uB294 \\uC5F0\\uACB0\\uB418\\uC5B4\\uC788\\uC9C0 \\uC54A\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uC5F0\\uACB0\\uC2DC\\uCF1C\\uC918\\uC57C\\uD55C\\uB2E4\\nnode1.next = node2\\nhead = node1 # head\\uB77C\\uB294 \\uBCC0\\uC218\\uC5D0\\uB294 \\uB9E8 \\uCC98\\uC74C \\uC2DC\\uC791\\uC810\\uC758 node\\uB97C \\uAC00\\uB9AC\\uD0A8\\uB2E4\\n\\nprint(\\\"head next\\\",head.next.data) # \\uACB0\\uACFC 2, \\uC65C\\uB0D0\\uD558\\uBA74 node1\\uC758 next\\uB294 node2\\uAC00\\uB418\\uACE0 node2\\uC758 \\uB370\\uC774\\uD130\\uB294 2\\uC774\\uAE30 \\uB54C\\uBB38\\uC774\\uB2E4\\n\\n# \\uB9C1\\uD06C\\uB4DC \\uB9AC\\uC2A4\\uD2B8\\uB85C \\uB370\\uC774\\uD130 \\uCD94\\uAC00\\uD558\\uB294\\uBC95\\ndef add(data):\\n    node = head\\n    # node.next\\uB9CC \\uB123\\uC73C\\uBA74 node.next\\uAC00 \\uC788\\uC73C\\uBA74 while\\uBB38\\uC744 \\uC2E4\\uD589\\uD55C\\uB2E4\\uB294 \\uC758\\uBBF8\\uC774\\uACE0 \\n    # \\uC774\\uB807\\uAC8C\\uB418\\uBA74 node.next\\uAC00 none\\uC77C\\uB54C node\\uC758 \\uAC12\\uC740 \\uB9C8\\uC9C0\\uB9C9 node\\uC758 \\uAC12\\uC774 \\uB4E4\\uC5B4\\uAC00\\uAC8C\\uB41C\\uB2E4\\n    while node.next: \\n        node = node.next\\n    # while\\uBB38\\uC744 \\uBE60\\uC838\\uB098\\uC624\\uBA74 \\uB9C8\\uC9C0\\uB9C9 node\\uC774\\uACE0 \\uADF8 node\\uC758 next \\uC8FC\\uC18C\\uAC12\\uC5D0 \\uC0C8\\uB85C \\uC0DD\\uC131\\uB41C node\\uB97C \\uB123\\uC5B4\\uC900\\uB2E4\\n    node.next = Node(data)\\n    \\nfor i in range(8):\\n    add(i + 3)\\n\\nwhile head.next:\\n    print('final linkedlist data',head.data)\\n    head = head.next\\n\\n# \\uACB0\\uACFC\\nhead next 2\\nfinal linkedlist data 1\\nfinal linkedlist data 2\\nfinal linkedlist data 3\\nfinal linkedlist data 4\\nfinal linkedlist data 5\\nfinal linkedlist data 6\\nfinal linkedlist data 7\\nfinal linkedlist data 8\\nfinal linkedlist data 9\\n\")), mdx(\"h2\", null, \"\\uB9C1\\uD06C\\uB4DC \\uB9AC\\uC2A4\\uD2B8\\uC758 \\uC7A5\\uB2E8\\uC810\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uC7A5\\uC810\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBBF8\\uB9AC \\uB370\\uC774\\uD130 \\uACF5\\uAC04\\uC744 \\uD560\\uB2F9\\uD558\\uC9C0 \\uC54A\\uC544\\uB3C4\\uB41C\\uB2E4.\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uBC30\\uC5F4\\uC740 \\uBBF8\\uB9AC \\uB370\\uC774\\uD130 \\uACF5\\uAC04\\uC744 \\uD560\\uB2F9\\uD574\\uC57C\\uD55C\\uB2E4\"))))), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"p\", {\n    parentName: \"li\"\n  }, \"\\uB2E8\\uC810\"), mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC5F0\\uACB0\\uC744 \\uC704\\uD55C \\uBCC4\\uB3C4\\b \\uB370\\uC774\\uD130 \\uACF5\\uAC04\\uC774 \\uD544\\uC694\\uD558\\uBBC0\\uB85C, \\uC800\\uC7A5 \\uACF5\\uAC04 \\uD6A8\\uC728\\uC774 \\uB192\\uC9C0 \\uC54A\\uC74C <-- \\uBC30\\uC5F4\\uCC98\\uB7FC \\uB370\\uC774\\uD130 \\uACF5\\uAC04\\uB9CC\\uC788\\uB294 \\uAC83\\uC774\\uC544\\uB2C8\\uB77C \\uD3EC\\uC778\\uD130(\\uC8FC\\uC18C)\\uAC12\\uC744 \\uC800\\uC7A5\\uD560 \\uACF5\\uAC04\\uB3C4 \\uB530\\uB85C \\uB9C8\\uB828\\uD574\\uC57C\\uB418\\uAE30 \\uB54C\\uBB38\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC5F0\\uACB0 \\uC815\\uBCF4\\uB97C \\uCC3E\\uB294 \\uC2DC\\uAC04\\uC774 \\uD544\\uC694\\uD558\\uBBC0\\uB85C \\uC811\\uADFC \\uC18D\\uB3C4\\uAC00 \\uB290\\uB9AC\\uB2E4. <-- \\uBC30\\uC5F4\\uC740 \\uC778\\uB371\\uC2A4 \\uBC88\\uD638\\uB85C \\uBC14\\uB85C \\uC6D0\\uD558\\uB294 \\uB370\\uC774\\uD130\\uC5D0 \\uC811\\uADFC \\uAC00\\uB2A5\\uD558\\uC9C0\\uB9CC \\uB9C1\\uD06C\\uB4DC\\uB9AC\\uC2A4\\uD2B8\\uB294 \\uCC98\\uC74C\\uBD80\\uD130 \\uAC80\\uC0C9\\uD574\\uC57C\\uB428.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC911\\uAC04 \\uB370\\uC774\\uD130 \\uC0AD\\uC81C \\uC2DC, \\uC55E \\uB4A4 \\uB370\\uC774\\uD130\\uC758 \\uC5F0\\uACB0\\uC744 \\uC7AC\\uAD6C\\uC131\\uD574\\uC57C\\uB418\\uB294 \\uBD80\\uAC00\\uC801\\uC778 \\uC791\\uC5C5\\uC774 \\uD544\\uC694\\uD558\\uB2E4 \")))), mdx(\"h2\", null, \"\\uB9C1\\uD06C\\uB4DC \\uB9AC\\uC2A4\\uD2B8 \\uB370\\uC774\\uD130 \\uC0AC\\uC774\\uC5D0 \\uB370\\uC774\\uD130\\uB97C \\uCD94\\uAC00\\uD560 \\uB54C\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uB9C1\\uD06C\\uB4DC \\uB9AC\\uC2A4\\uD2B8\\uB294 \\uC720\\uC9C0 \\uAD00\\uB9AC\\uC5D0 \\uBD80\\uAC00\\uC801\\uC778 \\uAD6C\\uD604\\uC774 \\uD544\\uC694\\uD558\\uB2E4\\n\", mdx(\"img\", _extends({\n    parentName: \"li\"\n  }, {\n    \"src\": \"../../src/images/linkedlist2.png\",\n    \"alt\": \"ㅇㅇ\"\n  })), \"  \")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"# node3\\uC774\\uB77C\\uB294 \\uB178\\uB4DC\\uB97C \\uB9CC\\uB4E4\\uC5B4 node1\\uACFC node2 \\uC0AC\\uC774\\uC5D0 \\uB123\\uAE30\\nnode3 = Node(1.5)\\n\\nsearch = True\\nnode = node1\\n\\n# node 1\\uACFC 2\\uC0AC\\uC774\\uC5D0 \\uB123\\uC744 \\uAC83\\uC774\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uCCAB\\uBC88\\uC9F8 \\uB178\\uB4DC\\uC77C\\uB54C search\\uC5D0 false\\uB97C \\uB123\\uC5B4 while\\uBB38\\uC744 \\uC911\\uB2E8\\uC2DC\\uD0A4\\uACE0 \\n# 1\\uC774\\uC544\\uB2C8\\uBA74 \\uACC4\\uC18D\\uAC80\\uC0C9\\uD558\\uC5EC node\\uC5D0 \\uB2E4\\uC74C \\uB178\\uB4DC\\uB97C \\uB123\\uC5B4\\uC900\\uB2E4\\nwhile search:\\n    if node.data == 1:\\n        search = False\\n    # node.data\\uAC00 1\\uC77C \\uB54C\\uAE4C\\uC9C0 \\uB2E4\\uC74C \\uB178\\uB4DC\\uB97C \\uAC80\\uC0C9\\uD55C\\uB2E4\\n    else:\\n        node = node.next\\n\\n# node_next\\uC5D0 node1\\uC758 \\uB2E4\\uC74C \\uB178\\uB4DC\\uC758 \\uC8FC\\uC18C\\uAC12\\uC744 \\uB123\\uC5B4\\uC900\\uB2E4\\nnode_next = node.next\\nprint('node_nextdata', node_next.data)\\n# node1\\uC758 \\uC8FC\\uC18C\\uAC12\\uC5D0 \\uC0C8\\uB85C \\uC0DD\\uC131\\uB41C node3\\uC758 \\uC8FC\\uC18C\\uAC12\\uC744 \\uB123\\uC5B4\\uC900\\uB2E4\\nnode.next = node3 \\n#\\uC0DD\\uC131\\uD55C \\uB178\\uB4DC3\\uC758 \\uC8FC\\uC18C\\uAC12\\uC5D0 node_next\\uAC12\\uC744 \\uB123\\uC5B4 \\uC5F0\\uACB0\\uD574\\uC900\\uB2E4\\nnode3.next = node_next\\n\\nwhile node.next:\\n    print('result',node.data)\\n    node = node.next\\n    \\n\\n# \\uACB0\\uACFC <- 1\\uACFC 2 \\uC0AC\\uC774\\uC5D0 1.5\\uAC00 \\uB4E4\\uC5B4\\uAC04\\uAC83\\uC744 \\uD655\\uC778\\uD560 \\uC218 \\uC788\\uB2E4\\nnode_nextdata 2\\nresult 1\\nresult 1.5\\nresult 2\\nresult 3\\nresult 4\\nresult 5\\nresult 6\\nresult 7\\nresult 8\\nresult 9\\n\")), mdx(\"h2\", null, \"\\uB9C1\\uD06C\\uB4DC \\uB9AC\\uC2A4\\uD2B8\\uB97C \\uAC1D\\uCCB4\\uC9C0\\uD5A5 \\uD615\\uD0DC\\uB85C \\uAD6C\\uD604\\uD558\\uC5EC \\uB370\\uC774\\uD130 \\uCD94\\uAC00, \\uAC80\\uC0C9, \\uC0AD\\uC81C, \\uD2B9\\uC815 \\uB178\\uB4DC \\uAC80\\uC0C9\\uD558\\uB294 \\uB85C\\uC9C1 \\uAD6C\\uD604\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"class Node:\\n    def __init__(self, data, next=None):\\n        self.data = data\\n        self.next = next\\n\\n# \\uB178\\uB4DC\\uB97C \\uAD00\\uB9AC\\uD558\\uB294 \\uD074\\uB798\\uC2A4\\uB97C \\uAD6C\\uC131\\nclass NodeMgmt:\\n    def __init__(self, data):\\n        # \\uAD00\\uB9AC\\uD560 \\uB178\\uB4DC\\uC758 \\uD5E4\\uB4DC \\uAC12\\uC744 \\uBBF8\\uB9AC \\uC800\\uC7A5\\uD558\\uB3C4\\uB85D\\uD558\\uB294 \\uAD6C\\uBB38\\n        self.head = Node(data)\\n    \\n    # \\uB178\\uB4DC\\uC5D0 \\uB370\\uC774\\uD130\\uB97C \\uB123\\uC74C\\n    def add(self, data):\\n        # \\uB9CC\\uC57D \\uB178\\uB4DC\\uC758 \\uD5E4\\uB4DC\\uAC12\\uC774 \\uC5C6\\uB294 \\uACBD\\uC6B0 \\uD574\\uB2F9 \\uB178\\uB4DC\\uC758 \\uB370\\uC774\\uD130\\uB97C \\uD5E4\\uB4DC\\uAC12\\uC73C\\uB85C \\uB123\\uB294\\uB2E4 \\n        if self.head == '':\\n            self.head = Node(data)\\n        else:\\n            node = self.head\\n            # node\\uC758 next\\uAC00 none\\uC774 \\uB418\\uBA74 \\uB9C8\\uC9C0\\uB9C9 \\uB178\\uB4DC\\uAC00 node \\uBCC0\\uC218\\uC5D0 \\uB4E4\\uC5B4\\uAC00\\uC788\\uC744 \\uAC83\\uC774\\uB2E4\\n            while node.next:\\n                node = node.next\\n            # \\uB9C8\\uC9C0\\uB9C9 \\uB178\\uB4DC\\uC758 next\\uB294 none\\uC77C\\uD150\\uB370 \\uC774\\uB54C \\uC0C8\\uB85C\\uC6B4 \\uB178\\uB4DC\\uB97C \\uC0DD\\uC131\\uD558\\uC5EC \\uB123\\uC5B4\\uC8FC\\uBA74 \\uB178\\uB4DC\\uAC00 \\uCD94\\uAC00\\uB41C\\uB2E4\\n            node.next = Node(data)\\n         \\n    # \\uB178\\uB4DC\\uC758 \\uC804\\uCCB4 \\uB370\\uC774\\uD130\\uB97C \\uAC80\\uC0C9\\n    def desc(self):\\n        node = self.head\\n        while node:\\n            print(node.data)\\n            node = node.next\\n    \\n    def delete(self, data):\\n        if self.head == '':\\n            print(\\\"\\uD574\\uB2F9 \\uAC12\\uC744 \\uAC00\\uC9C4 \\uB178\\uB4DC\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\\\")\\n            return\\n        # \\uD5E4\\uB4DC \\uB370\\uC774\\uD130 \\uC0AD\\uC81C\\n        if self.head.data == data:\\n            temp = self.head\\n            # \\uD5E4\\uB4DC \\uB178\\uB4DC\\uC758 \\uC8FC\\uC18C\\uB97C \\uB2E4\\uC74C \\uB178\\uB4DC\\uC758 \\uC8FC\\uC18C\\uB85C \\uBA3C\\uC800 \\uBCC0\\uACBD\\uC2DC\\uCF1C\\uC900\\uB2E4.\\n            self.head = self.head.next\\n            del temp\\n        # \\uB9C8\\uC9C0\\uB9C9 \\uB178\\uB4DC \\uC0AD\\uC81C\\n        else:\\n            node = self.head\\n            while node.next:\\n                # \\uC911\\uAC04\\uB178\\uB4DC\\uC758 \\uB370\\uC774\\uD130 \\uC0AD\\uC81C\\n                if node.next.data == data:\\n                    temp = node.next\\n                    # \\uC0AD\\uC81C\\uD560 \\uB178\\uB4DC\\uC758 \\uB2E4\\uC74C \\uB178\\uB4DC\\uB97C \\uC911\\uAC04 \\uB178\\uB4DC\\uC758 \\uC8FC\\uC18C\\uAC12\\uC73C\\uB85C \\uBCC0\\uACBD\\n                    node.next = node.next.next\\n                    # \\uC911\\uAC04 \\uB178\\uB4DC \\uC0AD\\uC81C\\n                    del temp\\n                else:\\n                    node = node.next\\n                    \\n    def search_node(self, data):\\n        node = self.head\\n        while node.next:\\n            if node.data == data:\\n                return node\\n            else:\\n                node = node.next\\n            \\n            \\n# \\uB178\\uB4DC\\uB97C \\uC0DD\\uC131\\uD558\\uACE0 \\uAC80\\uC0C9\\uD574\\uBCF4\\uC790\\nlinkedlist1 = NodeMgmt(0)\\n\\nfor i in range(1,10):\\n    linkedlist1.add(i)\\n    \\n\\nlinkedlist1.delete(0)\\n\\nlinkedlist1.delete(5)\\n\\nlinkedlist1.delete(9)\\n\\nprint('\\uCC3E\\uC74C',linkedlist1.search_node(4))\\n\\nlinkedlist1.desc()\\n\\n# \\uACB0\\uACFC\\n\\n\\uCC3E\\uC74C <__main__.Node object at 0x1027dd210>\\n1\\n2\\n3\\n4\\n6\\n7\\n8\\n\")), mdx(\"h2\", null, \"\\uB2E4\\uC591\\uD55C \\uB9C1\\uD06C\\uB4DC \\uB9AC\\uC2A4\\uD2B8 \\uAD6C\\uC870\"), mdx(\"h3\", null, \"\\uB354\\uBE14 \\uB9C1\\uD06C\\uB4DC \\uB9AC\\uC2A4\\uD2B8 \\uAD6C\\uC870\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC774\\uC911 \\uC5F0\\uACB0 \\uB9AC\\uC2A4\\uD2B8\\uB77C\\uACE0\\uD568\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"\\uC7A5\\uC810: \\uC591\\uBC29\\uD5A5\\uC73C\\uB85C \\uC5F0\\uACB0\\uB418\\uC5B4\\uC788\\uC5B4\\uC11C \\uB178\\uB4DC \\uD0D0\\uC0C9\\uC774 \\uC591\\uCABD\\uC73C\\uB85C \\uBAA8\\uB450 \\uAC00\\uB2A5\\n\", mdx(\"img\", _extends({\n    parentName: \"li\"\n  }, {\n    \"src\": \"../../src/images/linkedlist3.png\",\n    \"alt\": \"ㄴㅇㅊㄴ\"\n  })))), mdx(\"p\", null, \"\\uC704\\uC758 \\uC774\\uBBF8\\uC9C0\\uB97C \\uBCF4\\uBA74 \\uD55C \\uB178\\uB4DC\\uC5D0 \\uB370\\uC774\\uD130\\uAC12\\uACFC \\uC774\\uC804\\uB178\\uB4DC\\uC640 \\uB2E4\\uC74C\\uB178\\uB4DC\\uC758 \\uC8FC\\uC18C\\uAC12\\uC744 \\uAC00\\uC9C0\\uACE0 \\uC788\\uB2E4.  \"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-python\"\n  }), \"class Node:\\n    def __init__(self, data, prev=None ,next=None):\\n        self.data = data\\n        self.prev = prev\\n        self.next = next\\n        \\nclass NodeMgmt:\\n    def __init__(self, data):\\n        # \\uB178\\uB4DC\\uB97C \\uCC98\\uC74C \\uC0DD\\uC131\\uD560 \\uB54C \\uD5E4\\uB4DC\\uB97C \\uC124\\uC815\\uD574\\uC8FC\\uB294\\uB370, \\uC774\\uBC88\\uC5D4 \\uB354\\uBE14\\uB9C1\\uD06C\\uB4DC\\uB9AC\\uC2A4\\uD2B8\\uC774\\uAE30 \\uB54C\\uBB38\\uC5D0 \\n        # \\uB05D\\uBD80\\uBD84\\uBD80\\uD130 \\uAC80\\uC0C9\\uD560 \\uC218 \\uC788\\uB3C4\\uB85D tail\\uC774 \\uC874\\uC7AC\\uD55C\\uB2E4.\\n        self.head = Node(data)\\n        self.tail = self.head\\n        \\n    def insert(self,data):\\n        # self.head\\uAC00 \\uC5C6\\uB2E4\\uBA74 \\uB178\\uB4DC\\uB97C \\uC0DD\\uC131\\uD558\\uACE0 head\\uC640 tail\\uC744 \\uC124\\uC815\\uD574\\uC900\\uB2E4\\n        if self.head == None:\\n            self.head = Node(data)\\n            # \\uCC98\\uC74C\\uC5D0 \\uB178\\uB4DC\\uB97C \\uC0DD\\uC131\\uD558\\uBA74 head\\uB098 tail\\uC774\\uB098 \\uB178\\uB4DC\\uAC00 \\uD558\\uB098\\uC774\\uAE30 \\uB54C\\uBB38\\uC5D0 \\n            # \\uC544\\uB798\\uC640 \\uAC19\\uC774 head\\uB97C tail\\uC5D0 \\uB123\\uC5B4\\uC900\\uB2E4\\n            self.tail = self.head \\n        else:\\n            # \\uD5E4\\uB4DC(\\uB178\\uB4DC)\\uAC00 \\uC788\\uB2E4\\uBA74, \\n            node = self.head\\n            # \\uC544\\uB798\\uC5D0 while\\uBB38\\uC774 \\uB05D\\uB098\\uBA74 \\uB9C8\\uC9C0\\uB9C9\\uB178\\uB4DC\\uAC00 \\uB4E4\\uC5B4\\uC788\\uC744 \\uAC83\\uC774\\uB2E4.\\n            while node.next:\\n                node = node.next\\n            # \\uC0C8\\uB85C \\uB123\\uC744 \\uB178\\uB4DC\\uB97C \\uC0DD\\uC131\\uD55C\\uB2E4\\n            new = Node(data)\\n            # node.next(\\uB9C8\\uC9C0\\uB9C9\\uB178\\uB4DC\\uC758 \\uB2E4\\uC74C\\uC8FC\\uC18C)\\uC5D0 \\uC0C8\\uB85C \\uC0DD\\uC131\\uD55C \\uB178\\uB4DC\\uC758 \\uC8FC\\uC18C\\uAC12\\uC744 \\uB123\\uB294\\uB2E4\\n            node.next = new\\n            # \\uADF8\\uB0E5 \\uB9C1\\uD06C\\uB4DC\\uB9AC\\uC2A4\\uD2B8\\uC640\\uB294 \\uB2E4\\uB974\\uAC8C prev(\\uC774\\uC804 \\uB178\\uB4DC\\uC758 \\uC8FC\\uC18C)\\uC5D0 \\uB9C8\\uC9C0\\uB9C9\\uB178\\uB4DC(node)\\uC758 \\uC8FC\\uC18C\\uAC12\\uC744 \\uB123\\uC5B4\\uC900\\uB2E4\\n            new.prev = node\\n            # \\uB9C8\\uC9C0\\uB9C9\\uC73C\\uB85C \\uD604\\uC7AC self\\uC758 tail\\uC740 \\uB9C8\\uC9C0\\uB9C9 \\uB178\\uB4DC \\uB97C \\uAC00\\uB9AC\\uD0A4\\uACE0 \\uC788\\uAE30 \\uB54C\\uBB38\\uC5D0 \\uC774\\uB97C \\uC0C8\\uB85C\\uC0DD\\uC131\\uB41C \\uB178\\uB4DC\\uC758 \\uC8FC\\uC18C\\uB85C \\uAD50\\uCCB4\\uD574\\uC918\\uC57C\\uD55C\\uB2E4\\n            self.tail = new\\n            \\n    def desc(self):\\n        node = self.head\\n        while node:\\n            print(node.data)\\n            node = node.next\\n            \\n    def search_from_head(self, data):\\n        if self.head == None:\\n            return False\\n            \\n        node = self.head\\n        while node:\\n            if node.data == data:\\n                return node\\n            else:\\n                node = node.next\\n        return false\\n    \\n    def search_from_tail(self, data):\\n        if self.tail == None:\\n            return False\\n\\n        node = self.tail\\n        while node:\\n            if node.data == data:\\n                return node\\n            else:\\n                node = node.prev\\n        return false\\n    \\n    # \\uC544\\uB798\\uC758 \\uD568\\uC218\\uB294 data\\uB77C\\uB294 \\uAC12\\uC744 \\uAC00\\uC9C4 \\uB178\\uB4DC\\uB97C \\uC0C8\\uB85C \\uC0DD\\uC131\\uD558\\uB294\\uB370, before_data\\uB178\\uB4DC \\uC55E\\uC5D0 \\uB9CC\\uB4E4\\uACA0\\uB2E4\\uB294 \\uC758\\uBBF8\\n    def insert_before(self, data, before_data):\\n        if self.head == None:\\n            self.head = Node(data)\\n            return True\\n        else:\\n            node = self.tail \\n            # \\uB9C8\\uC9C0\\uB9C9\\uB178\\uB4DC tail\\uC5D0\\uC11C\\uBD80\\uD130 \\uBD24\\uC744\\uB54C \\uBAA9\\uD45C \\uB178\\uB4DC\\uC778 before_data \\uB178\\uB4DC\\uC640 \\uAC19\\uC9C0\\uC54A\\uB2E4\\uBA74 \\uBC18\\uBCF5\\uD558\\uB77C\\uB294 \\uAD6C\\uBB38\\n            while node.data != before_data:\\n                # \\uB178\\uB4DC\\uC758 \\uC774\\uC804 \\uB178\\uB4DC\\uB85C \\uC774\\uB3D9\\n                node = node.prev\\n                # \\uB9CC\\uC57D before_data\\uC778 \\uD2B9\\uC815\\uB370\\uC774\\uD130\\uB97C \\uAC00\\uC9C4 \\uB178\\uB4DC\\uAC00 \\uC5C6\\uB2E4\\uBA74 \\uD568\\uC218 \\uC885\\uB8CC \\n                if node == None:\\n                    return False\\n            # \\uC704\\uC758 \\uBC18\\uBCF5\\uBB38\\uC774 \\uB05D\\uB098\\uBA74 before_data\\uC778 \\uB178\\uB4DC\\uB97C \\uCC3E\\uC740\\uAC83\\uC774\\uACE0 data\\uB97C \\uAC00\\uC9C4 \\uC0C8 \\uB178\\uB4DC\\uB97C \\uC0DD\\uC131\\n            new = Node(data)\\n            # \\uD2B9\\uC815\\uB178\\uB4DC\\uC758 \\uC55E\\uC758 \\uB178\\uB4DC\\uB97C \\uAC00\\uB9AC\\uD0A4\\uAC8C\\uD568\\n            before_new = node.prev\\n            # \\uD2B9\\uC815\\uB178\\uB4DC \\uC55E\\uC758 \\uB178\\uB4DC\\uC758 \\uB2E4\\uC74C \\uB178\\uB4DC\\uC758 \\uC8FC\\uC18C\\uB294 \\uC0C8\\uB85C \\uC0DD\\uC131\\uB41C new \\uB178\\uB4DC\\uAC00\\uB428\\n            before_new.next = new\\n            # \\uC0C8\\uB85C \\uC0DD\\uC131\\uB41C \\uB178\\uB4DC\\uC758 \\uC774\\uC804 \\uB178\\uB4DC\\uB294 \\uD2B9\\uC815\\uB178\\uB4DC\\uC758 \\uC55E\\uC758 \\uB178\\uB4DC\\uB97C \\uAC00\\uB9AC\\uD0A8\\uB2E4\\n            new.prev = before_new\\n            # \\uC0C8\\uB85C \\uC0DD\\uC131\\uB41C \\uB178\\uB4DC\\uC758 \\uB2E4\\uC74C\\uC8FC\\uC18C\\uB294 \\uD2B9\\uC815 \\uB178\\uB4DC\\uB97C \\uAC00\\uB9AC\\uD0A8\\uB2E4\\n            new.next = node\\n            # \\uD2B9\\uC815\\uB178\\uB4DC\\uC758 \\uC774\\uC804\\uB178\\uB4DC\\uB294 \\uC0C8\\uB85C \\uC0DD\\uC131\\uB41C \\uB178\\uB4DC\\uB97C \\uAC00\\uB9AC\\uCF1C\\uC57C\\uD55C\\uB2E4\\n            node.prev = new\\n    \\n    def insert_after(self, data, after_data):\\n        if self.head == None:\\n            self.head = Node(data)\\n            return True\\n        else:\\n            node = self.head\\n            while node.data != after_data:\\n                node = node.next\\n                if node == None:\\n                    return False\\n            new = Node(data)\\n            after_new = node.next\\n            node.next = new\\n            new.next = after_new\\n            after_new.prev = new\\n            new.prev = node\\n            \\ndoublelinkedlist = NodeMgmt(0)\\n\\nfor i in range(1,10):\\n    doublelinkedlist.insert(i)\\n\\ndoublelinkedlist.insert_before(1.5, 2)\\ndoublelinkedlist.insert_after(3.5,3)\\nprint('search_from_head=>',doublelinkedlist.search_from_head(3).data)\\nprint('search_from_tail=>',doublelinkedlist.search_from_tail(3).data)\\ndoublelinkedlist.desc()\\n\\n\\n# \\uACB0\\uACFC\\nsearch_from_head=> 3\\nsearch_from_tail=> 3\\n0\\n1\\n1.5\\n2\\n3\\n3.5\\n4\\n5\\n6\\n7\\n8\\n9\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;","tableOfContents":{"items":[{"url":"#링크드리스트","title":"링크드리스트","items":[{"url":"#링크드-리스트의-기본-구조와-용어","title":"링크드 리스트의 기본 구조와 용어","items":[{"url":"#일반적인-링크드-리스트의-형태","title":"일반적인 링크드 리스트의 형태"}]},{"url":"#링크드-리스트-노드-직접-구현하여-구성하기","title":"링크드 리스트 노드 직접 구현하여 구성하기"},{"url":"#링크드-리스트의-장단점","title":"링크드 리스트의 장단점"},{"url":"#링크드-리스트-데이터-사이에-데이터를-추가할-때","title":"링크드 리스트 데이터 사이에 데이터를 추가할 때"},{"url":"#링크드-리스트를-객체지향-형태로-구현하여-데이터-추가-검색-삭제-특정-노드-검색하는-로직-구현","title":"링크드 리스트를 객체지향 형태로 구현하여 데이터 추가, 검색, 삭제, 특정 노드 검색하는 로직 구현"},{"url":"#다양한-링크드-리스트-구조","title":"다양한 링크드 리스트 구조","items":[{"url":"#더블-링크드-리스트-구조","title":"더블 링크드 리스트 구조"}]}]}]},"parent":{"__typename":"File","relativePath":"datastructure&algorithm/5.linkedlist.md"},"frontmatter":{"metaTitle":"링크드리스트(LinkedList)","metaDescription":null}},"allMdx":{"edges":[{"node":{"fields":{"slug":"/framework/prisma","title":"Prisma"}}},{"node":{"fields":{"slug":"/datastructure&algorithm","title":"자료구조 & 알고리즘(Datastructure & Algorithm)"}}},{"node":{"fields":{"slug":"/framework","title":"프레임워크(Framework)"}}},{"node":{"fields":{"slug":"/git","title":"깃(Git)"}}},{"node":{"fields":{"slug":"/infra","title":"인프라(Infra)"}}},{"node":{"fields":{"slug":"/","title":"SuHyeon's TechBlog"}}},{"node":{"fields":{"slug":"/library","title":"라이브러리(Library)"}}},{"node":{"fields":{"slug":"/language","title":"언어(Language)"}}},{"node":{"fields":{"slug":"/tdd","title":"테스트 주도 개발(TDD)"}}},{"node":{"fields":{"slug":"/terminology","title":"용어정리(terminology)"}}},{"node":{"fields":{"slug":"/terminology/web","title":"Web"}}},{"node":{"fields":{"slug":"/tdd/1.unit-test","title":"유닛 테스트(Unit Test)"}}},{"node":{"fields":{"slug":"/tdd/2.mocha","title":"Mocha Framework"}}},{"node":{"fields":{"slug":"/library/graphql/graphql","title":"GraphQL"}}},{"node":{"fields":{"slug":"/tdd/3.chai","title":"Chai Library"}}},{"node":{"fields":{"slug":"/library/graphql","title":"GraphQL"}}},{"node":{"fields":{"slug":"/library/graphql/ApolloGraphQLserver","title":"ApolloGraphQLserver"}}},{"node":{"fields":{"slug":"/language/javascript","title":"Javascript"}}},{"node":{"fields":{"slug":"/language/python","title":"Python"}}},{"node":{"fields":{"slug":"/language/typescript","title":"Typescript"}}},{"node":{"fields":{"slug":"/library/nexusjs","title":"Nexus.JS"}}},{"node":{"fields":{"slug":"/language/python/basic","title":"Basic"}}},{"node":{"fields":{"slug":"/language/javascript/class","title":"Class"}}},{"node":{"fields":{"slug":"/language/javascript/scope_this","title":"스코프 & 함수 호출 방식에 의해 결정되는 this"}}},{"node":{"fields":{"slug":"/language/javascript/executionContext","title":"Execution Context(실행 컨텍스트)"}}},{"node":{"fields":{"slug":"/infra/1.BasicTheory","title":"Basic Theory"}}},{"node":{"fields":{"slug":"/infra/2.aws","title":"aws"}}},{"node":{"fields":{"slug":"/infra/3.docker","title":"Docker"}}},{"node":{"fields":{"slug":"/infra/3.docker/docker","title":"Docker"}}},{"node":{"fields":{"slug":"/infra/3.docker/dockerawsdeploy","title":"Docker AWS EC2 Deploy"}}},{"node":{"fields":{"slug":"/infra/3.docker/dockerbasic","title":"Docker Basic"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-Basic","title":"AWS-Basic"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-RDS","title":"AWS-RDS"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-EC2","title":"AWS-EC2"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-Route53","title":"AWS-Route 53"}}},{"node":{"fields":{"slug":"/infra/2.aws/AWS-S3","title":"AWS-S3"}}},{"node":{"fields":{"slug":"/git/basic-git-command","title":"Basic git command"}}},{"node":{"fields":{"slug":"/git/changing-default-branch","title":"Changing the Default Branch"}}},{"node":{"fields":{"slug":"/git/gitforksync","title":"git fork & sync"}}},{"node":{"fields":{"slug":"/git/configuring-protected-branches","title":"Configure Branch Protection Rule"}}},{"node":{"fields":{"slug":"/git/rebase","title":"Rebase"}}},{"node":{"fields":{"slug":"/framework/electron","title":"일렉트론 학습"}}},{"node":{"fields":{"slug":"/framework/NextJs","title":"Next Js"}}},{"node":{"fields":{"slug":"/framework/prisma/NoticePrisma","title":"Notice Prisma"}}},{"node":{"fields":{"slug":"/framework/prisma/prisma2","title":"Prisma 2"}}},{"node":{"fields":{"slug":"/framework/electron/electronbasic","title":"Electron Basic"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/10.SpaceComplexity","title":"공간 복잡도(Space Complexity)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/11.BubbleSort","title":"버블 정렬(Bubble Sort)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/13.SelectionSort","title":"선택 정렬(Selection Sort)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/12.InsertionSort","title":"삽입 정렬(Insertion Sort)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/14.RecursiveCall","title":"재귀 용법(Recursive Call)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/15.DynamicProgramming","title":"동적 계획법과 분할 정복(Dynamic Programming & Divide and conquer"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/16.QuickSort","title":"퀵 정렬(Quick Sort)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/17.MergeSort","title":"병렬 정렬(Merge Sort)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/18.SequentialSearch","title":"순차 탐색(Sequential Search)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/19.BinarySearch","title":"탐색 알고리즘(Binary Search)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/2.array","title":"배열(Array)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/20.Graph","title":"그래프(Graph)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/22.Breadth-FirstSearch","title":"너비 우선 탐색(Breadth-FirstSearch)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/21.Depth-FirstSearch","title":"깊이 우선 탐색(Depth-FirstSearch)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/26.BackTracking","title":"백트래킹(BackTracking)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/23.GreedyAlgorithm","title":"탐욕 알고리즘(Greedy Algorithm)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/25.MinimumSpanningTree","title":"최소 신장 트리(Minimum Spanning Tree)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/3.queue","title":"큐(Queue)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/24.DijkstraAlgorithm","title":"다익스트라 알고리즘(Dijkstra Algorithm)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/4.stack","title":"스택(Stack)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/6.TimeComplexity","title":"시간 복잡도(Time Complexity)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/5.linkedlist","title":"링크드리스트(LinkedList)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/9.Heap","title":"힙(Heap)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/8.Tree","title":"트리(Tree)"}}},{"node":{"fields":{"slug":"/datastructure&algorithm/7.HashTable","title":"해쉬 테이블(HashTable)"}}}]}},"pageContext":{"id":"96f68860-2be1-5dd4-99a6-19f66ee76317"}},"staticQueryHashes":["2619113677","2619113677","3706406642","3706406642","417421954","417421954"]}